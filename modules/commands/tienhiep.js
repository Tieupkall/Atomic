const fs = require('fs');
const path = require('path'); 

// ƒê∆∞·ªùng d·∫´n files
const DATA_DIR = './data/tienhiep';
const PLAYERS_DIR = path.join(DATA_DIR, 'players');
const STAGES_PATH = path.join(DATA_DIR, 'stages.json');
const MONSTERS_PATH = path.join(DATA_DIR, 'monsters.json');
const EQUIPMENT_PATH = path.join(DATA_DIR, 'equipment.json');
const MENU_PATH = path.join(DATA_DIR, 'menu_config.json');
const CONFIG_PATH = path.join(DATA_DIR, 'game_config.json');

// Load data t·ª´ files
function loadData(filePath) {
  try {
    return JSON.parse(fs.readFileSync(filePath, 'utf8'));
  } catch (error) {
    console.error(`Error loading ${filePath}:`, error);
    return null;
  }
}

function saveData(filePath, data) {
  try {
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2), 'utf8');
    return true;
  } catch (error) {
    console.error(`Error saving ${filePath}:`, error);
    return false;
  }
}

// Load game data
const STAGES_DATA = loadData(STAGES_PATH);
const MONSTERS = loadData(MONSTERS_PATH);
const EQUIPMENT_LIST = loadData(EQUIPMENT_PATH);
const MENU_CONFIG = loadData(MENU_PATH);
const GAME_CONFIG = loadData(CONFIG_PATH);

const STAGES = STAGES_DATA?.stages || [];
const PHASES = STAGES_DATA?.phases || [];

// Helper functions
function getLevelName(level) {
  const stageIndex = Math.floor(level / 3);
  const phaseIndex = level % 3;

  if (stageIndex >= STAGES.length) {
    return `Vi√™n M√£n ${STAGES[STAGES.length - 1]}`;
  }

  return `${STAGES[stageIndex]} ${PHASES[phaseIndex]}`;
}

function getDisplayLevelName(player) {
  const stageIndex = Math.floor(player.level / 3);
  const phaseIndex = player.level % 3;

  if (stageIndex >= STAGES.length) {
    return `${STAGES[STAGES.length - 1]} Vi√™n M√£n`;
  }

  // Ki·ªÉm tra n·∫øu ƒë√£ full exp trong c·∫£nh gi·ªõi hi·ªán t·∫°i v√† ·ªü ƒê·ªânh Phong
  if (player.exp >= getExpToLevel(player.level) && phaseIndex === 2) {
    return `${STAGES[stageIndex]} ƒê·ªânh Phong (Vi√™n M√£n)`;
  }

  return `${STAGES[stageIndex]} ${PHASES[phaseIndex]}`;
}

function getCurrentStage(level) {
  const stageIndex = Math.floor(level / 3);
  return STAGES[stageIndex] || STAGES[STAGES.length - 1];
}

function getCurrentPhase(level) {
  const phaseIndex = level % 3;
  return PHASES[phaseIndex];
}

function isReadyForTribulation(player) {
  // Ch·ªâ c√≥ th·ªÉ ƒë·ªô ki·∫øp t·ª´ Tr√∫c C∆° tr·ªü l√™n v√† khi ƒë·∫°t ƒê·ªânh Phong v·ªõi full exp
  const currentStage = getCurrentStage(player.level);
  const phaseIndex = player.level % 3;
  
  // Ki·ªÉm tra c√≥ ph·∫£i c·∫£nh gi·ªõi Tr√∫c C∆° tr·ªü l√™n (lo·∫°i b·ªè Luy·ªán Kh√≠ v√† Ph√†m Nh√¢n)
  const eligibleStages = ["Tr√∫c C∆°", "Kim ƒêan", "Nguy√™n Anh", "H√≥a Th·∫ßn", "Anh Bi·∫øn", "V·∫•n ƒê·ªânh"];
  if (!eligibleStages.includes(currentStage)) {
    return false;
  }
  
  // Ph·∫£i ·ªü ƒê·ªânh Phong (phaseIndex = 2) v√† ƒë√£ ƒë·∫°t full exp
  return phaseIndex === 2 && player.exp >= getExpToLevel(player.level);
}

function attemptTribulation(player) {
  if (!isReadyForTribulation(player)) {
    return { success: false, reason: "Ch∆∞a ƒë·ªß ƒëi·ªÅu ki·ªán ƒë·ªô ki·∫øp" };
  }
  
  const currentStage = getCurrentStage(player.level);
  const success = Math.random() < 0.5; // 50% t·ª∑ l·ªá th√†nh c√¥ng
  
  if (success) {
    // Th√†nh c√¥ng - l√™n c·∫£nh gi·ªõi m·ªõi
    player.level++;
    player.exp = 0;
    initializeCombatStats(player);
    
    return {
      success: true,
      message: `üå©Ô∏è ƒê·ªò KI·∫æP TH√ÄNH C√îNG!\n‚ö° V∆∞·ª£t qua l√¥i ki·∫øp ${currentStage}, ti·∫øn v√†o ${getLevelName(player.level)}!`
    };
  } else {
    // Th·∫•t b·∫°i - b·ªã th∆∞∆°ng ƒë·∫°o c∆°
    player.injuredDaoCore = true;
    const injuredTime = new Date();
    injuredTime.setMinutes(injuredTime.getMinutes() + 30); // 30 ph√∫t kh√¥ng th·ªÉ tu luy·ªán
    player.daoCoreInjuredUntil = injuredTime.toISOString();
    
    return {
      success: false,
      message: `üí• ƒê·ªò KI·∫æP TH·∫§T B·∫†I!\n‚ö° L√¥i ki·∫øp ${currentStage} ƒë√£ l√†m t·ªïn th∆∞∆°ng ƒë·∫°o c∆°!\nü©∏ C·∫ßn ƒëan d∆∞·ª£c ch·ªØa tr·ªã ƒë·∫°o c∆° ƒë·ªÉ ti·∫øp t·ª•c tu luy·ªán.`
    };
  }
}

function isDaoCoreInjured(player) {
  return player.daoCoreInjuredUntil && new Date(player.daoCoreInjuredUntil) > new Date();
}

function getDaoCoreInjuryTimeLeft(player) {
  if (!isDaoCoreInjured(player)) return 0;
  return Math.ceil((new Date(player.daoCoreInjuredUntil) - new Date()) / 60000);
}

function healDaoCore(player) {
  delete player.daoCoreInjuredUntil;
  delete player.injuredDaoCore;
}

function getExpToLevel(level) {
  const base = GAME_CONFIG?.experience?.baseExp || 100;
  const multiplier = GAME_CONFIG?.experience?.multiplier || 1.8;
  return Math.floor(base * Math.pow(multiplier, level));
}

function getMaxHp(level) {
  const baseHp = GAME_CONFIG?.combat?.basePlayerHp || 100;
  const hpPerLevel = GAME_CONFIG?.combat?.hpPerLevel || 20;
  return baseHp + (level * hpPerLevel);
}

function getMaxSpiritPower(level) {
  const baseSp = GAME_CONFIG?.combat?.baseSpiritPower || 100;
  const spPerLevel = GAME_CONFIG?.combat?.spiritPowerPerLevel || 10;
  return baseSp + (level * spPerLevel);
}

function getPlayerAttack(player) {
  let attack = 10 + (player.level * 2); // S√°t th∆∞∆°ng c∆° b·∫£n
  
  // T√≠nh s√°t th∆∞∆°ng t·ª´ v≈© kh√≠ trang b·ªã (ch·ªâ v≈© kh√≠ ph√π h·ª£p)
  const playerAvailableWeapons = player.inventory.filter(item => item.type === "v≈© kh√≠" && canUseWeapon(player, item));
  if (playerAvailableWeapons.length > 0) {
    // L·∫•y v≈© kh√≠ c√≥ s√°t th∆∞∆°ng cao nh·∫•t trong nh·ªØng v≈© kh√≠ c√≥ th·ªÉ s·ª≠ d·ª•ng
    const bestWeapon = playerAvailableWeapons.reduce((best, weapon) => 
      (weapon.attack || 0) > (best.attack || 0) ? weapon : best
    );
    attack += bestWeapon.attack || 0;
  }
  
  return attack;
}

function canHunt(player) {
  const spiritCost = GAME_CONFIG?.combat?.spiritPowerCostPerHunt || 10;
  return player.spiritPower >= spiritCost;
}

function consumeSpiritPower(player) {
  const spiritCost = GAME_CONFIG?.combat?.spiritPowerCostPerHunt || 10;
  player.spiritPower = Math.max(0, player.spiritPower - spiritCost);
}

function recoverSpiritPower(player) {
  if (player.spiritPowerRecoveryTime && new Date(player.spiritPowerRecoveryTime) <= new Date()) {
    const recoveryAmount = GAME_CONFIG?.combat?.spiritPowerRecoveryAmount || 10;
    player.spiritPower = Math.min(player.maxSpiritPower, player.spiritPower + recoveryAmount);
    
    // ƒê·∫∑t th·ªùi gian h·ªìi ph·ª•c ti·∫øp theo (1 ph√∫t)
    const recoveryTime = new Date();
    recoveryTime.setMilliseconds(recoveryTime.getMilliseconds() + (GAME_CONFIG?.combat?.spiritPowerRecoveryTime || 60000));
    player.spiritPowerRecoveryTime = recoveryTime.toISOString();
  }
}

function initializeCombatStats(player) {
  // Kh·ªüi t·∫°o m√°u v√† linh l·ª±c n·∫øu ch∆∞a c√≥
  if (typeof player.hp === 'undefined') {
    player.hp = getMaxHp(player.level);
    player.maxHp = getMaxHp(player.level);
  }
  if (typeof player.spiritPower === 'undefined') {
    player.spiritPower = getMaxSpiritPower(player.level);
    player.maxSpiritPower = getMaxSpiritPower(player.level);
  }
  
  // C·∫≠p nh·∫≠t m√°u v√† linh l·ª±c t·ªëi ƒëa theo level
  player.maxHp = getMaxHp(player.level);
  player.maxSpiritPower = getMaxSpiritPower(player.level);
  
  // ƒê·∫£m b·∫£o kh√¥ng v∆∞·ª£t qu√° gi·ªõi h·∫°n
  player.hp = Math.min(player.hp, player.maxHp);
  player.spiritPower = Math.min(player.spiritPower, player.maxSpiritPower);
  
  // Kh·ªüi t·∫°o th·ªùi gian h·ªìi ph·ª•c linh l·ª±c n·∫øu ch∆∞a c√≥
  if (!player.spiritPowerRecoveryTime) {
    const recoveryTime = new Date();
    recoveryTime.setMilliseconds(recoveryTime.getMilliseconds() + (GAME_CONFIG?.combat?.spiritPowerRecoveryTime || 60000));
    player.spiritPowerRecoveryTime = recoveryTime.toISOString();
  }
}

function dropEquipment(monster) {
  // T√≠nh t·ª∑ l·ªá r∆°i ƒë·ªì c∆° b·∫£n theo c·∫•p ƒë·ªô qu√°i
  let baseDropRate = monster.dropRate || 0.8; // T·ª∑ l·ªá r∆°i c∆° b·∫£n
  
  // TƒÉng t·ª∑ l·ªá r∆°i theo c·∫•p ƒë·ªô y√™u th√∫
  if (monster.beastLevel === "Ph√†m Th√∫") baseDropRate = Math.min(baseDropRate + 0.1, 0.9);
  else if (monster.beastLevel === "Y√™u Th√∫") baseDropRate = Math.min(baseDropRate + 0.15, 0.95);
  else if (monster.beastLevel === "Linh Th√∫") baseDropRate = Math.min(baseDropRate + 0.2, 1.0);
  else if (monster.beastLevel === "Th√°nh Th√∫") baseDropRate = 1.0;
  else if (monster.beastLevel === "Y√™u V∆∞∆°ng") baseDropRate = 1.0;
  else if (monster.beastLevel === "Y√™u ƒê·∫ø") baseDropRate = 1.0;
  else if (monster.beastLevel === "Th·∫ßn Th√∫") baseDropRate = 1.0;

  if (Math.random() > baseDropRate) {
    return null; // Kh√¥ng r∆°i g√¨
  }

  // Ch·ªâ r∆°i v·∫≠t li·ªáu ƒë·ªÉ luy·ªán ƒëan - kh√¥ng r∆°i ƒëan d∆∞·ª£c tr·ª±c ti·∫øp
  const materialDrop = getMonsterSpecificMaterials(monster);
  
  if (!materialDrop) {
    return null; // Kh√¥ng c√≥ v·∫≠t li·ªáu ph√π h·ª£p
  }

  return materialDrop;
}

function getMonsterSpecificMaterials(monster) {
  const monsterName = monster.name.toLowerCase();
  const beastLevel = monster.beastLevel;
  
  // Load materials t·ª´ file materials.json
  const materials = loadData(path.join(DATA_DIR, 'materials.json')) || [];
  
  // L·ªçc v·∫≠t li·ªáu theo c·∫•p ƒë·ªô y√™u th√∫
  const suitableMaterials = materials.filter(material => material.beastLevel === beastLevel);
  
  let specificMaterials = [];

  // ƒê·ªãnh nghƒ©a v·∫≠t li·ªáu ƒë·∫∑c tr∆∞ng cho t·ª´ng lo√†i qu√°i d·ª±a tr√™n materials.json
  if (monsterName.includes("lang") || monsterName.includes("s√≥i")) {
    // Huy·∫øt Lang, BƒÉng Tinh S√≥i: r∆°i M√°u Lang, L√¥ng S√≥i, Tinh Th·ªÉ BƒÉng
    specificMaterials = suitableMaterials.filter(material => 
      material.name === "M√°u Lang" ||
      material.name === "L√¥ng S√≥i" ||
      material.name === "Tinh Th·ªÉ BƒÉng"
    );
  } else if (monsterName.includes("gi√°p") || monsterName.includes("thi·∫øt")) {
    // Thi·∫øt Gi√°p Th√∫: r∆°i V·∫£y Thi·∫øt Gi√°p, Tinh T√∫y H·ªón ƒê·ªôn
    specificMaterials = suitableMaterials.filter(material => 
      material.name === "V·∫£y Thi·∫øt Gi√°p" ||
      material.name === "Tinh T√∫y H·ªón ƒê·ªôn"
    );
  } else if (monsterName.includes("h·ªìn") || monsterName.includes("√¢m")) {
    // √Çm H·ªìn: r∆°i Linh H·ªìn √Çm, Ma Kh√≠ Tinh T√∫y
    specificMaterials = suitableMaterials.filter(material => 
      material.name === "Linh H·ªìn √Çm" ||
      material.name === "Ma Kh√≠ Tinh T√∫y"
    );
  } else if (monsterName.includes("ƒëi·ªÉu") || monsterName.includes("kim s√≠")) {
    // Kim S√≠ ƒêi·ªÉu: r∆°i L√¥ng Kim S√≠, L√¥ng Phong ·∫¢nh
    specificMaterials = suitableMaterials.filter(material => 
      material.name === "L√¥ng Kim S√≠" ||
      material.name === "L√¥ng Phong ·∫¢nh"
    );
  } else if (monsterName.includes("∆∞ng") || monsterName.includes("phong ·∫£nh")) {
    // Phong ·∫¢nh ∆Øng: r∆°i L√¥ng Phong ·∫¢nh, L√¥i Ch√¢u
    specificMaterials = suitableMaterials.filter(material => 
      material.name === "L√¥ng Phong ·∫¢nh" ||
      material.name === "L√¥i Ch√¢u"
    );
  } else if (monsterName.includes("b√°o") || monsterName.includes("l√¥i ƒëi·ªÉn")) {
    // L√¥i ƒêi·ªÉn B√°o: r∆°i L√¥i Ch√¢u, Tinh Th·ªÉ BƒÉng
    specificMaterials = suitableMaterials.filter(material => 
      material.name === "L√¥i Ch√¢u" ||
      material.name === "Tinh Th·ªÉ BƒÉng"
    );
  } else if (monsterName.includes("h·∫ßu") || monsterName.includes("ma h·∫ßu")) {
    // X√≠ch Di·ªám Ma H·∫ßu: r∆°i M√°u Ma H·∫ßu, RƒÉng Ma H·∫ßu
    specificMaterials = suitableMaterials.filter(material => 
      material.name === "M√°u Ma H·∫ßu" ||
      material.name === "RƒÉng Ma H·∫ßu"
    );
  } else if (monsterName.includes("long") || monsterName.includes("r·ªìng")) {
    // Long H·ªìn, Th·∫ßn R·ªìng: r∆°i V·∫£y Long H·ªìn, Long C·ªët, Long Ch√¢u Th·∫ßn
    specificMaterials = suitableMaterials.filter(material => 
      material.name === "V·∫£y Long H·ªìn" ||
      material.name === "Long C·ªët" ||
      material.name === "Long Ch√¢u Th·∫ßn"
    );
  } else if (monsterName.includes("ph∆∞·ª£ng")) {
    // Ph∆∞·ª£ng Ho√†ng: r∆°i Ph∆∞·ª£ng L√¥ng
    specificMaterials = suitableMaterials.filter(material => 
      material.name === "Ph∆∞·ª£ng L√¥ng"
    );
  } else if (monsterName.includes("l√¢n") || monsterName.includes("k·ª≥")) {
    // K·ª≥ L√¢n: r∆°i S·ª´ng K·ª≥ L√¢n
    specificMaterials = suitableMaterials.filter(material => 
      material.name === "S·ª´ng K·ª≥ L√¢n"
    );
  } else if (monsterName.includes("v≈©") || monsterName.includes("huy·ªÅn")) {
    // Huy·ªÅn V≈©: r∆°i Gi√°p Huy·ªÅn V≈©
    specificMaterials = suitableMaterials.filter(material => 
      material.name === "Gi√°p Huy·ªÅn V≈©"
    );
  } else if (monsterName.includes("h·ªì") || monsterName.includes("vƒ©") || monsterName.includes("c·ª≠u vƒ©")) {
    // C·ª≠u Vƒ© H·ªì: r∆°i Tinh H·ªìn C·ª≠u Vƒ©
    specificMaterials = suitableMaterials.filter(material => 
      material.name === "Tinh H·ªìn C·ª≠u Vƒ©"
    );
  } else if (monsterName.includes("ma v∆∞∆°ng") || monsterName.includes("qu·ª∑ v∆∞∆°ng")) {
    // Ma V∆∞∆°ng, ƒê·ªãa Ng·ª•c Qu·ª∑ V∆∞∆°ng: r∆°i Ma Kh√≠ Tinh T√∫y, ƒê·ªãa Ng·ª•c H·ªèa Ch·ªßng
    specificMaterials = suitableMaterials.filter(material => 
      material.name === "Ma Kh√≠ Tinh T√∫y" ||
      material.name === "ƒê·ªãa Ng·ª•c H·ªèa Ch·ªßng"
    );
  } else if (monsterName.includes("thi√™n ma") || monsterName.includes("ho√†ng")) {
    // Thi√™n Ma Ho√†ng: r∆°i Thi√™n Ma Tinh Hoa
    specificMaterials = suitableMaterials.filter(material => 
      material.name === "Thi√™n Ma Tinh Hoa"
    );
  } else if (monsterName.includes("tuy·ªát th·∫ø") || monsterName.includes("y√™u v∆∞∆°ng")) {
    // Tuy·ªát Th·∫ø Y√™u V∆∞∆°ng: r∆°i Tuy·ªát Th·∫ø Ma Huy·∫øt
    specificMaterials = suitableMaterials.filter(material => 
      material.name === "Tuy·ªát Th·∫ø Ma Huy·∫øt"
    );
  } else if (monsterName.includes("th√°i th∆∞·ª£ng") || monsterName.includes("y√™u ƒë·∫ø")) {
    // Th√°i Th∆∞·ª£ng Y√™u ƒê·∫ø: r∆°i Th√°i Th∆∞·ª£ng Tinh T√∫y
    specificMaterials = suitableMaterials.filter(material => 
      material.name === "Th√°i Th∆∞·ª£ng Tinh T√∫y"
    );
  } else if (monsterName.includes("h·ªón thi√™n")) {
    // H·ªón Thi√™n Y√™u ƒê·∫ø: r∆°i H·ªón Thi√™n B·∫£o Ch√¢u
    specificMaterials = suitableMaterials.filter(material => 
      material.name === "H·ªón Thi√™n B·∫£o Ch√¢u"
    );
  } else if (monsterName.includes("v√¥ c·ª±c")) {
    // V√¥ C·ª±c Y√™u ƒê·∫ø: r∆°i V√¥ C·ª±c Tinh Th·ªÉ
    specificMaterials = suitableMaterials.filter(material => 
      material.name === "V√¥ C·ª±c Tinh Th·ªÉ"
    );
  } else if (monsterName.includes("t·ªëi c∆∞·ªùng")) {
    // T·ªëi C∆∞·ªùng Y√™u ƒê·∫ø: r∆°i T·ªëi C∆∞·ªùng Ma H·ªìn
    specificMaterials = suitableMaterials.filter(material => 
      material.name === "T·ªëi C∆∞·ªùng Ma H·ªìn"
    );
  } else if (monsterName.includes("th√°i c·ªï") && monsterName.includes("th·∫ßn th√∫")) {
    // Th√°i C·ªï Th·∫ßn Th√∫: r∆°i Th√°i C·ªï Th·∫ßn T·ªßy
    specificMaterials = suitableMaterials.filter(material => 
      material.name === "Th√°i C·ªï Th·∫ßn T·ªßy"
    );
  } else if (monsterName.includes("h·ªón ƒë·ªôn") && monsterName.includes("th·∫ßn th√∫")) {
    // H·ªón ƒê·ªôn Th·∫ßn Th√∫: r∆°i H·ªón ƒê·ªôn Th·∫ßn Tinh
    specificMaterials = suitableMaterials.filter(material => 
      material.name === "H·ªón ƒê·ªôn Th·∫ßn Tinh"
    );
  } else if (monsterName.includes("v√¥ th∆∞·ª£ng")) {
    // V√¥ Th∆∞·ª£ng Th·∫ßn Th√∫: r∆°i V√¥ Th∆∞·ª£ng Th·∫ßn Hoa
    specificMaterials = suitableMaterials.filter(material => 
      material.name === "V√¥ Th∆∞·ª£ng Th·∫ßn Hoa"
    );
  } else if (monsterName.includes("t·ªëi cao")) {
    // T·ªëi Cao Th·∫ßn Th√∫: r∆°i T·ªëi Cao Th·∫ßn Nguy√™n
    specificMaterials = suitableMaterials.filter(material => 
      material.name === "T·ªëi Cao Th·∫ßn Nguy√™n"
    );
  } else if (monsterName.includes("th·∫ßn") && monsterName.includes("r·ªìng")) {
    // Th·∫ßn R·ªìng: r∆°i Long Ch√¢u Th·∫ßn
    specificMaterials = suitableMaterials.filter(material => 
      material.name === "Long Ch√¢u Th·∫ßn"
    );
  }

  // N·∫øu kh√¥ng t√¨m th·∫•y v·∫≠t li·ªáu ƒë·∫∑c tr∆∞ng, l·∫•y ng·∫´u nhi√™n t·ª´ c√πng c·∫•p ƒë·ªô
  if (specificMaterials.length === 0) {
    specificMaterials = suitableMaterials;
  }

  // N·∫øu v·∫´n kh√¥ng c√≥, tr·∫£ v·ªÅ null
  if (specificMaterials.length === 0) {
    return null;
  }

  // Ch·ªçn ng·∫´u nhi√™n m·ªôt v·∫≠t li·ªáu
  const randomIndex = Math.floor(Math.random() * specificMaterials.length);
  const selectedMaterial = specificMaterials[randomIndex];
  
  // T·∫°o object v·∫≠t li·ªáu v·ªõi ƒë·ªãnh d·∫°ng ƒë·ªìng b·ªô v·ªõi materials.json
  return {
    name: selectedMaterial.name,
    type: "v·∫≠t li·ªáu",
    grade: getGradeFromRarity(selectedMaterial.rarity),
    rarity: selectedMaterial.rarity,
    description: selectedMaterial.description,
    sellPrice: selectedMaterial.value * 3, // Gi√° b√°n = value * 3
    buyPrice: selectedMaterial.value * 8,  // Gi√° mua = value * 8
    beastLevel: selectedMaterial.beastLevel,
    uses: selectedMaterial.uses,
    value: selectedMaterial.value // Gi·ªØ l·∫°i gi√° tr·ªã g·ªëc t·ª´ materials.json
  };
}

function getGradeFromRarity(rarity) {
  const rarityToGrade = {
    "Th∆∞·ªùng": "ph√†m kh√≠",
    "Hi·∫øm": "ph√°p kh√≠", 
    "Qu√Ω": "ph√°p kh√≠",
    "C·ª±c Hi·∫øm": "linh kh√≠",
    "Th·∫ßn Tho·∫°i": "linh b·∫£o",
    "Huy·ªÅn Tho·∫°i": "linh b·∫£o",
    "V√¥ C·ª±c": "ti√™n kh√≠",
    "T·ªëi Th∆∞·ª£ng": "ti√™n kh√≠"
  };
  return rarityToGrade[rarity] || "ph√†m kh√≠";
}

// ƒêan d∆∞·ª£c gi·ªù ch·ªâ c√≥ ƒë∆∞·ª£c th√¥ng qua luy·ªán ƒëan - kh√¥ng r∆°i t·ª´ qu√°i n·ªØa

function getGenericDrop(monster) {
  // H·ªá th·ªëng drop c≈© l√†m fallback
  const suitableEquipment = EQUIPMENT_LIST.filter(eq => {
    const levelDiff = Math.abs((eq.minLevel || 0) - (monster.minLevel || 0));
    return levelDiff <= 4;
  });

  if (suitableEquipment.length === 0) {
    const allEquipment = EQUIPMENT_LIST.filter(eq => eq.type !== undefined);
    if (allEquipment.length === 0) return null;
    return allEquipment[Math.floor(Math.random() * allEquipment.length)];
  }

  const gradeWeights = {
    "ph√†m kh√≠": 100,
    "ph√°p kh√≠": 70,
    "linh kh√≠": 40,
    "linh b·∫£o": 20,
    "ti√™n kh√≠": 5
  };

  if (monster.beastLevel === "Linh Th√∫") {
    gradeWeights["ph√°p kh√≠"] = 100;
    gradeWeights["linh kh√≠"] = 60;
  } else if (monster.beastLevel === "Th√°nh Th√∫") {
    gradeWeights["linh kh√≠"] = 100;
    gradeWeights["linh b·∫£o"] = 40;
  } else if (monster.beastLevel === "Y√™u V∆∞∆°ng") {
    gradeWeights["linh b·∫£o"] = 100;
    gradeWeights["ti√™n kh√≠"] = 30;
  } else if (monster.beastLevel === "Y√™u ƒê·∫ø" || monster.beastLevel === "Th·∫ßn Th√∫") {
    gradeWeights["ti√™n kh√≠"] = 100;
    gradeWeights["linh b·∫£o"] = 80;
  }

  const weightedItems = [];
  suitableEquipment.forEach(item => {
    const weight = gradeWeights[item.grade] || 10;
    for (let i = 0; i < weight; i++) {
      weightedItems.push(item);
    }
  });

  if (weightedItems.length === 0) {
    return suitableEquipment[Math.floor(Math.random() * suitableEquipment.length)];
  }

  return weightedItems[Math.floor(Math.random() * weightedItems.length)];
}

// Qu·∫£n l√Ω ng∆∞·ªùi ch∆°i
function ensureDataDirectory() {
  if (!fs.existsSync(DATA_DIR)) {
    fs.mkdirSync(DATA_DIR, { recursive: true });
  }
  if (!fs.existsSync(PLAYERS_DIR)) {
    fs.mkdirSync(PLAYERS_DIR, { recursive: true });
  }
}

function getPlayerPath(userID) {
  return path.join(PLAYERS_DIR, `${userID}.json`);
}

function ensurePlayerFile(userID) {
  ensureDataDirectory();
  const playerPath = getPlayerPath(userID);
  if (!fs.existsSync(playerPath)) {
    // Ng∆∞·ªùi ch∆°i m·ªõi - c·∫ßn t·∫°o nh√¢n v·∫≠t
    return false;
  }
  return true;
}

// H·ªá th·ªëng linh cƒÉn
function generateSpiritRoot() {
  const rand = Math.random();
  
  // T·ª∑ l·ªá linh cƒÉn: H·∫° ph·∫©m 60%, Trung ph·∫©m 30%, Th∆∞·ª£ng ph·∫©m 10%
  if (rand < 0.6) {
    return {
      grade: "H·∫° ph·∫©m linh cƒÉn",
      multiplier: 1.0, // Exp b√¨nh th∆∞·ªùng
      description: "Linh cƒÉn t·∫ßm th∆∞·ªùng, tu luy·ªán v·ªõi t·ªëc ƒë·ªô b√¨nh th∆∞·ªùng"
    };
  } else if (rand < 0.9) {
    return {
      grade: "Trung ph·∫©m linh cƒÉn", 
      multiplier: 1.3, // +30% exp
      description: "Linh cƒÉn kh√° t·ªët, tu luy·ªán nhanh h∆°n 30%"
    };
  } else {
    return {
      grade: "Th∆∞·ª£ng ph·∫©m linh cƒÉn",
      multiplier: 1.6, // +60% exp
      description: "Linh cƒÉn xu·∫•t s·∫Øc, tu luy·ªán nhanh h∆°n 60%"
    };
  }
}

function getSpiritRootIcon(grade) {
  const icons = {
    "H·∫° ph·∫©m linh cƒÉn": "üü´",
    "Trung ph·∫©m linh cƒÉn": "üü®", 
    "Th∆∞·ª£ng ph·∫©m linh cƒÉn": "üü©"
  };
  return icons[grade] || "‚ö™";
}

function createNewPlayer(userID, characterData) {
  ensureDataDirectory();
  const playerPath = getPlayerPath(userID);
  
  // Ki·ªÉm tra linh cƒÉn
  const spiritRoot = generateSpiritRoot();
  
  const defaultData = {
    userID: userID,
    name: characterData.name || 'TuCh√¢nGi·∫£',
    level: 0,
    exp: 0,
    hp: 100,
    maxHp: 100,
    spiritPower: 100,
    maxSpiritPower: 100,
    inventory: [],
    spiritStones: 5000, // T·∫∑ng t√¢n th·ªß 5000 linh th·∫°ch
    monsterLog: {},
    weaponType: characterData.weaponType, // Lo·∫°i v≈© kh√≠ chuy√™n bi·ªát
    spiritRoot: spiritRoot, // Th√™m th√¥ng tin linh cƒÉn
    characterCreated: true,
    settings: {
      autoSell: false,
      showDetailedStats: true,
      language: 'vi'
    },
    createdAt: new Date().toISOString(),
    lastActive: new Date().toISOString()
  };
  
  saveData(playerPath, defaultData);
  return defaultData;
}

function createNewPlayerWithSpiritRoot(userID, characterData, spiritRoot) {
  ensureDataDirectory();
  const playerPath = getPlayerPath(userID);
  
  // T·∫°o v≈© kh√≠ ban ƒë·∫ßu d·ª±a tr√™n lo·∫°i nh√¢n v·∫≠t
  let startingWeapon;
  switch(characterData.weaponType) {
    case "ki·∫øm":
      startingWeapon = {
        name: "Ph√†m Kh√≠ Ki·∫øm",
        type: "v≈© kh√≠",
        grade: "ph√†m kh√≠",
        rarity: "th∆∞·ªùng",
        description: "Ki·∫øm ph√†m th∆∞·ªùng cho t√¢n th·ªß ki·∫øm tu",
        attack: 15,
        sellPrice: 50,
        buyPrice: 120,
        minLevel: 0,
        level: 0,
        obtainedAt: new Date().toISOString()
      };
      break;
    case "ƒëao":
      startingWeapon = {
        name: "Ph√†m Kh√≠ ƒêao",
        type: "v≈© kh√≠",
        grade: "ph√†m kh√≠",
        rarity: "th∆∞·ªùng",
        description: "ƒêao ph√†m th∆∞·ªùng cho t√¢n th·ªß ƒëao tu",
        attack: 18,
        sellPrice: 55,
        buyPrice: 130,
        minLevel: 0,
        level: 0,
        obtainedAt: new Date().toISOString()
      };
      break;
    case "th·ªÉ":
      startingWeapon = {
        name: "Th·ªÉ Tu Quy·ªÅn Th·ªß",
        type: "v≈© kh√≠",
        grade: "ph√†m kh√≠",
        rarity: "th∆∞·ªùng",
        description: "Quy·ªÅn th·ªß c∆° b·∫£n cho th·ªÉ tu",
        attack: 12,
        sellPrice: 40,
        buyPrice: 100,
        minLevel: 0,
        level: 0,
        obtainedAt: new Date().toISOString()
      };
      break;
    default:
      startingWeapon = {
        name: "Ph√†m Kh√≠ Ki·∫øm",
        type: "v≈© kh√≠",
        grade: "ph√†m kh√≠",
        rarity: "th∆∞·ªùng",
        description: "Ki·∫øm ph√†m th∆∞·ªùng cho t√¢n th·ªß",
        attack: 15,
        sellPrice: 50,
        buyPrice: 120,
        minLevel: 0,
        level: 0,
        obtainedAt: new Date().toISOString()
      };
  }
  
  const defaultData = {
    userID: userID,
    name: characterData.name || 'TuCh√¢nGi·∫£',
    level: 0,
    exp: 0,
    hp: 100,
    maxHp: 100,
    spiritPower: 100,
    maxSpiritPower: 100,
    inventory: [startingWeapon], // T·∫∑ng v≈© kh√≠ ban ƒë·∫ßu
    spiritStones: 5000, // T·∫∑ng t√¢n th·ªß 5000 linh th·∫°ch
    monsterLog: {},
    weaponType: characterData.weaponType, // Lo·∫°i v≈© kh√≠ chuy√™n bi·ªát
    spiritRoot: spiritRoot, // Linh cƒÉn ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
    characterCreated: true,
    settings: {
      autoSell: false,
      showDetailedStats: true,
      language: 'vi'
    },
    createdAt: new Date().toISOString(),
    lastActive: new Date().toISOString()
  };
  
  saveData(playerPath, defaultData);
  return defaultData;
}

function getWeaponTypes() {
  return [
    { id: 1, name: "Ki·∫øm Tu", weaponType: "ki·∫øm", description: "Tu luy·ªán ki·∫øm ƒë·∫°o, t·∫•n c√¥ng nhanh v√† ch√≠nh x√°c" },
    { id: 2, name: "ƒêao Tu", weaponType: "ƒëao", description: "Tu luy·ªán ƒëao ph√°p, s√°t th∆∞∆°ng m·∫°nh v√† uy l·ª±c" },
    { id: 3, name: "Th·ªÉ Tu", weaponType: "th·ªÉ", description: "Tu luy·ªán th·ªÉ ch·∫•t, c√≥ th·ªÉ s·ª≠ d·ª•ng m·ªçi lo·∫°i v≈© kh√≠" }
  ];
}

function checkCharacterNameExists(characterName) {
  ensureDataDirectory();
  if (!fs.existsSync(PLAYERS_DIR)) {
    return false;
  }
  
  const playerFiles = fs.readdirSync(PLAYERS_DIR);
  for (const file of playerFiles) {
    if (file.endsWith('.json')) {
      try {
        const playerData = loadData(path.join(PLAYERS_DIR, file));
        if (playerData && playerData.name && playerData.name.toLowerCase() === characterName.toLowerCase()) {
          return true;
        }
      } catch (error) {
        console.error(`Error reading player file ${file}:`, error);
      }
    }
  }
  return false;
}

function canUseWeapon(player, weapon) {
  // Ki·ªÉm tra lo·∫°i v≈© kh√≠ c√≥ ph√π h·ª£p v·ªõi nh√¢n v·∫≠t kh√¥ng
  if (!player.weaponType) return true; // Backward compatibility
  
  // Th·ªÉ Tu c√≥ th·ªÉ s·ª≠ d·ª•ng m·ªçi lo·∫°i v≈© kh√≠
  if (player.weaponType === "th·ªÉ") return true;
  
  // L·∫•y lo·∫°i v≈© kh√≠ t·ª´ t√™n v≈© kh√≠
  const weaponName = weapon.name.toLowerCase();
  
  // Ki·ªÉm tra t·ª´ng lo·∫°i v≈© kh√≠
  switch(player.weaponType) {
    case "ki·∫øm":
      return weaponName.includes("ki·∫øm") || weaponName.includes("g∆∞∆°m") || weaponName.includes("b·∫£o ki·∫øm") || weaponName.includes("th·∫ßn ki·∫øm");
    
    case "ƒëao":
      return weaponName.includes("ƒëao") || weaponName.includes("b·∫£o ƒëao") || weaponName.includes("th·∫ßn ƒëao") || weaponName.includes("ma ƒëao");
    
    default:
      return false;
  }
}

function hasUsableWeapon(player) {
  const playerWeapons = player.inventory.filter(item => item.type === "v≈© kh√≠");
  return playerWeapons.some(weapon => canUseWeapon(player, weapon));
}

function loadPlayer(userID) {
  const playerExists = ensurePlayerFile(userID);
  if (!playerExists) {
    return null; // Ng∆∞·ªùi ch∆°i m·ªõi c·∫ßn t·∫°o nh√¢n v·∫≠t
  }
  
  const playerPath = getPlayerPath(userID);
  const player = loadData(playerPath);
  if (player) {
    player.lastActive = new Date().toISOString();
    initializeCombatStats(player);
    recoverSpiritPower(player);
  }
  return player;
}

function savePlayer(userID, data) {
  const playerPath = getPlayerPath(userID);
  data.lastActive = new Date().toISOString();
  return saveData(playerPath, data);
}

function gainExp(player, amount) {
  const expNeeded = getExpToLevel(player.level);
  const currentStage = getCurrentStage(player.level);
  const phaseIndex = player.level % 3;
  
  // Kh√¥ng nh·∫≠n exp n·∫øu ƒë√£ ·ªü ƒê·ªânh Phong v√† full exp t·ª´ Tr√∫c C∆° tr·ªü l√™n
  if (player.exp >= expNeeded && phaseIndex === 2 && isReadyForTribulation(player)) {
    return 0; // Tr·∫£ v·ªÅ 0 ƒë·ªÉ b√°o hi·ªáu kh√¥ng nh·∫≠n ƒë∆∞·ª£c exp
  }
  
  // √Åp d·ª•ng h·ªá s·ªë linh cƒÉn
  const spiritRootMultiplier = player.spiritRoot?.multiplier || 1.0;
  const boostedAmount = Math.floor(amount * spiritRootMultiplier);
  
  const oldExp = player.exp;
  player.exp += boostedAmount;
  
  // Ki·ªÉm tra level up t·ª± ƒë·ªông
  let levelsGained = 0;
  while (player.exp >= getExpToLevel(player.level)) {
    const currentExpNeeded = getExpToLevel(player.level);
    const currentPhase = player.level % 3;
    
    // N·∫øu ƒë√£ ·ªü ƒê·ªânh Phong, ƒë·∫°t full exp v√† c√≥ th·ªÉ ƒë·ªô ki·∫øp th√¨ d·ª´ng l·∫°i
    if (player.exp >= currentExpNeeded && currentPhase === 2 && isReadyForTribulation(player)) {
      player.exp = currentExpNeeded;
      break;
    }
    
    // Level up b√¨nh th∆∞·ªùng
    player.exp -= currentExpNeeded;
    player.level++;
    levelsGained++;
    
    // C·∫≠p nh·∫≠t stats khi level up
    initializeCombatStats(player);
    
    // Gi·ªõi h·∫°n ƒë·ªÉ tr√°nh v√≤ng l·∫∑p v√¥ h·∫°n
    if (levelsGained >= 10) break;
  }
  
  return player.exp + (levelsGained * 1000) - oldExp; // Tr·∫£ v·ªÅ exp th·ª±c t·∫ø + bonus t·ª´ level up
}

function addEquipment(player, eq, quantity = 1) {
  // T√≠nh gi√° cho v·∫≠t li·ªáu d·ª±a tr√™n value
  let sellPrice = eq.sellPrice || 1;
  let buyPrice = eq.buyPrice || (eq.sellPrice * 3) || 3;
  
  // N·∫øu l√† v·∫≠t li·ªáu c√≥ value, t√≠nh gi√° theo c√¥ng th·ª©c chu·∫©n
  if (eq.type === "v·∫≠t li·ªáu" && eq.value) {
    sellPrice = eq.value * 3; // Gi√° b√°n = value * 3
    buyPrice = eq.value * 8;  // Gi√° mua = value * 8
  }
  
  // ƒê·∫£m b·∫£o v·∫≠t ph·∫©m c√≥ ƒë·∫ßy ƒë·ªß thu·ªôc t√≠nh c·∫ßn thi·∫øt
  const item = {
    name: eq.name || "V·∫≠t ph·∫©m kh√¥ng t√™n",
    type: eq.type || "v·∫≠t li·ªáu",
    grade: eq.grade || "ph√†m kh√≠",
    rarity: eq.rarity || "th∆∞·ªùng",
    description: eq.description || "Kh√¥ng c√≥ m√¥ t·∫£",
    sellPrice: sellPrice,
    buyPrice: buyPrice,
    obtainedAt: new Date().toISOString(),
    ...eq // Gi·ªØ l·∫°i c√°c thu·ªôc t√≠nh g·ªëc
  };

  // T·ª± ƒë·ªông b√°n n·∫øu kh√¥ng ph·∫£i ƒëan d∆∞·ª£c v√† c√≥ c√†i ƒë·∫∑t auto sell
  if (item.type !== "ƒëan d∆∞·ª£c" && player.settings?.autoSell) {
    player.spiritStones += item.sellPrice * quantity;
    return; // Kh√¥ng th√™m v√†o inventory
  }

  // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho v·∫≠t li·ªáu - g·ªôp quantity n·∫øu c√πng t√™n
  if (item.type === "v·∫≠t li·ªáu") {
    const existingItem = player.inventory.find(invItem => 
      invItem.name === item.name && 
      invItem.type === "v·∫≠t li·ªáu" && 
      invItem.grade === item.grade
    );
    
    if (existingItem) {
      // N·∫øu ƒë√£ c√≥ v·∫≠t li·ªáu c√πng lo·∫°i, c·ªông quantity
      existingItem.quantity = (existingItem.quantity || 1) + quantity;
    } else {
      // N·∫øu ch∆∞a c√≥, th√™m m·ªõi v·ªõi quantity
      item.quantity = quantity;
      player.inventory.push(item);
    }
  } else {
    // V·ªõi c√°c lo·∫°i kh√°c (ƒëan d∆∞·ª£c, v≈© kh√≠), th√™m t·ª´ng c√°i ri√™ng bi·ªát
    for (let i = 0; i < quantity; i++) {
      player.inventory.push({...item});
    }
  }
}

function isPlayerInjured(player) {
  return player.injuredUntil && new Date(player.injuredUntil) > new Date();
}

function injurePlayer(player) {
  const injuredTime = new Date();
  injuredTime.setMinutes(injuredTime.getMinutes() + 10); // 10 ph√∫t
  player.injuredUntil = injuredTime.toISOString();
}

function healPlayer(player) {
  delete player.injuredUntil;
}

function getInjuryTimeLeft(player) {
  if (!isPlayerInjured(player)) return 0;
  return Math.ceil((new Date(player.injuredUntil) - new Date()) / 60000);
}

function hasExpBoost(player) {
  return player.expBoostUntil && new Date(player.expBoostUntil) > new Date();
}

function hasInjuryImmunity(player) {
  return player.immunityUntil && new Date(player.immunityUntil) > new Date();
}

function applyPotionEffects(player, potion) {
  const now = new Date();

  // H·ªìi ph·ª•c m√°u theo healAmount
  if (potion.healAmount) {
    if (potion.healAmount === 9999) {
      player.hp = player.maxHp; // H·ªìi ph·ª•c ho√†n to√†n
    } else {
      player.hp = Math.min(player.maxHp, player.hp + potion.healAmount);
    }
  }

  // H·ªìi ph·ª•c linh l·ª±c theo spiritPowerAmount
  if (potion.spiritPowerAmount) {
    if (potion.spiritPowerAmount === 9999) {
      player.spiritPower = player.maxSpiritPower; // H·ªìi ph·ª•c ho√†n to√†n
    } else {
      player.spiritPower = Math.min(player.maxSpiritPower, player.spiritPower + potion.spiritPowerAmount);
    }
  }

  // X·ª≠ l√Ω ƒëan d∆∞·ª£c ch·ªØa th∆∞∆°ng
  if (potion.subType === "ch·ªØa th∆∞∆°ng") {
    if (potion.healTime === 0) {
      healPlayer(player);
    } else {
      // Gi·∫£m th·ªùi gian b·ªã th∆∞∆°ng
      if (isPlayerInjured(player)) {
        const newInjuryTime = new Date(player.injuredUntil);
        newInjuryTime.setMilliseconds(newInjuryTime.getMilliseconds() - potion.healTime);
        if (newInjuryTime <= now) {
          healPlayer(player);
        } else {
          player.injuredUntil = newInjuryTime.toISOString();
        }
      }
    }
  }

  // X·ª≠ l√Ω ƒëan d∆∞·ª£c ch·ªØa ƒë·∫°o c∆°
  if (potion.subType === "ch·ªØa ƒë·∫°o c∆°" || potion.healDaoCore) {
    if (isDaoCoreInjured(player)) {
      healDaoCore(player);
    }
  }

  // √Åp d·ª•ng hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát theo grade
  if (potion.grade === "linh kh√≠") {
    // TƒÉng 20% exp trong 30 ph√∫t
    const expBoostTime = new Date(now);
    expBoostTime.setMinutes(expBoostTime.getMinutes() + 30);
    player.expBoostUntil = expBoostTime.toISOString();
    player.expBoostMultiplier = 1.2;
  } else if (potion.grade === "linh b·∫£o") {
    // Mi·ªÖn nhi·ªÖm b·ªã th∆∞∆°ng 1 gi·ªù + h·ªìi ph·ª•c linh l·ª±c
    const immunityTime = new Date(now);
    immunityTime.setHours(immunityTime.getHours() + 1);
    player.immunityUntil = immunityTime.toISOString();
    player.spiritPower = Math.min(player.maxSpiritPower, player.spiritPower + 50);
  } else if (potion.grade === "ti√™n kh√≠") {
    // TƒÉng 50% exp + mi·ªÖn nhi·ªÖm b·ªã th∆∞∆°ng 2 gi·ªù + h·ªìi ph·ª•c ho√†n to√†n linh l·ª±c + ch·ªØa ƒë·∫°o c∆°
    const expBoostTime = new Date(now);
    expBoostTime.setHours(expBoostTime.getHours() + 2);
    player.expBoostUntil = expBoostTime.toISOString();
    player.expBoostMultiplier = 1.5;

    const immunityTime = new Date(now);
    immunityTime.setHours(immunityTime.getHours() + 2);
    player.immunityUntil = immunityTime.toISOString();
    
    player.spiritPower = player.maxSpiritPower; // H·ªìi ph·ª•c ho√†n to√†n linh l·ª±c
    healDaoCore(player); // Ch·ªØa ƒë·∫°o c∆°
  }
}

function gainExpWithBoost(player, amount) {
  // Kh√¥ng nh·∫≠n exp n·∫øu ƒë√£ ·ªü ƒê·ªânh Phong v√† full exp t·ª´ Tr√∫c C∆° tr·ªü l√™n
  const expNeeded = getExpToLevel(player.level);
  const phaseIndex = player.level % 3;
  if (player.exp >= expNeeded && phaseIndex === 2 && isReadyForTribulation(player)) {
    return { gained: 0, spiritRootBonus: false }; // Kh√¥ng nh·∫≠n exp n·∫øu ƒë√£ ƒê·ªânh Phong full exp v√† c√≥ th·ªÉ ƒë·ªô ki·∫øp
  }
  
  const oldLevel = player.level;
  let finalExp = amount;
  if (hasExpBoost(player)) {
    finalExp = Math.floor(amount * (player.expBoostMultiplier || 1));
  }
  
  const actualExpGained = gainExp(player, finalExp);
  const spiritRootBonus = player.spiritRoot?.multiplier > 1.0;
  
  // Th√¥ng b√°o level up n·∫øu c√≥
  if (player.level > oldLevel) {
    const levelsGained = player.level - oldLevel;
    console.log(`Player ${player.name} leveled up ${levelsGained} times! New level: ${getLevelName(player.level)}`);
  }
  
  return { gained: actualExpGained, spiritRootBonus: spiritRootBonus };
}

function formatTime(date) {
  return new Intl.DateTimeFormat('vi-VN', {
    timeZone: 'Asia/Ho_Chi_Minh',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  }).format(date);
}

function getRandomMonster(playerLevel) {
  // X√°c ƒë·ªãnh c·∫£nh gi·ªõi hi·ªán t·∫°i c·ªßa ng∆∞·ªùi ch∆°i
  const playerStageIndex = Math.floor(playerLevel / 3);
  const playerStageName = STAGES[playerStageIndex] || STAGES[STAGES.length - 1];
  
  // X√°c ƒë·ªãnh c·∫•p b·∫≠c y√™u th√∫ t·ªëi ƒëa c√≥ th·ªÉ g·∫∑p theo mapping ch√≠nh x√°c
  const stageToBeastMapping = {
    "Ph√†m Nh√¢n": "Ph√†m Th√∫",
    "Luy·ªán Kh√≠": "Ph√†m Th√∫", // Luy·ªán Kh√≠ ch·ªâ g·∫∑p Ph√†m Th√∫
    "Tr√∫c C∆°": "Y√™u Th√∫",
    "Kim ƒêan": "Linh Th√∫", 
    "Nguy√™n Anh": "Th√°nh Th√∫",
    "H√≥a Th·∫ßn": "Y√™u V∆∞∆°ng",
    "Anh Bi·∫øn": "Y√™u ƒê·∫ø",
    "V·∫•n ƒê·ªânh": "Th·∫ßn Th√∫"
  };
  
  const maxBeastLevel = stageToBeastMapping[playerStageName] || "Ph√†m Th√∫";

  // L·ªçc qu√°i theo c·∫£nh gi·ªõi t·ªëi ƒëa c√≥ th·ªÉ g·∫∑p
  const beastLevelOrder = ["Ph√†m Th√∫", "Y√™u Th√∫", "Linh Th√∫", "Th√°nh Th√∫", "Y√™u V∆∞∆°ng", "Y√™u ƒê·∫ø", "Th·∫ßn Th√∫"];
  const maxBeastIndex = beastLevelOrder.indexOf(maxBeastLevel);
  
  let availableMonsters = MONSTERS.filter(monster => {
    const monsterBeastIndex = beastLevelOrder.indexOf(monster.beastLevel);
    return monsterBeastIndex <= maxBeastIndex;
  });

  // N·∫øu kh√¥ng c√≥ qu√°i ph√π h·ª£p, l·∫•y qu√°i c·∫•p th·∫•p nh·∫•t
  if (availableMonsters.length === 0) {
    availableMonsters = MONSTERS.filter(monster => monster.beastLevel === "Ph√†m Th√∫");
  }

  // Ph√¢n lo·∫°i qu√°i theo c·∫•p ƒë·ªô
  const sameLevel = availableMonsters.filter(monster => monster.beastLevel === maxBeastLevel);
  const lowerLevel = availableMonsters.filter(monster => {
    const monsterBeastIndex = beastLevelOrder.indexOf(monster.beastLevel);
    return monsterBeastIndex < maxBeastIndex;
  });
  
  // T√¨m y√™u th√∫ c·∫•p cao h∆°n 1 b·∫≠c (n·∫øu c√≥)
  const higherLevelIndex = maxBeastIndex + 1;
  const higherLevel = higherLevelIndex < beastLevelOrder.length ? 
    MONSTERS.filter(monster => monster.beastLevel === beastLevelOrder[higherLevelIndex]) : [];

  const rand = Math.random();
  
  // 10% g·∫∑p y√™u th√∫ c·∫•p cao h∆°n (n·∫øu c√≥ v√† kh√¥ng ph·∫£i c·∫•p t·ªëi ƒëa)
  if (higherLevel.length > 0 && rand < 0.1) {
    const randomIndex = Math.floor(Math.random() * higherLevel.length);
    return higherLevel[randomIndex];
  }
  // 70% g·∫∑p qu√°i c√πng c·∫•p
  else if (sameLevel.length > 0 && rand < 0.8) {
    const randomIndex = Math.floor(Math.random() * sameLevel.length);
    return sameLevel[randomIndex];
  }
  // 20% g·∫∑p qu√°i th·∫•p h∆°n
  else if (lowerLevel.length > 0) {
    const randomIndex = Math.floor(Math.random() * lowerLevel.length);
    return lowerLevel[randomIndex];
  }
  // Fallback v·ªÅ qu√°i c√πng c·∫•p n·∫øu kh√¥ng c√≥ qu√°i th·∫•p h∆°n
  else if (sameLevel.length > 0) {
    const randomIndex = Math.floor(Math.random() * sameLevel.length);
    return sameLevel[randomIndex];
  }
  // Fallback cu·ªëi c√πng v·ªÅ to√†n b·ªô qu√°i c√≥ th·ªÉ g·∫∑p
  else {
    const randomIndex = Math.floor(Math.random() * availableMonsters.length);
    return availableMonsters[randomIndex];
  }
}

function calculateBattleResult(player, monster) {
  // X√°c ƒë·ªãnh c·∫£nh gi·ªõi c·ªßa ng∆∞·ªùi ch∆°i v√† qu√°i
  const playerStageIndex = Math.floor(player.level / 3);
  const playerStageName = STAGES[playerStageIndex] || STAGES[STAGES.length - 1];
  
  const beastLevelOrder = ["Ph√†m Th√∫", "Y√™u Th√∫", "Linh Th√∫", "Th√°nh Th√∫", "Y√™u V∆∞∆°ng", "Y√™u ƒê·∫ø", "Th·∫ßn Th√∫"];
  const stageTobeast = {
    "Ph√†m Nh√¢n": "Ph√†m Th√∫",
    "Luy·ªán Kh√≠": "Ph√†m Th√∫", 
    "Tr√∫c C∆°": "Y√™u Th√∫",
    "Kim ƒêan": "Linh Th√∫",
    "Nguy√™n Anh": "Th√°nh Th√∫",
    "H√≥a Th·∫ßn": "Y√™u V∆∞∆°ng",
    "Anh Bi·∫øn": "Y√™u ƒê·∫ø",
    "V·∫•n ƒê·ªânh": "Th·∫ßn Th√∫"
  };
  
  const playerBeastLevel = stageTobeast[playerStageName] || "Ph√†m Th√∫";
  const playerBeastIndex = beastLevelOrder.indexOf(playerBeastLevel);
  const monsterBeastIndex = beastLevelOrder.indexOf(monster.beastLevel);
  
  const beastLevelDiff = monsterBeastIndex - playerBeastIndex;

  // T√≠nh bonus t·ª´ ch·∫•t l∆∞·ª£ng v≈© kh√≠
  let weaponBonus = 0;
  const weaponList = player.inventory.filter(item => item.type === "v≈© kh√≠" && canUseWeapon(player, item));
  if (weaponList.length > 0) {
    const bestWeapon = weaponList.reduce((best, weapon) => 
      (weapon.attack || 0) > (best.attack || 0) ? weapon : best
    );
    
    // Bonus theo c·∫•p ƒë·ªô v≈© kh√≠
    const weaponGradeBonus = {
      "ph√†m kh√≠": 0,
      "ph√°p kh√≠": 0.1,      // +10% t·ª∑ l·ªá th·∫Øng
      "linh kh√≠": 0.2,      // +20% t·ª∑ l·ªá th·∫Øng
      "linh b·∫£o": 0.3,      // +30% t·ª∑ l·ªá th·∫Øng
      "ti√™n kh√≠": 0.4       // +40% t·ª∑ l·ªá th·∫Øng
    };
    weaponBonus = weaponGradeBonus[bestWeapon.grade] || 0;
  }

  // X·ª≠ l√Ω khi g·∫∑p qu√°i th·∫•p h∆°n 1+ c·∫•p - chi·∫øn th·∫Øng √°p ƒë·∫£o
  if (beastLevelDiff <= -1) {
    const turns = Math.floor(Math.random() * 3) + 1; // 1-3 l∆∞·ª£t
    return { 
      result: "easy_win", 
      playerHpLeft: player.hp, // Kh√¥ng m·∫•t m√°u
      turns: turns,
      damageDealt: monster.hp,
      isEasy: true
    };
  }

  // X·ª≠ l√Ω khi g·∫∑p qu√°i cao h∆°n c·∫£nh gi·ªõi
  if (beastLevelDiff > 0) {
    // T·ªâ l·ªá ch·∫°y tr·ªën tƒÉng theo ƒë·ªô ch√™nh l·ªách c·∫£nh gi·ªõi
    let escapeChance = 0.4 + (beastLevelDiff * 0.15); // 40% + 15% m·ªói c·∫•p ch√™nh l·ªách
    escapeChance = Math.min(escapeChance, 0.85); // T·ªëi ƒëa 85%
    
    if (Math.random() < escapeChance) {
      return { result: "escape" }; // Ch·∫°y tr·ªën th√†nh c√¥ng
    }
    
    // N·∫øu kh√¥ng ch·∫°y tr·ªën ƒë∆∞·ª£c, t·ªâ l·ªá th·∫Øng r·∫•t th·∫•p + bonus v≈© kh√≠
    let winChance = 0.05 - (beastLevelDiff * 0.01) + weaponBonus; // 5% + bonus v≈© kh√≠
    winChance = Math.max(winChance, 0.01); // T·ªëi thi·ªÉu 1%
    winChance = Math.min(winChance, 0.3); // T·ªëi ƒëa 30% v·ªõi v≈© kh√≠ t·ªët
    
    if (Math.random() < winChance) {
      // Th·∫Øng may m·∫Øn nh∆∞ng b·ªã th∆∞∆°ng n·∫∑ng
      const playerHpLeft = Math.max(1, Math.floor(player.hp * 0.1)); // Ch·ªâ c√≤n 10% m√°u
      return { 
        result: "lucky_win", 
        playerHpLeft: playerHpLeft,
        turns: Math.floor(Math.random() * 15) + 10,
        damageDealt: monster.hp,
        isLucky: true
      };
    }
    
    // Thua v√† b·ªã th∆∞∆°ng n·∫∑ng v·ªõi t·ªâ l·ªá cao
    const severeInjuryChance = 0.7 + (beastLevelDiff * 0.1); // 70% + 10% m·ªói c·∫•p ch√™nh
    const isSevereInjury = Math.random() < severeInjuryChance;
    
    // T√≠nh damage nh·∫≠n theo attack c·ªßa qu√°i
    const monsterAttack = monster.attack || 10;
    const damageReceived = Math.min(player.hp - 1, monsterAttack); // Kh√¥ng th·ªÉ gi·∫øt ch·∫øt ho√†n to√†n
    const playerHpLeft = Math.max(1, player.hp - damageReceived);
    
    return { 
      result: "lose", 
      playerHpLeft: playerHpLeft,
      turns: Math.floor(Math.random() * 10) + 5,
      damageReceived: damageReceived,
      isSevereInjury: isSevereInjury
    };
  }

  // Chi·∫øn ƒë·∫•u b√¨nh th∆∞·ªùng khi c√πng c·∫•p ho·∫∑c th·∫•p h∆°n
  const playerAttack = getPlayerAttack(player);
  const monsterHp = monster.hp;
  const monsterAttack = monster.attack || 10;
  
  // T·ª∑ l·ªá th·∫Øng 50/50 cho y√™u th√∫ c√πng c·∫•p + bonus t·ª´ v≈© kh√≠
  if (beastLevelDiff === 0) {
    let winChance = 0.5 + weaponBonus; // 50% + bonus v≈© kh√≠
    winChance = Math.min(winChance, 0.9); // T·ªëi ƒëa 90%
    const rand = Math.random();
    const turns = Math.floor(Math.random() * 10) + 5; // 5-15 l∆∞·ª£t
    
    if (rand < winChance) {
      // Th·∫Øng
      const playerHpLeft = Math.max(Math.floor(player.hp * 0.3), Math.floor(player.hp * 0.8)); // C√≤n 30-80% m√°u
      return { 
        result: "win", 
        playerHpLeft: playerHpLeft,
        turns: turns,
        damageDealt: monsterHp
      };
    } else {
      // Thua - m·∫•t m√°u theo attack c·ªßa qu√°i
      const damageReceived = Math.min(player.hp - 1, Math.floor(monsterAttack * 0.8)); // 80% attack qu√°i
      const playerHpLeft = Math.max(1, player.hp - damageReceived);
      return { 
        result: "lose", 
        playerHpLeft: playerHpLeft,
        turns: turns,
        damageReceived: damageReceived,
        isSevereInjury: false
      };
    }
  }
  
  // Chi·∫øn ƒë·∫•u v·ªõi y√™u th√∫ th·∫•p h∆°n c·∫•p (t·ª∑ l·ªá th·∫Øng cao h∆°n)
  if (beastLevelDiff < 0) {
    let winChance = 0.8 + weaponBonus; // 80% + bonus v≈© kh√≠
    winChance = Math.min(winChance, 0.95); // T·ªëi ƒëa 95%
    const rand = Math.random();
    const turns = Math.floor(Math.random() * 8) + 3; // 3-10 l∆∞·ª£t
    
    if (rand < winChance) {
      // Th·∫Øng d·ªÖ d√†ng
      const playerHpLeft = Math.max(Math.floor(player.hp * 0.6), Math.floor(player.hp * 0.9)); // C√≤n 60-90% m√°u
      return { 
        result: "win", 
        playerHpLeft: playerHpLeft,
        turns: turns,
        damageDealt: monsterHp
      };
    } else {
      // Thua hi·∫øm khi - m·∫•t m√°u theo attack c·ªßa qu√°i nh∆∞ng √≠t h∆°n
      const damageReceived = Math.min(player.hp - 1, Math.floor(monsterAttack * 0.6)); // 60% attack qu√°i
      const playerHpLeft = Math.max(1, player.hp - damageReceived);
      return { 
        result: "lose", 
        playerHpLeft: playerHpLeft,
        turns: turns,
        damageReceived: damageReceived,
        isSevereInjury: false
      };
    }
  }
}

function logMonsterKill(player, monsterName) {
  player.monsterLog[monsterName] = (player.monsterLog[monsterName] || 0) + 1;
}

// Menu functions
function showMainMenu() {
  let text = `üó°Ô∏è ƒê·∫†O GI·ªöI TU TI√äN:\n`;
  text += `1. ‚öîÔ∏è ƒê√°nh qu√°i\n`;
  text += `2. üè™ ƒêan c√°c\n`;
  text += `3. üì¶ Kho ƒë·ªì\n`;
  text += `4. ‚ö° ƒê·ªô ki·∫øp\n`;
  text += `5. üßò Tu luy·ªán\n`;
  text += `6. üî• Luy·ªán kh√≠\n`;
  text += `7. üë§ Th√¥ng tin nh√¢n v·∫≠t\n`;
  text += `\nüí° Reply s·ªë th·ª© t·ª± ƒë·ªÉ ch·ªçn`;
  text += `\nüìñ H∆∞·ªõng d·∫´n chi ti·∫øt: .tu help`;
  return text;
}

function getGradeIcon(grade) {
  const gradeIcons = {
    "ph√†m kh√≠": "üü´",
    "ph√°p kh√≠": "üü¶", 
    "linh kh√≠": "üü™",
    "linh b·∫£o": "ü®®",
    "ti√™n kh√≠": "üü•"
  };
  return gradeIcons[grade] || "‚ö™";
}

function getGradeName(index) {
  const grades = ["ph√†m kh√≠", "ph√°p kh√≠", "linh kh√≠", "linh b·∫£o", "ti√™n kh√≠"];
  return grades[index - 1] || "ph√†m kh√≠";
}

// Tu luy·ªán b·∫±ng linh th·∫°ch
function cultivateWithSpiritStones(player, amount) {
  if (player.spiritStones < amount) {
    return { success: false, reason: "Kh√¥ng ƒë·ªß linh th·∫°ch" };
  }
  
  // Ki·ªÉm tra tr·∫°ng th√°i
  if (isDaoCoreInjured(player)) {
    return { success: false, reason: "ƒê·∫°o c∆° b·ªã th∆∞∆°ng, kh√¥ng th·ªÉ tu luy·ªán" };
  }
  
  if (isPlayerInjured(player)) {
    return { success: false, reason: "ƒêang b·ªã th∆∞∆°ng, kh√¥ng th·ªÉ tu luy·ªán" };
  }
  
  // Ki·ªÉm tra gi·ªõi h·∫°n exp - ch·ªâ ch·∫∑n khi ·ªü ƒê·ªânh Phong v√† full exp
  const expNeeded = getExpToLevel(player.level);
  const phaseIndex = player.level % 3;
  if (player.exp >= expNeeded && phaseIndex === 2 && isReadyForTribulation(player)) {
    return { success: false, reason: "ƒê√£ ƒë·∫°t ƒê·ªânh Phong Vi√™n M√£n, c·∫ßn ƒë·ªô ki·∫øp ƒë·ªÉ ti·∫øp t·ª•c" };
  }
  
  // T√≠nh to√°n exp t·ª´ linh th·∫°ch
  // 1 linh th·∫°ch = 1 exp c∆° b·∫£n, c√≥ h·ªá s·ªë linh cƒÉn
  const baseExp = amount;
  const spiritRootMultiplier = player.spiritRoot?.multiplier || 1.0;
  const finalExp = Math.floor(baseExp * spiritRootMultiplier);
  
  // Tr·ª´ linh th·∫°ch
  player.spiritStones -= amount;
  
  // Nh·∫≠n exp
  const oldLevel = player.level;
  const actualExpGained = gainExp(player, finalExp);
  const levelUp = player.level > oldLevel;
  
  return {
    success: true,
    baseExp: baseExp,
    finalExp: finalExp,
    actualGained: actualExpGained,
    spiritRootBonus: spiritRootMultiplier > 1.0,
    levelUp: levelUp,
    newLevel: player.level
  };
}

// Luy·ªán kh√≠ - n√¢ng c·∫•p v≈© kh√≠
function upgradeWeapon(player, weaponIndex, spiritStonesAmount) {
  const upgradeableWeapons = player.inventory.filter(item => item.type === "v≈© kh√≠" && canUseWeapon(player, item));
  
  if (weaponIndex < 0 || weaponIndex >= upgradeableWeapons.length) {
    return { success: false, reason: "V≈© kh√≠ kh√¥ng t·ªìn t·∫°i" };
  }
  
  const weapon = upgradeableWeapons[weaponIndex];
  const weaponLevel = weapon.level || 0;
  
  if (weaponLevel >= 10) {
    return { success: false, reason: "V≈© kh√≠ ƒë√£ ƒë·∫°t c·∫•p t·ªëi ƒëa (10)" };
  }
  
  // T√≠nh chi ph√≠ n√¢ng c·∫•p theo c·∫•p ƒë·ªô (tƒÉng theo l≈©y th·ª´a)
  const upgradeCosts = [100, 200, 400, 800, 1600, 3200, 6400, 12800, 25600, 51200];
  const requiredCost = upgradeCosts[weaponLevel];
  
  if (spiritStonesAmount < requiredCost) {
    return { success: false, reason: `C·∫ßn ${requiredCost} linh th·∫°ch ƒë·ªÉ n√¢ng c·∫•p l√™n level ${weaponLevel + 1}` };
  }
  
  if (player.spiritStones < spiritStonesAmount) {
    return { success: false, reason: "Kh√¥ng ƒë·ªß linh th·∫°ch" };
  }
  
  // T√≠nh t·ª∑ l·ªá th√†nh c√¥ng (gi·∫£m theo level)
  const successRates = [80, 75, 70, 65, 60, 50, 40, 30, 20, 10]; // %
  const successRate = successRates[weaponLevel] / 100;
  
  const success = Math.random() < successRate;
  player.spiritStones -= spiritStonesAmount;
  
  if (success) {
    // Th√†nh c√¥ng - n√¢ng c·∫•p v≈© kh√≠
    const oldAttack = weapon.attack;
    weapon.level = weaponLevel + 1;
    weapon.attack = Math.floor(oldAttack * 1.15); // TƒÉng 15% s√°t th∆∞∆°ng m·ªói level
    
    // Thay ƒë·ªïi t√™n v≈© kh√≠ theo level
    const levelNames = ["", "+1", "+2", "+3", "+4", "+5", "+6", "+7", "+8", "+9", "+10"];
    const baseName = weapon.name.replace(/\s\+\d+$/, ""); // X√≥a level c≈© n·∫øu c√≥
    weapon.name = `${baseName} ${levelNames[weapon.level]}`;
    
    return {
      success: true,
      newLevel: weapon.level,
      oldAttack: oldAttack,
      newAttack: weapon.attack,
      weaponName: weapon.name
    };
  } else {
    // Th·∫•t b·∫°i - kh√¥ng m·∫•t v≈© kh√≠ nh∆∞ng m·∫•t linh th·∫°ch
    return {
      success: false,
      reason: "Luy·ªán kh√≠ th·∫•t b·∫°i",
      failed: true,
      lostSpiritStones: spiritStonesAmount
    };
  }
}

function getSpiritStoneCultivationCost(level) {
  // Chi ph√≠ tu luy·ªán tƒÉng theo c·∫£nh gi·ªõi (gi·∫£m 50% ƒë·ªÉ c√¢n b·∫±ng v·ªõi gi√° v·∫≠t li·ªáu m·ªõi)
  const stageIndex = Math.floor(level / 4);
  const baseCost = [50, 150, 400, 1000, 2500, 6000, 15000][stageIndex] || 25000;
  return baseCost;
}

// H·ªá th·ªëng luy·ªán ƒëan
function getAlchemyRecipes() {
  // Load materials ƒë·ªÉ ƒë·∫£m b·∫£o s·ª≠ d·ª•ng ch√≠nh x√°c t√™n v·∫≠t li·ªáu
  const materials = loadData(path.join(DATA_DIR, 'materials.json')) || [];
  
  // L·∫•y th√¥ng tin ƒëan d∆∞·ª£c t·ª´ equipment.json
  const potionsFromEquipment = EQUIPMENT_LIST.filter(item => item.type === "ƒëan d∆∞·ª£c");
  
  // Helper function ƒë·ªÉ t√¨m v·∫≠t li·ªáu theo t√™n ch√≠nh x√°c
  function findMaterial(name) {
    return materials.find(m => m.name === name);
  }
  
  // T·∫°o c√¥ng th·ª©c luy·ªán ƒëan d·ª±a tr√™n d·ªØ li·ªáu c√≥ s·∫µn
  const recipes = [];
  let recipeId = 1;
  
  potionsFromEquipment.forEach(potion => {
    // X√°c ƒë·ªãnh v·∫≠t li·ªáu c·∫ßn thi·∫øt d·ª±a tr√™n t√™n v√† c·∫•p ƒë·ªô ƒëan d∆∞·ª£c
    let materials = [];
    let spiritStones = Math.floor((potion.buyPrice || 50) * 0.5); // Chi ph√≠ = 50% gi√° mua
    let successRate = 100; // Lu√¥n th√†nh c√¥ng
    let minLevel = potion.minLevel || 0;
    
    // X√°c ƒë·ªãnh v·∫≠t li·ªáu v√† chi ph√≠ d·ª±a tr√™n t√™n ƒëan d∆∞·ª£c, s·ª≠ d·ª•ng t√™n ch√≠nh x√°c t·ª´ materials.json
    switch (potion.name) {
      case "H·ªìi Nguy√™n ƒêan":
        materials = [
          { name: "M√°u Lang", type: "v·∫≠t li·ªáu", quantity: 1 },
          { name: "L√¥ng S√≥i", type: "v·∫≠t li·ªáu", quantity: 1 }
        ];
        spiritStones = 5;
        break;
        
      case "Ph·ª•c Th∆∞∆°ng ƒêan":
        materials = [
          { name: "M√°u Ma H·∫ßu", type: "v·∫≠t li·ªáu", quantity: 2 },
          { name: "L√¥ng Kim S√≠", type: "v·∫≠t li·ªáu", quantity: 1 }
        ];
        spiritStones = 10;
        break;
        
      case "B·ªìi Nguy√™n ƒêan":
        materials = [
          { name: "V·∫£y Thi·∫øt Gi√°p", type: "v·∫≠t li·ªáu", quantity: 2 },
          { name: "Tinh T√∫y H·ªón ƒê·ªôn", type: "v·∫≠t li·ªáu", quantity: 1 }
        ];
        spiritStones = 15;
        break;
        
      case "Thi√™n T√¢m ƒêan":
        materials = [
          { name: "Long C·ªët", type: "v·∫≠t li·ªáu", quantity: 1 },
          { name: "L√¥ng Ph∆∞·ª£ng Ho√†ng", type: "v·∫≠t li·ªáu", quantity: 1 }
        ];
        spiritStones = 50;
        break;
        
      case "Ng≈© H√†nh Thi√™n ƒêan":
        materials = [
          { name: "Tinh H·ªìn C·ª≠u Vƒ©", type: "v·∫≠t li·ªáu", quantity: 2 },
          { name: "Ma Kh√≠ Tinh T√∫y", type: "v·∫≠t li·ªáu", quantity: 2 },
          { name: "ƒê·ªãa Ng·ª•c H·ªèa Ch·ªßng", type: "v·∫≠t li·ªáu", quantity: 1 }
        ];
        spiritStones = 100;
        break;
        
      case "C·ª≠u Chuy·ªÉn Ho√†n H·ªìn ƒêan":
        materials = [
          { name: "Th√°i C·ªï Th·∫ßn T·ªßy", type: "v·∫≠t li·ªáu", quantity: 1 },
          { name: "H·ªón ƒê·ªôn Th·∫ßn Tinh", type: "v·∫≠t li·ªáu", quantity: 1 },
          { name: "V√¥ Th∆∞·ª£ng Th·∫ßn Hoa", type: "v·∫≠t li·ªáu", quantity: 1 }
        ];
        spiritStones = 200;
        break;
        
      case "Tr∆∞·ªùng Sinh B·∫•t L√£o ƒêan":
        materials = [
          { name: "T·ªëi Cao Th·∫ßn Nguy√™n", type: "v·∫≠t li·ªáu", quantity: 1 },
          { name: "V√¥ Th∆∞·ª£ng Th·∫ßn Hoa", type: "v·∫≠t li·ªáu", quantity: 2 },
          { name: "Th√°i C·ªï Th·∫ßn T·ªßy", type: "v·∫≠t li·ªáu", quantity: 1 }
        ];
        spiritStones = 300;
        break;
        
      case "Linh Kh√≠ ƒêan":
        materials = [
          { name: "Tinh T√∫y H·ªón ƒê·ªôn", type: "v·∫≠t li·ªáu", quantity: 1 },
          { name: "V·∫£y Thi·∫øt Gi√°p", type: "v·∫≠t li·ªáu", quantity: 1 }
        ];
        spiritStones = 3;
        break;
        
      case "Huy·ªÅn Linh ƒêan":
        materials = [
          { name: "Ma Kh√≠ Tinh T√∫y", type: "v·∫≠t li·ªáu", quantity: 1 },
          { name: "L√¥ng Kim S√≠", type: "v·∫≠t li·ªáu", quantity: 2 }
        ];
        spiritStones = 20;
        break;
        
      default:
        // C√¥ng th·ª©c m·∫∑c ƒë·ªãnh cho ƒëan d∆∞·ª£c kh√¥ng x√°c ƒë·ªãnh
        materials = [
          { name: "M√°u Lang", type: "v·∫≠t li·ªáu", quantity: 1 },
          { name: "L√¥ng S√≥i", type: "v·∫≠t li·ªáu", quantity: 1 }
        ];
        spiritStones = Math.max(20, Math.floor(spiritStones));
    }
    
    // Ki·ªÉm tra t·∫•t c·∫£ v·∫≠t li·ªáu c√≥ t·ªìn t·∫°i trong materials.json
    const validMaterials = materials.filter(mat => {
      const foundMaterial = findMaterial(mat.name);
      if (!foundMaterial) {
        console.warn(`C·∫£nh b√°o: V·∫≠t li·ªáu "${mat.name}" kh√¥ng t·ªìn t·∫°i trong materials.json`);
        return false;
      }
      return true;
    });
    
    // Ch·ªâ t·∫°o c√¥ng th·ª©c n·∫øu t·∫•t c·∫£ v·∫≠t li·ªáu h·ª£p l·ªá
    if (validMaterials.length === materials.length) {
      // T·∫°o c√¥ng th·ª©c luy·ªán ƒëan
      const recipe = {
        id: recipeId++,
        name: potion.name,
        type: potion.type,
        subType: potion.subType,
        grade: potion.grade,
        rarity: potion.rarity,
        description: potion.description,
        materials: validMaterials,
        spiritStones: spiritStones,
        successRate: successRate,
        minLevel: minLevel
      };
      
      // Copy c√°c thu·ªôc t√≠nh ƒë·∫∑c bi·ªát t·ª´ ƒëan d∆∞·ª£c g·ªëc
      if (potion.healAmount) recipe.healAmount = potion.healAmount;
      if (potion.spiritPowerAmount) recipe.spiritPowerAmount = potion.spiritPowerAmount;
      if (potion.healTime !== undefined) recipe.healTime = potion.healTime;
      if (potion.healDaoCore) recipe.healDaoCore = potion.healDaoCore;
      
      recipes.push(recipe);
    }
  });
  
  // S·∫Øp x·∫øp theo minLevel v√† ƒë·ªô hi·∫øm
  return recipes.sort((a, b) => {
    if (a.minLevel !== b.minLevel) return a.minLevel - b.minLevel;
    const gradeOrder = { "ph√†m kh√≠": 1, "ph√°p kh√≠": 2, "linh kh√≠": 3, "linh b·∫£o": 4, "ti√™n kh√≠": 5 };
    return (gradeOrder[a.grade] || 1) - (gradeOrder[b.grade] || 1);
  });
}

function getPlayerMaterials(player) {
  return player.inventory.filter(item => item.type === "v·∫≠t li·ªáu");
}

function canCraftPotion(player, recipe) {
  // Ki·ªÉm tra level
  if (player.level < recipe.minLevel) {
    return { canCraft: false, reason: `C·∫ßn ƒë·∫°t level ${recipe.minLevel}` };
  }
  
  // Ki·ªÉm tra linh th·∫°ch
  if (player.spiritStones < recipe.spiritStones) {
    return { canCraft: false, reason: `C·∫ßn ${recipe.spiritStones} linh th·∫°ch` };
  }
  
  // Ki·ªÉm tra v·∫≠t li·ªáu
  const playerMaterials = getPlayerMaterials(player);
  for (const material of recipe.materials) {
    let totalCount = 0;
    playerMaterials.forEach(item => {
      if (item.name === material.name) {
        totalCount += (item.quantity || 1);
      }
    });
    
    if (totalCount < material.quantity) {
      return { 
        canCraft: false, 
        reason: `Thi·∫øu ${material.quantity - totalCount} ${material.name}` 
      };
    }
  }
  
  return { canCraft: true };
}

function craftPotion(player, recipe) {
  const canCraft = canCraftPotion(player, recipe);
  if (!canCraft.canCraft) {
    return { success: false, reason: canCraft.reason };
  }
  
  // Tr·ª´ linh th·∫°ch
  player.spiritStones -= recipe.spiritStones;
  
  // Tr·ª´ v·∫≠t li·ªáu
  for (const material of recipe.materials) {
    let needToRemove = material.quantity;
    
    for (let i = player.inventory.length - 1; i >= 0 && needToRemove > 0; i--) {
      const item = player.inventory[i];
      if (item.name === material.name && item.type === "v·∫≠t li·ªáu") {
        const itemQuantity = item.quantity || 1;
        
        if (itemQuantity > needToRemove) {
          // N·∫øu quantity c·ªßa item l·ªõn h∆°n s·ªë l∆∞·ª£ng c·∫ßn tr·ª´, ch·ªâ tr·ª´ quantity
          item.quantity = itemQuantity - needToRemove;
          needToRemove = 0;
        } else if (itemQuantity === needToRemove) {
          // N·∫øu b·∫±ng nhau, x√≥a item
          player.inventory.splice(i, 1);
          needToRemove = 0;
        } else {
          // N·∫øu quantity item nh·ªè h∆°n, x√≥a item v√† ti·∫øp t·ª•c t√¨m
          player.inventory.splice(i, 1);
          needToRemove -= itemQuantity;
        }
      }
    }
    // Debug: Ki·ªÉm tra xem c√≥ tr·ª´ ƒë·ªß v·∫≠t li·ªáu kh√¥ng
    if (needToRemove > 0) {
      console.error(`L·ªói: Kh√¥ng th·ªÉ tr·ª´ ƒë·ªß ${material.name}, c√≤n thi·∫øu ${needToRemove}`);
    }
  }
  
  // T·ª∑ l·ªá th√†nh c√¥ng 85%
  const success = Math.random() < 0.85;
  
  if (success) {
    // Th√†nh c√¥ng - th√™m ƒëan d∆∞·ª£c v√†o kho
    const potion = {
      name: recipe.name,
      type: recipe.type,
      subType: recipe.subType,
      grade: recipe.grade,
      rarity: recipe.rarity,
      description: recipe.description,
      sellPrice: Math.floor(recipe.spiritStones * 0.7),
      buyPrice: recipe.spiritStones * 3,
      obtainedAt: new Date().toISOString()
    };
    
    // Copy c√°c thu·ªôc t√≠nh ƒë·∫∑c bi·ªát
    if (recipe.healAmount) potion.healAmount = recipe.healAmount;
    if (recipe.spiritPowerAmount) potion.spiritPowerAmount = recipe.spiritPowerAmount;
    if (recipe.healTime !== undefined) potion.healTime = recipe.healTime;
    if (recipe.healDaoCore) potion.healDaoCore = recipe.healDaoCore;
    
    addEquipment(player, potion);
    
    return {
      success: true,
      potionName: recipe.name,
      grade: recipe.grade
    };
  } else {
    // Th·∫•t b·∫°i - m·∫•t nguy√™n li·ªáu v√† linh th·∫°ch
    return {
      success: false,
      reason: "Luy·ªán ƒëan th·∫•t b·∫°i",
      failed: true
    };
  }
}

function getPlayerStats(player) {
  try {
    console.log("[DEBUG] Starting getPlayerStats function");
    console.log("[DEBUG] Player data:", player.name, player.level);
    
    const totalKills = Object.values(player.monsterLog || {}).reduce((sum, count) => sum + count, 0);
    const favoriteMonster = Object.entries(player.monsterLog || {})
      .sort(([,a], [,b]) => b - a)[0];

    // Th·ªëng k√™ v·∫≠t ph·∫©m theo lo·∫°i
    const itemStats = {};
    (player.inventory || []).forEach(item => {
      itemStats[item.type] = (itemStats[item.type] || 0) + 1;
    });

    // T√≠nh t·ªïng gi√° tr·ªã kho ƒë·ªì
    const totalValue = (player.inventory || []).reduce((sum, item) => sum + (item.sellPrice || 0), 0);

    let stats = `üìä TH·ªêNG K√ä CHI TI·∫æT - ${player.name || 'Kh√¥ng t√™n'}:\n\n`;
    stats += `üé≠ Lo·∫°i nh√¢n v·∫≠t: ${player.weaponType ? player.weaponType.charAt(0).toUpperCase() + player.weaponType.slice(1) + " Kh√°ch" : "Ch∆∞a x√°c ƒë·ªãnh"}\n`;
    
    // Hi·ªÉn th·ªã linh cƒÉn
    if (player.spiritRoot) {
      const spiritIcon = getSpiritRootIcon(player.spiritRoot.grade);
      stats += `${spiritIcon} Linh cƒÉn: ${player.spiritRoot.grade} (x${player.spiritRoot.multiplier})\n`;
      stats += `   üìã ${player.spiritRoot.description}\n`;
    }
    
    stats += `üèÜ C·∫£nh gi·ªõi: ${getDisplayLevelName(player)}\n`;
    stats += `‚ö° Kinh nghi·ªám: ${player.exp || 0}/${getExpToLevel(player.level || 0)}\n`;
    stats += `üìà Ti·∫øn ƒë·ªô c·∫£nh gi·ªõi: ${Math.floor((player.exp || 0)/getExpToLevel(player.level || 0)*100)}%\n`;
    stats += `‚ù§Ô∏è M√°u: ${player.hp || 0}/${player.maxHp || 0}\n`;
    stats += `üí´ Linh l·ª±c: ${player.spiritPower || 0}/${player.maxSpiritPower || 0}\n`;
    stats += `üó°Ô∏è S√°t th∆∞∆°ng: ${getPlayerAttack(player)}\n`;
    stats += `üíé Linh th·∫°ch: ${(player.spiritStones || 0).toLocaleString()}\n`;
    stats += `üí∞ T·ªïng gi√° tr·ªã kho ƒë·ªì: ${totalValue.toLocaleString()} linh th·∫°ch\n`;
    
    // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒë·ªô ki·∫øp
    if (isReadyForTribulation(player)) {
      stats += `‚ö° Tr·∫°ng th√°i: S·∫µn s√†ng ƒë·ªô ki·∫øp!\n`;
    }
    stats += `\n`;

    stats += `üéí KHO ƒê·ªí (${(player.inventory || []).length} m√≥n):\n`;
    Object.entries(itemStats).forEach(([type, count]) => {
      const typeIcon = type === "ƒëan d∆∞·ª£c" ? "üíä" : 
                      type === "y√™u ƒëan" ? "üîÆ" : 
                      type === "v·∫≠t li·ªáu" ? "üß∞" : 
                      type === "ng·ªçc" ? "üíé" :
                      type === "tinh t√∫y" ? "‚ú®" :
                      type === "linh h·ªìn" ? "üëª" : "üì¶";
      stats += `  ${typeIcon} ${type}: ${count}\n`;
    });

    stats += `\n‚öîÔ∏è CHI·∫æN ƒê·∫§U:\n`;
    stats += `üéØ T·ªïng qu√°i ƒë√£ ti√™u di·ªát: ${totalKills}\n`;
    if (favoriteMonster) {
      stats += `üèÖ Qu√°i ƒë√°nh nhi·ªÅu nh·∫•t: ${favoriteMonster[0]} (${favoriteMonster[1]} l·∫ßn)\n`;
    }

    // Hi·ªÉn th·ªã tr·∫°ng th√°i buff
    if (hasExpBoost(player)) {
      const boostTimeLeft = Math.ceil((new Date(player.expBoostUntil) - new Date()) / 60000);
      stats += `‚ö° Buff kinh nghi·ªám: x${player.expBoostMultiplier} (${boostTimeLeft} ph√∫t)\n`;
    }
    if (hasInjuryImmunity(player)) {
      const immunityTimeLeft = Math.ceil((new Date(player.immunityUntil) - new Date()) / 60000);
      stats += `üõ°Ô∏è Mi·ªÖn nhi·ªÖm b·ªã th∆∞∆°ng: ${immunityTimeLeft} ph√∫t\n`;
    }
    if (isDaoCoreInjured(player)) {
      const daoCoreTimeLeft = getDaoCoreInjuryTimeLeft(player);
      stats += `üíÄ ƒê·∫°o c∆°: B·ªã th∆∞∆°ng (${daoCoreTimeLeft} ph√∫t)\n`;
    } else if (isPlayerInjured(player)) {
      const injuryTimeLeft = getInjuryTimeLeft(player);
      stats += `ü©∏ Tr·∫°ng th√°i: B·ªã th∆∞∆°ng (${injuryTimeLeft} ph√∫t)\n`;
    } else {
      stats += `üí™ Tr·∫°ng th√°i: Kh·ªèe m·∫°nh\n`;
    }

    stats += `\nüïê C·∫≠p nh·∫≠t: ${formatTime(new Date())}`;
    
    console.log("[DEBUG] getPlayerStats completed successfully");
    return stats;
  } catch (error) {
    console.error("[ERROR] getPlayerStats function failed:", error);
    return `‚ùå L·ªói khi l·∫•y th√¥ng tin nh√¢n v·∫≠t: ${error.message}`;
  }
}



// L·ªánh ch√≠nh `.tu`
module.exports.config = {
  name: "tu",
  version: "2.0.0",
  hasPermission: 0,
  credits: "Atomic",
  description: "Tu ti√™n - ƒë√°nh qu√°i, nh·∫≠n exp, trang b·ªã v√† linh th·∫°ch (phi√™n b·∫£n n√¢ng cao)",
  commandCategory: "Tu ti√™n",
  usages: "[l·ªánh]",
  cooldowns: 5
};

function getMonsterDisplayName(monster) {
    const beastLevelIcon = getBeastLevelIcon(monster.beastLevel);
    return `${beastLevelIcon} ${monster.name} „Äê${monster.phase} ${monster.beastLevel}„Äë`;
}

function getBeastLevelIcon(beastLevel) {
  const icons = {
    "Ph√†m Th√∫": "üê∫",
    "Y√™u Th√∫": "ü¶ä", 
    "Linh Th√∫": "üê≤",
    "Th√°nh Th√∫": "ü¶Ñ",
    "Y√™u V∆∞∆°ng": "üëë",
    "Y√™u ƒê·∫ø": "üëπ",
    "Th·∫ßn Th√∫": "üî•"
  };
  return icons[beastLevel] || "üêæ";
}

function getRarityIcon(rarity) {
  const icons = {
    "th∆∞·ªùng": "‚ö™",
    "hi·∫øm": "üü¢",
    "c·ª±c hi·∫øm": "üîµ", 
    "th·∫ßn tho·∫°i": "üü£",
    "huy·ªÅn tho·∫°i": "üü°",
    "tuy·ªát th·∫ø": "üî¥"
  };
  return icons[rarity] || "‚ö™";
}

module.exports.run = async ({ event, api, args }) => {
  const userID = event.senderID;
  const player = loadPlayer(userID);

  // Ki·ªÉm tra n·∫øu ng∆∞·ªùi ch∆°i ch∆∞a t·∫°o nh√¢n v·∫≠t
  if (!player) {
    const weaponTypes = getWeaponTypes();
    let createCharText = `üé≠ T·∫†O NH√ÇN V·∫¨T M·ªöI\n\n`;
    createCharText += `Ch√†o m·ª´ng ƒë·∫øn v·ªõi th·∫ø gi·ªõi tu ti√™n!\n`;
    createCharText += `H√£y ch·ªçn lo·∫°i v≈© kh√≠ chuy√™n bi·ªát cho nh√¢n v·∫≠t:\n\n`;
    
    weaponTypes.forEach(type => {
      createCharText += `${type.id}. ${type.name}\n`;
      createCharText += `   üó°Ô∏è ${type.description}\n\n`;
    });
    
    createCharText += `üí∞ Ph·∫ßn th∆∞·ªüng t√¢n th·ªß: 5000 linh th·∫°ch\n`;
    createCharText += `üí° Reply s·ªë th·ª© t·ª± ƒë·ªÉ ch·ªçn lo·∫°i v≈© kh√≠`;
    
    return api.sendMessage(createCharText, event.threadID, (error, info) => {
      if (!error) {
        global.client.handleReply.push({
          name: this.config.name,
          messageID: info.messageID,
          author: userID,
          type: "create_character"
        });
      }
    });
  }

  if (!player) {
    return api.sendMessage("‚ùå L·ªói: Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ng∆∞·ªùi ch∆°i!", event.threadID, event.messageID);
  }

  const choice = (args[0] || '').toLowerCase();

  if (!choice) {
    const menuMessage = showMainMenu();
    return api.sendMessage(menuMessage, event.threadID, (error, info) => {
      if (!error) {
        global.client.handleReply.push({
          name: this.config.name,
          messageID: info.messageID,
          author: userID,
          type: "main_menu"
        });
      }
    });
  }

  // Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
  if (choice === 'help' || choice === 'huongdan') {
    let helpText = `üéÆ H∆Ø·ªöNG D·∫™N TU TI√äN:\n\n`;
    helpText += `üìñ C√ÅC L·ªÜNH C∆† B·∫¢N:\n`;
    helpText += `.tu - M·ªü menu ch√≠nh\n`;
    helpText += `.tu 1 - ƒê√°nh qu√°i\n`;
    helpText += `.tu 2 - C·ª≠a h√†ng\n`;
    helpText += `.tu 5 - Kho ƒë·ªì\n`;
    helpText += `.tu 6 - Th·ªëng k√™\n`;
    helpText += `.tu 9 - ƒê·ªô ki·∫øp\n\n`;
    helpText += `üíä S·ª¨ D·ª§NG ƒêAN D∆Ø·ª¢C:\n`;
    helpText += `.tu use [s·ªë] - D√πng 1 ƒëan d∆∞·ª£c\n`;
    helpText += `.tu use [s·ªë1] [s·ªë2] [s·ªë3] - D√πng nhi·ªÅu ƒëan d∆∞·ª£c c√πng l√∫c\n`;
    helpText += `V√≠ d·ª•: .tu use 1 2 3 (d√πng ƒëan d∆∞·ª£c s·ªë 1, 2, 3)\n\n`;
    helpText += `üõí MUA ƒêAN D∆Ø·ª¢C:\n`;
    helpText += `.tu shop 2 [s·ªë] [s·ªë l∆∞·ª£ng] - Mua ƒëan d∆∞·ª£c\n`;
    helpText += `V√≠ d·ª•: .tu shop 2 1 5 (mua 5 vi√™n ƒëan d∆∞·ª£c s·ªë 1)\n\n`;
    helpText += `üí° M·∫πo: S·ª≠ d·ª•ng nhi·ªÅu ƒëan d∆∞·ª£c c√πng l√∫c s·∫Ω t·ªëi ∆∞u hi·ªáu qu·∫£!`;
    return api.sendMessage(helpText, event.threadID, event.messageID);
  }

  

  // ƒê√°nh qu√°i
  if (choice === '1' || choice === 'ƒë√°nh' || choice === 'ƒë√°nh qu√°i' || choice === 'qu√°i') {
    // Ki·ªÉm tra c√≥ v≈© kh√≠ ph√π h·ª£p kh√¥ng
    if (!hasUsableWeapon(player)) {
      const weaponTypeName = {
        "ki·∫øm": "ki·∫øm",
        "ƒëao": "ƒëao", 
        "th∆∞∆°ng": "th∆∞∆°ng",
        "cung": "cung t√™n"
      };
      const requiredWeapon = weaponTypeName[player.weaponType] || "v≈© kh√≠";
      return api.sendMessage(`‚öîÔ∏è B·∫°n c·∫ßn c√≥ ${requiredWeapon} ƒë·ªÉ c√≥ th·ªÉ ƒë√°nh qu√°i!\nüí∞ H√£y mua ${requiredWeapon} ·ªü c·ª≠a h√†ng tr∆∞·ªõc khi sƒÉn qu√°i.\nüíé Linh th·∫°ch hi·ªán c√≥: ${player.spiritStones}`, event.threadID, event.messageID);
    }

    // Ki·ªÉm tra tr·∫°ng th√°i ƒë·∫°o c∆° b·ªã th∆∞∆°ng
    if (isDaoCoreInjured(player)) {
      const timeLeft = getDaoCoreInjuryTimeLeft(player);
      const recoveryTime = formatTime(new Date(player.daoCoreInjuredUntil));
      return api.sendMessage(`üíÄ ƒê·∫°o c∆° ƒëang b·ªã hao t·ªïn! Kh√¥ng th·ªÉ tu luy·ªán.\n‚è∞ Th·ªùi gian h·ªìi ph·ª•c: ${recoveryTime}\nüíä Ho·∫∑c d√πng ƒëan d∆∞·ª£c ch·ªØa ƒë·∫°o c∆° (Thi√™n T√¢m ƒêan, Ng≈© H√†nh Thi√™n ƒêan, C·ª≠u Chuy·ªÉn Ho√†n H·ªìn ƒêan)`, event.threadID, event.messageID);
    }

    // Ki·ªÉm tra tr·∫°ng th√°i b·ªã th∆∞∆°ng
    if (isPlayerInjured(player)) {
      const timeLeft = getInjuryTimeLeft(player);
      const recoveryTime = formatTime(new Date(player.injuredUntil));
      return api.sendMessage(`ü©∏ B·∫°n ƒëang b·ªã th∆∞∆°ng! C·∫ßn ch·ªù ${timeLeft} ph√∫t n·ªØa ƒë·ªÉ h·ªìi ph·ª•c ho·∫∑c d√πng ƒëan d∆∞·ª£c tr·ªã th∆∞∆°ng.\n‚è∞ Th·ªùi gian h·ªìi ph·ª•c: ${recoveryTime}`, event.threadID, event.messageID);
    }

    // Ki·ªÉm tra m√°u
    if (player.hp <= 0) {
      return api.sendMessage(`üíÄ B·∫°n ƒë√£ h·∫øt m√°u! C·∫ßn s·ª≠ d·ª•ng ƒëan d∆∞·ª£c ƒë·ªÉ h·ªìi ph·ª•c m√°u tr∆∞·ªõc khi ti·∫øp t·ª•c sƒÉn qu√°i.`, event.threadID, event.messageID);
    }

    // Ki·ªÉm tra m√°u d∆∞·ªõi 20% - kh√¥ng cho ph√©p ƒëi sƒÉn qu√°i
    const minHpPercent = 0.2; // 20%
    const minHpRequired = Math.floor(player.maxHp * minHpPercent);
    if (player.hp < minHpRequired) {
      const hpPercent = Math.floor((player.hp / player.maxHp) * 100);
      return api.sendMessage(`ü©∏ M√°u qu√° th·∫•p ƒë·ªÉ sƒÉn qu√°i! (${hpPercent}%)\n‚ù§Ô∏è M√°u hi·ªán t·∫°i: ${player.hp}/${player.maxHp}\nüíä C·∫ßn h·ªìi ph·ª•c m√°u l√™n √≠t nh·∫•t ${minHpRequired} (20%) ƒë·ªÉ c√≥ th·ªÉ ti·∫øp t·ª•c sƒÉn qu√°i.\nüí° S·ª≠ d·ª•ng ƒëan d∆∞·ª£c ƒë·ªÉ h·ªìi ph·ª•c m√°u tr∆∞·ªõc khi ƒëi sƒÉn qu√°i.`, event.threadID, event.messageID);
    }

    // Ki·ªÉm tra linh l·ª±c
    if (!canHunt(player)) {
      const recoveryTime = player.spiritPowerRecoveryTime ? formatTime(new Date(player.spiritPowerRecoveryTime)) : "ƒêang t√≠nh to√°n...";
      return api.sendMessage(`üåÄ Linh l·ª±c ƒë√£ ki·ªát! C·∫ßn ch·ªù ƒë·ªÉ h·ªìi ph·ª•c linh l·ª±c.\nüí´ Linh l·ª±c: ${player.spiritPower}/${player.maxSpiritPower}\n‚è∞ H·ªìi ph·ª•c v√†o: ${recoveryTime}\nüí° M·ªói 1 ph√∫t s·∫Ω h·ªìi ${GAME_CONFIG?.combat?.spiritPowerRecoveryAmount || 10} linh l·ª±c (10 ph√∫t h·ªìi ƒë·∫ßy)`, event.threadID, event.messageID);
    }

    // Ti√™u hao linh l·ª±c
    consumeSpiritPower(player);

    // Random qu√°i theo c·∫•p ƒë·ªô ng∆∞·ªùi ch∆°i
    const monster = getRandomMonster(player.level);
    const battleResult = calculateBattleResult(player, monster);

    if (battleResult.result === "win" || battleResult.result === "lucky_win" || battleResult.result === "easy_win") {
      // Th·∫Øng (b√¨nh th∆∞·ªùng, may m·∫Øn ho·∫∑c d·ªÖ d√†ng)
      player.hp = battleResult.playerHpLeft;
      const finalExp = gainExpWithBoost(player, monster.exp);
      logMonsterKill(player, monster.name);

      let msg = `‚öîÔ∏è CHI·∫æN TH·∫ÆNG${battleResult.isLucky ? ' MAY M·∫ÆN' : battleResult.isEasy ? ' √ÅP ƒê·∫¢O' : ''}!\n`;
      msg += `${getMonsterDisplayName(monster)} ƒë√£ b·ªã ti√™u di·ªát!\n`;
      msg += `üó°Ô∏è Chi·∫øn ƒë·∫•u ${battleResult.turns} l∆∞·ª£t\n`;
      msg += `üí• S√°t th∆∞∆°ng g√¢y ra: ${battleResult.damageDealt}\n`;
      
      if (battleResult.isLucky) {
        msg += `üçÄ Th·∫Øng m·ªôt c√°ch k·ª≥ di·ªáu tr∆∞·ªõc ƒë·ªëi th·ªß m·∫°nh h∆°n!\n`;
        msg += `‚ö†Ô∏è B·∫°n ƒë√£ b·ªã th∆∞∆°ng n·∫∑ng trong tr·∫≠n chi·∫øn!\n`;
      } else if (battleResult.isEasy) {
        msg += `üí™ √Åp ƒë·∫£o ho√†n to√†n! Y√™u th√∫ qu√° y·∫øu so v·ªõi s·ª©c m·∫°nh hi·ªán t·∫°i!\n`;
        msg += `üõ°Ô∏è Kh√¥ng h·ªÅ b·ªã th∆∞∆°ng trong tr·∫≠n chi·∫øn!\n`;
      }
      
      if (finalExp.gained > 0) {
        msg += `üìà Nh·∫≠n ƒë∆∞·ª£c ${finalExp.gained} kinh nghi·ªám`;
        if (hasExpBoost(player)) {
          msg += ` (x${player.expBoostMultiplier} buff)`;
        }
        if (finalExp.spiritRootBonus) {
          msg += ` (Bonus linh cƒÉn x${player.spiritRoot.multiplier})`;
        }
        msg += `\n`;
      } else {
        // Ki·ªÉm tra n·∫øu c√≥ th·ªÉ ƒë·ªô ki·∫øp
        if (isReadyForTribulation(player)) {
          msg += `‚ö° ƒê√£ ƒë·∫°t Vi√™n M√£n - Kh√¥ng th·ªÉ nh·∫≠n th√™m kinh nghi·ªám!\n`;
          msg += `üí° H√£y ƒë·ªô ki·∫øp ƒë·ªÉ l√™n c·∫£nh gi·ªõi m·ªõi!\n`;
        } else {
          msg += `‚ö° ƒê√£ ƒë·∫°t Vi√™n M√£n c·∫£nh gi·ªõi ${getCurrentStage(player.level)}!\n`;
          msg += `üí° Ti·∫øp t·ª•c tu luy·ªán ƒë·ªÉ n√¢ng cao s·ª©c m·∫°nh!\n`;
        }
      }
      
      // Ki·ªÉm tra n·∫øu c√≥ th·ªÉ ƒë·ªô ki·∫øp
      if (isReadyForTribulation(player)) {
        msg += `‚ö° ƒê√£ s·∫µn s√†ng ƒë·ªô ki·∫øp! D√πng l·ªánh .tu 9\n`;
      }
      msg += `\n`;

      const drop = dropEquipment(monster);
      if (drop) {
        addEquipment(player, drop);
        const gradeIcon = getGradeIcon(drop.grade);
        const rarityIcon = getRarityIcon(drop.rarity);

        msg += `üéÅ PH·∫¶N TH∆Ø·ªûNG: ${gradeIcon}${rarityIcon} ${drop.name}\n`;
        if (player.settings?.autoSell) {
          msg += `   üí∞ T·ª± ƒë·ªông b√°n: +${drop.sellPrice} linh th·∫°ch\n`;
        } else {
          msg += `   üíé Gi√° tr·ªã: ${drop.sellPrice} linh th·∫°ch\n`;
        }
        msg += `   üß∞ V·∫≠t li·ªáu luy·ªán ƒëan\n`;
      } else {
        msg += `üí® Kh√¥ng c√≥ chi·∫øn l·ª£i ph·∫©m...\n`;
      }

      msg += `\nüìä TR·∫†NG TH√ÅI:\n`;
      msg += `üèÜ C·∫£nh gi·ªõi: ${getDisplayLevelName(player)}\n`;
      msg += `‚ö° Kinh nghi·ªám: ${player.exp}/${getExpToLevel(player.level)}\n`;
      msg += `‚ù§Ô∏è M√°u: ${player.hp}/${player.maxHp}\n`;
      msg += `üí´ Linh l·ª±c: ${player.spiritPower}/${player.maxSpiritPower}\n`;
      msg += `üíé Linh th·∫°ch: ${player.spiritStones.toLocaleString()}\n`;

      // Hi·ªÉn th·ªã tr·∫°ng th√°i buff
      if (hasExpBoost(player)) {
        const boostTimeLeft = Math.ceil((new Date(player.expBoostUntil) - new Date()) / 60000);
        msg += `‚ö° Buff kinh nghi·ªám: x${player.expBoostMultiplier} (${boostTimeLeft}p)\n`;
      }
      if (hasInjuryImmunity(player)) {
        const immunityTimeLeft = Math.ceil((new Date(player.immunityUntil) - new Date()) / 60000);
        msg += `üõ°Ô∏è Mi·ªÖn nhi·ªÖm: ${immunityTimeLeft}p\n`;
      }

      msg += `\nüïê ${formatTime(new Date())}`;
      savePlayer(userID, player);
      return api.sendMessage(msg, event.threadID, event.messageID);
    } else if (battleResult.result === "escape") {
      // Ch·∫°y tr·ªën th√†nh c√¥ng nh∆∞ng b·ªã h·∫≠u qu·∫£
      
      // C·∫°n ki·ªát linh kh√≠ (ch·ªâ c√≤n 10% ho·∫∑c t·ªëi thi·ªÉu 1 ƒëi·ªÉm)
      player.spiritPower = Math.max(1, Math.floor(player.spiritPower * 0.1));
      
      // B·ªã th∆∞∆°ng nh·∫π (m·∫•t 30% m√°u)
      const healthLoss = Math.floor(player.maxHp * 0.3);
      player.hp = Math.max(1, player.hp - healthLoss);
      
      // B·ªã th∆∞∆°ng nh·∫π trong 5 ph√∫t (n·∫øu kh√¥ng c√≥ mi·ªÖn nhi·ªÖm)
      if (!hasInjuryImmunity(player)) {
        const injuredTime = new Date();
        injuredTime.setMinutes(injuredTime.getMinutes() + 5); // 5 ph√∫t b·ªã th∆∞∆°ng nh·∫π
        player.injuredUntil = injuredTime.toISOString();
      }
      
      let msg = `üí® CH·∫†Y TR·ªêN TH√ÄNH C√îNG!\n`;
      msg += `B·∫°n ƒë√£ k·ªãp th·ªùi tho√°t kh·ªèi ${getMonsterDisplayName(monster)}!\n`;
      msg += `üèÉ‚Äç‚ôÇÔ∏è May m·∫Øn tho√°t ƒë∆∞·ª£c m·ªôt tai h·ªça l·ªõn!\n\n`;
      msg += `‚ö†Ô∏è H·∫¨U QU·∫¢ C·ª¶A VI·ªÜC CH·∫†Y TR·ªêN:\n`;
      msg += `üíî M·∫•t ${healthLoss} m√°u do ho·∫£ng lo·∫°n\n`;
      msg += `üí´ Linh kh√≠ c·∫°n ki·ªát do s·ª≠ d·ª•ng th·∫ßn th·ª©c ch·∫°y tr·ªën\n`;
      
      if (!hasInjuryImmunity(player)) {
        const recoveryTime = formatTime(new Date(player.injuredUntil));
        msg += `ü©∏ B·ªã th∆∞∆°ng nh·∫π (5 ph√∫t): ${recoveryTime}\n`;
      } else {
        msg += `üõ°Ô∏è Mi·ªÖn nhi·ªÖm b·ªã th∆∞∆°ng v·∫´n c√≤n hi·ªáu l·ª±c\n`;
      }
      
      msg += `\nüìä TR·∫†NG TH√ÅI:\n`;
      msg += `‚ù§Ô∏è M√°u: ${player.hp}/${player.maxHp}\n`;
      msg += `üí´ Linh l·ª±c: ${player.spiritPower}/${player.maxSpiritPower}\n`;
      msg += `üí° M·∫πo: H√£y n√¢ng cao c·∫£nh gi·ªõi tr∆∞·ªõc khi th√°ch th·ª©c y√™u th√∫ m·∫°nh h∆°n!\n`;
      msg += `üïê ${formatTime(new Date())}`;
      savePlayer(userID, player);
      return api.sendMessage(msg, event.threadID, event.messageID);
    } else {
      // Thua - m·∫•t m√°u v√† b·ªã th∆∞∆°ng
      player.hp = battleResult.playerHpLeft; // Lu√¥n l√† 1 m√°u
      
      if (hasInjuryImmunity(player)) {
        let msg = `‚öîÔ∏è B·∫°n ƒë√£ b·ªã ${getMonsterDisplayName(monster)} ƒë√°nh b·∫°i!\n`;
        msg += `üó°Ô∏è Chi·∫øn ƒë·∫•u ${battleResult.turns} l∆∞·ª£t\n`;
        msg += `üíî M·∫•t ${battleResult.damageReceived} m√°u\n`;
        msg += `‚ù§Ô∏è M√°u c√≤n l·∫°i: ${player.hp}/${player.maxHp}\n`;
        msg += `üí´ Linh l·ª±c: ${player.spiritPower}/${player.maxSpiritPower}\n`;
        msg += `üõ°Ô∏è Hi·ªáu ·ª©ng mi·ªÖn nhi·ªÖm v·∫´n c√≤n hi·ªáu l·ª±c - kh√¥ng b·ªã th∆∞∆°ng.\n`;
        msg += `üïê Th·ªùi gian: ${formatTime(new Date())}`;
        savePlayer(userID, player);
        return api.sendMessage(msg, event.threadID, event.messageID);
      } else {
        // Lu√¥n b·ªã th∆∞∆°ng 10 ph√∫t khi thua
        injurePlayer(player);
        
        // X·ª≠ l√Ω th∆∞∆°ng t√≠ch n·∫∑ng cho y√™u th√∫ cao h∆°n c·∫•p
        if (battleResult.isSevereInjury) {
          // B·ªã th∆∞∆°ng n·∫∑ng - th·ªùi gian h·ªìi ph·ª•c g·∫•p ƒë√¥i (20 ph√∫t)
          const currentInjuryTime = new Date(player.injuredUntil);
          currentInjuryTime.setMinutes(currentInjuryTime.getMinutes() + 10); // Th√™m 10 ph√∫t n·ªØa = 20 ph√∫t t·ªïng
          player.injuredUntil = currentInjuryTime.toISOString();
        }
        
        const recoveryTime = formatTime(new Date(player.injuredUntil));
        let msg = `üíÄ TH·∫§T B·∫†I!\n`;
        msg += `${getMonsterDisplayName(monster)} ƒë√£ ƒë√°nh b·∫°i b·∫°n!\n`;
        msg += `üó°Ô∏è Chi·∫øn ƒë·∫•u ${battleResult.turns} l∆∞·ª£t\n`;
        msg += `üíî M·∫•t ${battleResult.damageReceived} m√°u\n\n`;
        
        if (battleResult.isSevereInjury) {
          msg += `üí• B·ªä TH∆Ø∆†NG C·ª∞C N·∫∂NG:\n`;
          msg += `‚ö†Ô∏è Th√°ch th·ª©c y√™u th√∫ v∆∞·ª£t qu√° s·ª©c m·∫°nh!\n`;
          msg += `ü©∏ Th·ªùi gian h·ªìi ph·ª•c k√©o d√†i (20 ph√∫t)\n`;
        } else {
          msg += `ü©∏ B·ªä TH∆Ø∆†NG N·∫∂NG:\n`;
          msg += `‚ö†Ô∏è C·∫ßn 10 ph√∫t ƒë·ªÉ h·ªìi ph·ª•c ho√†n to√†n\n`;
        }
        
        msg += `‚ù§Ô∏è M√°u: ${player.hp}/${player.maxHp}\n`;
        msg += `üí´ Linh l·ª±c: ${player.spiritPower}/${player.maxSpiritPower}\n`;
        msg += `‚è∞ Th·ªùi gian h·ªìi ph·ª•c: ${recoveryTime}\n`;
        msg += `üíä Ho·∫∑c s·ª≠ d·ª•ng ƒëan d∆∞·ª£c ƒë·ªÉ tr·ªã th∆∞∆°ng ngay\n\n`;
        msg += `üí° M·∫πo: N√¢ng cao c·∫£nh gi·ªõi tr∆∞·ªõc khi th√°ch th·ª©c y√™u th√∫ m·∫°nh h∆°n!\n`;
        msg += `üïê ${formatTime(new Date())}`;
        
        savePlayer(userID, player);
        return api.sendMessage(msg, event.threadID, event.messageID);
      }
    }
  }

  // ƒêan c√°c
  if (choice === '2' || choice === 'ƒëan c√°c' || choice === 'shop') {
    let text = `üè™ ƒêAN C√ÅC:\n\n`;
    text += `1. üåø Linh th·∫£o\n`;
    text += `2. üß™ Luy·ªán ƒëan\n\n`;
    text += `üí° Reply s·ªë th·ª© t·ª± ƒë·ªÉ ch·ªçn`;
    return api.sendMessage(text, event.threadID, (error, info) => {
      if (!error) {
        global.client.handleReply.push({
          name: this.config.name,
          messageID: info.messageID,
          author: userID,
          type: "alchemy_main"
        });
      }
    });
  }

  

  // S·ª≠ d·ª•ng nhi·ªÅu ƒëan d∆∞·ª£c c√πng l√∫c
  if (choice === 'use' && args[1]) {
    const potionIndices = args.slice(1).map(arg => parseInt(arg) - 1);
    const potions = player.inventory.filter(item => item.type === "ƒëan d∆∞·ª£c");
    
    if (potions.length === 0) {
      return api.sendMessage("üíä B·∫°n kh√¥ng c√≥ ƒëan d∆∞·ª£c n√†o ƒë·ªÉ s·ª≠ d·ª•ng!", event.threadID, event.messageID);
    }

    // G·ªôp ƒëan d∆∞·ª£c theo t√™n
    const groupedPotions = {};
    potions.forEach((potion, index) => {
      const key = `${potion.name}_${potion.grade}`;
      if (!groupedPotions[key]) {
        groupedPotions[key] = { potion, count: 0, indices: [] };
      }
      groupedPotions[key].count++;
      groupedPotions[key].indices.push(index);
    });

    const sortedPotions = Object.values(groupedPotions);
    const validIndices = potionIndices.filter(index => index >= 0 && index < sortedPotions.length);
    
    if (validIndices.length === 0) {
      return api.sendMessage("‚ùå Kh√¥ng c√≥ ƒëan d∆∞·ª£c h·ª£p l·ªá ƒë·ªÉ s·ª≠ d·ª•ng!", event.threadID, event.messageID);
    }

    let usedPotions = [];
    let totalEffects = {
      healAmount: 0,
      spiritPowerAmount: 0,
      hasExpBoost: false,
      hasImmunity: false,
      hasDaoCoreHeal: false,
      hasInjuryHeal: false
    };

    // S·ª≠ d·ª•ng t·ª´ng ƒëan d∆∞·ª£c
    for (const index of validIndices) {
      const potionGroup = sortedPotions[index];
      const inventoryIndex = player.inventory.findIndex(item => 
        item.name === potionGroup.potion.name && item.type === "ƒëan d∆∞·ª£c"
      );
      
      if (inventoryIndex !== -1) {
        const potion = player.inventory[inventoryIndex];
        player.inventory.splice(inventoryIndex, 1);
        
        // T√≠nh t·ªïng hi·ªáu ·ª©ng
        if (potion.healAmount) {
          if (potion.healAmount === 9999) {
            totalEffects.healAmount = 9999;
          } else {
            totalEffects.healAmount += potion.healAmount;
          }
        }
        
        if (potion.spiritPowerAmount) {
          if (potion.spiritPowerAmount === 9999) {
            totalEffects.spiritPowerAmount = 9999;
          } else {
            totalEffects.spiritPowerAmount += potion.spiritPowerAmount;
          }
        }
        
        if (potion.subType === "ch·ªØa ƒë·∫°o c∆°" || potion.healDaoCore) {
          totalEffects.hasDaoCoreHeal = true;
        }
        
        if (potion.subType === "ch·ªØa th∆∞∆°ng") {
          totalEffects.hasInjuryHeal = true;
        }
        
        if (potion.grade === "linh kh√≠" || potion.grade === "linh b·∫£o" || potion.grade === "ti√™n kh√≠") {
          totalEffects.hasExpBoost = true;
        }
        
        if (potion.grade === "linh b·∫£o" || potion.grade === "ti√™n kh√≠") {
          totalEffects.hasImmunity = true;
        }
        
        usedPotions.push(potion.name);
      }
    }

    // √Åp d·ª•ng hi·ªáu ·ª©ng t·ªïng h·ª£p
    if (totalEffects.healAmount > 0) {
      if (totalEffects.healAmount === 9999) {
        player.hp = player.maxHp;
      } else {
        player.hp = Math.min(player.maxHp, player.hp + totalEffects.healAmount);
      }
    }

    if (totalEffects.spiritPowerAmount > 0) {
      if (totalEffects.spiritPowerAmount === 9999) {
        player.spiritPower = player.maxSpiritPower;
      } else {
        player.spiritPower = Math.min(player.maxSpiritPower, player.spiritPower + totalEffects.spiritPowerAmount);
      }
    }

    if (totalEffects.hasDaoCoreHeal) {
      healDaoCore(player);
    }

    if (totalEffects.hasInjuryHeal) {
      healPlayer(player);
    }

    if (totalEffects.hasExpBoost) {
      const now = new Date();
      const expBoostTime = new Date(now);
      expBoostTime.setMinutes(expBoostTime.getMinutes() + 30);
      player.expBoostUntil = expBoostTime.toISOString();
      player.expBoostMultiplier = 1.5;
    }

    if (totalEffects.hasImmunity) {
      const now = new Date();
      const immunityTime = new Date(now);
      immunityTime.setHours(immunityTime.getHours() + 1);
      player.immunityUntil = immunityTime.toISOString();
    }

    savePlayer(userID, player);

    let msg = `‚úÖ ƒê√£ s·ª≠ d·ª•ng ${usedPotions.length} ƒëan d∆∞·ª£c:\n`;
    msg += `üíä ${usedPotions.join(', ')}\n\n`;
    msg += `üìä HI·ªÜU QU·∫¢:\n`;
    msg += `‚ù§Ô∏è M√°u: ${player.hp}/${player.maxHp}\n`;
    msg += `üí´ Linh l·ª±c: ${player.spiritPower}/${player.maxSpiritPower}\n`;
    
    if (totalEffects.hasExpBoost) {
      msg += `‚ö° Buff kinh nghi·ªám: x1.5 (30 ph√∫t)\n`;
    }
    if (totalEffects.hasImmunity) {
      msg += `üõ°Ô∏è Mi·ªÖn nhi·ªÖm b·ªã th∆∞∆°ng (1 gi·ªù)\n`;
    }
    if (totalEffects.hasDaoCoreHeal) {
      msg += `ü©π ƒê√£ ch·ªØa l√†nh ƒë·∫°o c∆°\n`;
    }
    if (totalEffects.hasInjuryHeal) {
      msg += `ü©π ƒê√£ ch·ªØa l√†nh th∆∞∆°ng t√≠ch\n`;
    }
    
    return api.sendMessage(msg, event.threadID, event.messageID);
  }

  

  // Kho ƒë·ªì
  if (choice === '3' || choice === 'kho' || choice === 'kho ƒë·ªì' || choice === 'inventory') {
    if (!player.inventory.length)
      return api.sendMessage("üì¶ Kho ƒë·ªì tr·ªëng! H√£y ƒë√°nh qu√°i ƒë·ªÉ thu th·∫≠p trang b·ªã!", event.threadID, event.messageID);

    let inventoryText = "üì¶ KHO ƒê·ªí:\n\n";
    
    // G·ªôp v·∫≠t ph·∫©m theo t√™n, lo·∫°i v√† c·∫•p ƒë·ªô
    const groupedItems = {};
    player.inventory.forEach((item, index) => {
      const key = `${item.name}_${item.type}_${item.grade}`;
      if (!groupedItems[key]) {
        groupedItems[key] = { 
          item: item, 
          count: 0, 
          indices: [],
          totalValue: 0 
        };
      }
      
      // X·ª≠ l√Ω s·ªë l∆∞·ª£ng ƒë·∫∑c bi·ªát cho v·∫≠t li·ªáu c√≥ thu·ªôc t√≠nh quantity
      const itemQuantity = item.quantity || 1;
      groupedItems[key].count += itemQuantity;
      groupedItems[key].indices.push(index);
      groupedItems[key].totalValue += (item.sellPrice || 0) * itemQuantity;
    });

    // S·∫Øp x·∫øp theo lo·∫°i v·∫≠t ph·∫©m
    const sortedItems = Object.entries(groupedItems).sort(([,a], [,b]) => {
      const typeOrder = ["ƒëan d∆∞·ª£c", "v≈© kh√≠", "y√™u ƒëan", "v·∫≠t li·ªáu", "ng·ªçc", "tinh t√∫y", "linh h·ªìn"];
      const aTypeIndex = typeOrder.indexOf(a.item.type || "kh√°c");
      const bTypeIndex = typeOrder.indexOf(b.item.type || "kh√°c");
      if (aTypeIndex !== bTypeIndex) {
        return aTypeIndex - bTypeIndex;
      }
      return (a.item.name || "").localeCompare(b.item.name || "");
    });

    let itemIndex = 0;
    let currentType = "";
    
    sortedItems.forEach(([key, data]) => {
      const { item, count, totalValue } = data;
      
      // ƒê·∫£m b·∫£o item c√≥ ƒë·∫ßy ƒë·ªß thu·ªôc t√≠nh
      const itemType = item.type || "kh√°c";
      const itemName = item.name || "V·∫≠t ph·∫©m kh√¥ng t√™n";
      const itemGrade = item.grade || "ph√†m kh√≠";
      const itemRarity = item.rarity || "th∆∞·ªùng";
      const itemSellPrice = item.sellPrice || 0;
      
      // Hi·ªÉn th·ªã header cho lo·∫°i v·∫≠t ph·∫©m m·ªõi
      if (itemType !== currentType) {
        currentType = itemType;
        const typeIcon = itemType === "ƒëan d∆∞·ª£c" ? "üíä" : 
                        itemType === "v≈© kh√≠" ? "‚öîÔ∏è" :
                        itemType === "y√™u ƒëan" ? "üîÆ" : 
                        itemType === "v·∫≠t li·ªáu" ? "üß∞" : 
                        itemType === "ng·ªçc" ? "üíé" :
                        itemType === "tinh t√∫y" ? "‚ú®" :
                        itemType === "linh h·ªìn" ? "üëª" : "üì¶";
        inventoryText += `\n${typeIcon} ${itemType.toUpperCase()}:\n`;
      }
      
      itemIndex++;
      const gradeIcon = getGradeIcon(itemGrade);
      const rarityIcon = getRarityIcon(itemRarity);

      // T·∫°o chu·ªói hi·ªÉn th·ªã s·ªë l∆∞·ª£ng - lu√¥n hi·ªÉn th·ªã s·ªë l∆∞·ª£ng n·∫øu > 1
      let quantityDisplay = count > 1 ? ` x${count}` : "";

      inventoryText += `${itemIndex}. ${gradeIcon}${rarityIcon} ${itemName}${quantityDisplay}`;
      
      // Hi·ªÉn th·ªã th√¥ng tin ƒë·∫∑c bi·ªát cho t·ª´ng lo·∫°i
      if (itemType === "v≈© kh√≠" && item.attack) {
        inventoryText += ` (üí•${item.attack})`;
      }
      
      // Hi·ªÉn th·ªã gi√° b√°n r√µ r√†ng
      if (count === 1) {
        inventoryText += ` - üíé${itemSellPrice.toLocaleString()}`;
      } else {
        inventoryText += ` - üíé${itemSellPrice.toLocaleString()}/c√°i (t·ªïng: ${totalValue.toLocaleString()})`;
      }
      inventoryText += `\n`;
    });

    const totalInventoryValue = player.inventory.reduce((sum, item) => {
      const quantity = item.quantity || 1;
      return sum + (item.sellPrice || 0) * quantity;
    }, 0);
    
    inventoryText += `\nüí° Reply s·ªë th·ª© t·ª± ƒë·ªÉ s·ª≠ d·ª•ng (ƒëan d∆∞·ª£c) ho·∫∑c b√°n v·∫≠t ph·∫©m`;
    inventoryText += `\nüíä D√πng nhi·ªÅu ƒëan d∆∞·ª£c: Reply "1 2 3" (s·ª≠ d·ª•ng ƒëan d∆∞·ª£c s·ªë 1, 2, 3)`;
    inventoryText += `\nüí∞ B√°n theo s·ªë l∆∞·ª£ng: Reply "1 3" (b√°n 3 v·∫≠t ph·∫©m lo·∫°i s·ªë 1)`;
    inventoryText += `\nüí∞ B√°n nhanh nhi·ªÅu v·∫≠t ph·∫©m: Reply "1-3" (b√°n t·ª´ v·∫≠t ph·∫©m 1 ƒë·∫øn 3)`;
    inventoryText += `\nüìä T·ªïng gi√° tr·ªã kho: ${totalInventoryValue.toLocaleString()} linh th·∫°ch`;
    inventoryText += `\nüí∞ Linh th·∫°ch hi·ªán c√≥: ${player.spiritStones.toLocaleString()}`;
    inventoryText += `\nüì¶ T·ªïng s·ªë v·∫≠t ph·∫©m: ${player.inventory.length} (${Object.keys(groupedItems).length} lo·∫°i)`;

    return api.sendMessage(inventoryText, event.threadID, (error, info) => {
      if (!error) {
        global.client.handleReply.push({
          name: this.config.name,
          messageID: info.messageID,
          author: userID,
          type: "inventory_action_grouped",
          data: sortedItems.map(([key, data]) => data)
        });
      }
    });
  }

  

  // Th√¥ng tin nh√¢n v·∫≠t
  if (choice === '7' || choice === 'th√¥ng tin' || choice === 'info' || choice === 'nh√¢n v·∫≠t') {
    try {
      console.log("[DEBUG] Direct command - Getting player stats");
      const playerStats = getPlayerStats(player);
      
      if (!playerStats || playerStats.length === 0) {
        console.log("[ERROR] playerStats is empty or undefined in direct command");
        return api.sendMessage("‚ùå L·ªói: Kh√¥ng th·ªÉ l·∫•y th√¥ng tin nh√¢n v·∫≠t!", event.threadID, event.messageID);
      }
      
      console.log("[DEBUG] Direct command - Sending player stats, length:", playerStats.length);
      return api.sendMessage(playerStats, event.threadID, event.messageID);
    } catch (error) {
      console.error("[ERROR] Direct command case 8 failed:", error);
      return api.sendMessage(`‚ùå L·ªói khi hi·ªÉn th·ªã th√¥ng tin nh√¢n v·∫≠t: ${error.message}`, event.threadID, event.messageID);
    }
  }

  // ƒê·ªô ki·∫øp
  if (choice === '4' || choice === 'ƒë·ªô ki·∫øp' || choice === 'ki·∫øp' || choice === 'tribulation') {
    if (isDaoCoreInjured(player)) {
      const timeLeft = getDaoCoreInjuryTimeLeft(player);
      return api.sendMessage(`üíÄ ƒê·∫°o c∆° ƒëang b·ªã th∆∞∆°ng! Kh√¥ng th·ªÉ ƒë·ªô ki·∫øp.\n‚è∞ C·∫ßn ch·ªù ${timeLeft} ph√∫t ho·∫∑c d√πng ƒëan d∆∞·ª£c ch·ªØa tr·ªã`, event.threadID, event.messageID);
    }

    if (!isReadyForTribulation(player)) {
      const currentStage = getCurrentStage(player.level);
      const currentPhase = getCurrentPhase(player.level);
      const currentDisplayLevel = getDisplayLevelName(player);
      const expToNext = getExpToLevel(player.level);
      const progressPercent = Math.floor((player.exp / expToNext) * 100);
      
      return api.sendMessage(
        `‚ö° TH√îNG TIN ƒê·ªò KI·∫æP:\n\n` +
        `üèÜ C·∫£nh gi·ªõi hi·ªán t·∫°i: ${currentDisplayLevel}\n` +
        `üìä Chi ti·∫øt: ${currentPhase} ${currentStage}\n` +
        `‚ö° Kinh nghi·ªám: ${player.exp.toLocaleString()}/${expToNext.toLocaleString()} (${progressPercent}%)\n\n` +
        `‚ùå Ch∆∞a ƒë·ªß ƒëi·ªÅu ki·ªán ƒë·ªô ki·∫øp!\n` +
        `üìã Y√™u c·∫ßu:\n` +
        `   ‚Ä¢ C·∫£nh gi·ªõi t·ª´ Tr√∫c C∆° tr·ªü l√™n\n` +
        `   ‚Ä¢ ƒê·∫°t Vi√™n M√£n (100% kinh nghi·ªám)\n\n` +
        `üí° H√£y tu luy·ªán th√™m ƒë·ªÉ ƒë·∫°t Vi√™n M√£n v√† chu·∫©n b·ªã cho l√¥i ki·∫øp!`,
        event.threadID, event.messageID
      );
    }

    const currentStage = getCurrentStage(player.level);
    const currentPhase = getCurrentPhase(player.level);
    const currentDisplayLevel = getDisplayLevelName(player);
    const nextStageIndex = Math.floor((player.level + 1) / 4);
    const nextStageName = STAGES[nextStageIndex] || STAGES[STAGES.length - 1];
    const nextDisplayLevel = `${nextStageName} S∆° K·ª≥`;
    
    let confirmText = `‚ö° ƒê·ªò KI·∫æP ${currentStage.toUpperCase()}:\n\n`;
    confirmText += `üèÜ C·∫£nh gi·ªõi hi·ªán t·∫°i: ${currentDisplayLevel}\n`;
    confirmText += `üìä Chi ti·∫øt: ${currentPhase} ${currentStage} (Vi√™n M√£n)\n`;
    confirmText += `üéØ C·∫£nh gi·ªõi sau ƒë·ªô ki·∫øp: ${nextDisplayLevel}\n`;
    confirmText += `‚ö° Kinh nghi·ªám: ${player.exp.toLocaleString()}/${getExpToLevel(player.level).toLocaleString()} (100%)\n\n`;
    confirmText += `‚ö†Ô∏è C·∫¢NH B√ÅO:\n`;
    confirmText += `   ‚Ä¢ T·ª∑ l·ªá th√†nh c√¥ng: 50%\n`;
    confirmText += `   ‚Ä¢ Th·∫•t b·∫°i s·∫Ω l√†m t·ªïn th∆∞∆°ng ƒë·∫°o c∆° (30 ph√∫t)\n`;
    confirmText += `   ‚Ä¢ C·∫ßn ƒëan d∆∞·ª£c t·ª´ linh kh√≠ tr·ªü l√™n ƒë·ªÉ ch·ªØa\n\n`;
    confirmText += `1. ‚ö° B·∫Øt ƒë·∫ßu ƒë·ªô ki·∫øp\n`;
    confirmText += `2. ‚ùå H·ªßy b·ªè\n\n`;
    confirmText += `üí° Reply s·ªë th·ª© t·ª± ƒë·ªÉ ch·ªçn`;

    return api.sendMessage(confirmText, event.threadID, (error, info) => {
      if (!error) {
        global.client.handleReply.push({
          name: this.config.name,
          messageID: info.messageID,
          author: userID,
          type: "tribulation_confirm"
        });
      }
    });
  }

  // Tu luy·ªán b·∫±ng linh th·∫°ch
  if (choice === '5' || choice === 'tu luy·ªán' || choice === 'tu') {
    const recommendedCost = getSpiritStoneCultivationCost(player.level);
    let cultivateText = `üßò TU LUY·ªÜN B·∫∞NG LINH TH·∫†CH:\n\n`;
    
    if (player.spiritRoot) {
      const spiritIcon = getSpiritRootIcon(player.spiritRoot.grade);
      cultivateText += `${spiritIcon} Linh cƒÉn: ${player.spiritRoot.grade}\n`;
      cultivateText += `‚ö° H·ªá s·ªë tu luy·ªán: x${player.spiritRoot.multiplier}\n\n`;
    }
    
    cultivateText += `üìä TR·∫†NG TH√ÅI HI·ªÜN T·∫†I:\n`;
    cultivateText += `üèÜ C·∫£nh gi·ªõi: ${getDisplayLevelName(player)}\n`;
    cultivateText += `‚ö° Kinh nghi·ªám: ${player.exp}/${getExpToLevel(player.level)}\n`;
    cultivateText += `üíé Linh th·∫°ch: ${player.spiritStones.toLocaleString()}\n\n`;
    
    cultivateText += `üí∞ CHI PH√ç TU LUY·ªÜN:\n`;
    cultivateText += `‚Ä¢ 1 linh th·∫°ch = 1 kinh nghi·ªám c∆° b·∫£n\n`;
    if (player.spiritRoot?.multiplier > 1.0) {
      cultivateText += `‚Ä¢ V·ªõi linh cƒÉn c·ªßa b·∫°n: 1 linh th·∫°ch = ${player.spiritRoot.multiplier} kinh nghi·ªám\n`;
    }
    cultivateText += `‚Ä¢ Khuy·∫øn ngh·ªã cho c·∫£nh gi·ªõi hi·ªán t·∫°i: ${recommendedCost.toLocaleString()} linh th·∫°ch\n\n`;
    
    cultivateText += `üìã C√ÅCH S·ª¨ D·ª§NG:\n`;
    cultivateText += `1. üíé Tu luy·ªán 100 linh th·∫°ch\n`;
    cultivateText += `2. üíé Tu luy·ªán 500 linh th·∫°ch\n`;
    cultivateText += `3. üíé Tu luy·ªán 1,000 linh th·∫°ch\n`;
    cultivateText += `4. üíé Tu luy·ªán ${recommendedCost.toLocaleString()} linh th·∫°ch (khuy·∫øn ngh·ªã)\n`;
    cultivateText += `5. üéØ T·ª± nh·∫≠p s·ªë l∆∞·ª£ng\n\n`;
    cultivateText += `üí° Reply s·ªë th·ª© t·ª± ho·∫∑c d√πng: .tu tu [s·ªë linh th·∫°ch]`;
    
    if (isDaoCoreInjured(player)) {
      cultivateText += `\n‚ö†Ô∏è ƒê·∫°o c∆° b·ªã th∆∞∆°ng - kh√¥ng th·ªÉ tu luy·ªán!`;
    } else if (isPlayerInjured(player)) {
      cultivateText += `\n‚ö†Ô∏è ƒêang b·ªã th∆∞∆°ng - kh√¥ng th·ªÉ tu luy·ªán!`;
    }
    
    return api.sendMessage(cultivateText, event.threadID, (error, info) => {
      if (!error) {
        global.client.handleReply.push({
          name: this.config.name,
          messageID: info.messageID,
          author: userID,
          type: "cultivation_menu",
          data: { recommendedCost }
        });
      }
    });
  }

  // Xem chi ti·∫øt c√¥ng th·ª©c luy·ªán ƒëan
  if (choice === 'detail' && args[1]) {
    const recipeIndex = parseInt(args[1]) - 1;
    const recipes = getAlchemyRecipes();
    
    if (recipeIndex >= 0 && recipeIndex < recipes.length) {
      const recipe = recipes[recipeIndex];
      const gradeIcon = getGradeIcon(recipe.grade);
      
      let detailText = `üß™ CHI TI·∫æT C√îNG TH·ª®C:\n\n`;
      detailText += `${gradeIcon} ${recipe.name}\n`;
      detailText += `üìã ${recipe.description}\n`;
      detailText += `üíé Chi ph√≠: ${recipe.spiritStones} linh th·∫°ch\n`;
      detailText += `üìä Y√™u c·∫ßu level: ${recipe.minLevel}\n`;
      detailText += `‚öóÔ∏è T·ª∑ l·ªá th√†nh c√¥ng: 85%\n`;
      detailText += `üß∞ Nguy√™n li·ªáu c·∫ßn thi·∫øt:\n`;
      recipe.materials.forEach((mat, index) => {
        detailText += `   ‚Ä¢ ${mat.name} x${mat.quantity}\n`;
      });
      
      // Ki·ªÉm tra ƒëi·ªÅu ki·ªán
      const canCraft = canCraftPotion(player, recipe);
      if (canCraft.canCraft) {
        detailText += `\n‚úÖ C√≥ th·ªÉ luy·ªán ƒëan`;
      } else {
        detailText += `\n‚ùå ${canCraft.reason}`;
      }
      
      return api.sendMessage(detailText, event.threadID, event.messageID);
    } else {
      return api.sendMessage("‚ùå S·ªë c√¥ng th·ª©c kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
    }
  }

  // Tu luy·ªán v·ªõi s·ªë l∆∞·ª£ng c·ª• th·ªÉ
  if (choice === 'tu' && args[1]) {
    const amount = parseInt(args[1]);
    if (isNaN(amount) || amount <= 0) {
      return api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p s·ªë linh th·∫°ch h·ª£p l·ªá!\nV√≠ d·ª•: .tu tu 1000", event.threadID, event.messageID);
    }
    
    const result = cultivateWithSpiritStones(player, amount);
    
    if (!result.success) {
      let errorMsg = `‚ùå TU LUY·ªÜN TH·∫§T B·∫†I!\n\n`;
      errorMsg += `üìù L√Ω do: ${result.reason}\n`;
      
      if (result.reason.includes("Kh√¥ng ƒë·ªß linh th·∫°ch")) {
        errorMsg += `üíé Linh th·∫°ch hi·ªán c√≥: ${player.spiritStones.toLocaleString()}\n`;
        errorMsg += `üíé C·∫ßn: ${amount.toLocaleString()}\n`;
        errorMsg += `üíé Thi·∫øu: ${(amount - player.spiritStones).toLocaleString()}`;
      }
      
      return api.sendMessage(errorMsg, event.threadID, event.messageID);
    }
    
    savePlayer(userID, player);
    
    let successMsg = `‚úÖ TU LUY·ªÜN TH√ÄNH C√îNG!\n\n`;
    successMsg += `üíé ƒê√£ s·ª≠ d·ª•ng: ${amount.toLocaleString()} linh th·∫°ch\n`;
    successMsg += `‚ö° Kinh nghi·ªám nh·∫≠n ƒë∆∞·ª£c: ${result.finalExp.toLocaleString()}`;
    
    if (result.spiritRootBonus) {
      successMsg += ` (Bonus linh cƒÉn x${player.spiritRoot.multiplier})`;
    }
    successMsg += `\n`;
    
    if (result.levelUp) {
      successMsg += `üéâ LEVEL UP! L√™n c·∫£nh gi·ªõi ${getLevelName(result.newLevel)}!\n`;
    }
    
    successMsg += `\nüìä TR·∫†NG TH√ÅI SAU TU LUY·ªÜN:\n`;
    successMsg += `üèÜ C·∫£nh gi·ªõi: ${getDisplayLevelName(player)}\n`;
    successMsg += `‚ö° Kinh nghi·ªám: ${player.exp}/${getExpToLevel(player.level)}\n`;
    successMsg += `üíé Linh th·∫°ch c√≤n l·∫°i: ${player.spiritStones.toLocaleString()}\n`;
    
    if (isReadyForTribulation(player)) {
      successMsg += `‚ö° ƒê√£ s·∫µn s√†ng ƒë·ªô ki·∫øp!`;
    }
    
    return api.sendMessage(successMsg, event.threadID, event.messageID);
  }

  // Luy·ªán kh√≠ v·ªõi v≈© kh√≠ c·ª• th·ªÉ
  if (choice === 'luyenkhi' && args[1] && args[2]) {
    const weaponIndex = parseInt(args[1]) - 1;
    const spiritAmount = parseInt(args[2]);
    
    if (isNaN(weaponIndex) || isNaN(spiritAmount) || spiritAmount <= 0) {
      return api.sendMessage("‚ùå C√∫ ph√°p kh√¥ng ƒë√∫ng!\nV√≠ d·ª•: .tu luyenkhi 1 500\n(luy·ªán kh√≠ v≈© kh√≠ s·ªë 1 v·ªõi 500 linh th·∫°ch)", event.threadID, event.messageID);
    }
    
    const result = upgradeWeapon(player, weaponIndex, spiritAmount);
    
    if (!result.success) {
      let errorMsg = `‚ùå LUY·ªÜN KH√ç TH·∫§T B·∫†I!\n\n`;
      errorMsg += `üìù L√Ω do: ${result.reason}\n`;
      
      if (result.failed) {
        errorMsg += `üíî ƒê√£ m·∫•t ${result.lostSpiritStones} linh th·∫°ch do th·∫•t b·∫°i\n`;
        errorMsg += `üíé Linh th·∫°ch c√≤n l·∫°i: ${player.spiritStones.toLocaleString()}\n`;
        errorMsg += `üí° H√£y th·ª≠ l·∫°i v·ªõi may m·∫Øn h∆°n!`;
      }
      
      savePlayer(userID, player);
      return api.sendMessage(errorMsg, event.threadID, event.messageID);
    }
    
    savePlayer(userID, player);
    
    let successMsg = `üî• LUY·ªÜN KH√ç TH√ÄNH C√îNG!\n\n`;
    successMsg += `‚öîÔ∏è V≈© kh√≠: ${result.weaponName}\n`;
    successMsg += `üìà Level: ${result.newLevel - 1} ‚Üí ${result.newLevel}\n`;
    successMsg += `üí• S√°t th∆∞∆°ng: ${result.oldAttack} ‚Üí ${result.newAttack}\n`;
    successMsg += `üíé ƒê√£ s·ª≠ d·ª•ng: ${spiritAmount.toLocaleString()} linh th·∫°ch\n`;
    successMsg += `üí∞ Linh th·∫°ch c√≤n l·∫°i: ${player.spiritStones.toLocaleString()}\n\n`;
    successMsg += `üéâ V≈© kh√≠ c·ªßa b·∫°n ƒë√£ m·∫°nh h∆°n!`;
    
    return api.sendMessage(successMsg, event.threadID, event.messageID);
  }

  // Luy·ªán kh√≠ menu
  if (choice === '6' || choice === 'luyenkhi' || choice === 'luy·ªán kh√≠') {
    const weaponsForUpgrade = player.inventory.filter(item => item.type === "v≈© kh√≠" && canUseWeapon(player, item));
    
    if (weaponsForUpgrade.length === 0) {
      return api.sendMessage("‚öîÔ∏è B·∫°n kh√¥ng c√≥ v≈© kh√≠ n√†o ƒë·ªÉ luy·ªán kh√≠!\nüí° H√£y ƒë√°nh qu√°i ƒë·ªÉ t√¨m v≈© kh√≠ ho·∫∑c s·ª≠ d·ª•ng v≈© kh√≠ ban ƒë·∫ßu.", event.threadID, event.messageID);
    }
    
    let weaponUpgradeText = `üî• LUY·ªÜN KH√ç - N√ÇNG C·∫§P V≈® KH√ç:\n\n`;
    weaponUpgradeText += `üìä CHI PH√ç N√ÇNG C·∫§P:\n`;
    weaponUpgradeText += `Level 0‚Üí1: 100 linh th·∫°ch (80% th√†nh c√¥ng)\n`;
    weaponUpgradeText += `Level 1‚Üí2: 200 linh th·∫°ch (75% th√†nh c√¥ng)\n`;
    weaponUpgradeText += `Level 2‚Üí3: 400 linh th·∫°ch (70% th√†nh c√¥ng)\n`;
    weaponUpgradeText += `...\n`;
    weaponUpgradeText += `Level 9‚Üí10: 51,200 linh th·∫°ch (10% th√†nh c√¥ng)\n\n`;
    weaponUpgradeText += `‚ö° HI·ªÜU QU·∫¢: +15% s√°t th∆∞∆°ng m·ªói level\n\n`;
    
    weaponUpgradeText += `üó°Ô∏è V≈® KH√ç C√ì TH·ªÇ N√ÇNG C·∫§P:\n`;
    weaponsForUpgrade.forEach((weapon, index) => {
      const gradeIcon = getGradeIcon(weapon.grade);
      const level = weapon.level || 0;
      const upgradeCosts = [100, 200, 400, 800, 1600, 3200, 6400, 12800, 25600, 51200];
      const nextCost = level < 10 ? upgradeCosts[level] : "MAX";
      
      weaponUpgradeText += `${index + 1}. ${gradeIcon} ${weapon.name}\n`;
      weaponUpgradeText += `   üí• S√°t th∆∞∆°ng: ${weapon.attack} | Level: ${level}/10\n`;
      if (level < 10) {
        weaponUpgradeText += `   üíé Chi ph√≠ n√¢ng c·∫•p: ${nextCost} linh th·∫°ch\n`;
      } else {
        weaponUpgradeText += `   ‚úÖ ƒê√£ ƒë·∫°t c·∫•p t·ªëi ƒëa\n`;
      }
      weaponUpgradeText += `\n`;
    });
    
    weaponUpgradeText += `üíé Linh th·∫°ch hi·ªán c√≥: ${player.spiritStones.toLocaleString()}\n`;
    weaponUpgradeText += `üí° Reply s·ªë th·ª© t·ª± v≈© kh√≠ ƒë·ªÉ luy·ªán kh√≠\n`;
    weaponUpgradeText += `üí° Ho·∫∑c d√πng: .tu luyenkhi [s·ªë v≈© kh√≠] [s·ªë linh th·∫°ch]`;
    
    return api.sendMessage(weaponUpgradeText, event.threadID, (error, info) => {
      if (!error) {
        global.client.handleReply.push({
          name: this.config.name,
          messageID: info.messageID,
          author: userID,
          type: "weapon_upgrade_menu",
          data: weaponsForUpgrade
        });
      }
    });
  }

  return api.sendMessage("‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. G√µ `.tu` ƒë·ªÉ xem menu ho·∫∑c `.tu help` ƒë·ªÉ xem chi ti·∫øt.", event.threadID, event.messageID);
};

module.exports.handleReply = async ({ event, api, handleReply }) => {
  const userID = event.senderID;
  const choice = event.body.trim();

  if (userID !== handleReply.author) {
    return api.sendMessage("‚ö†Ô∏è B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng menu n√†y!", event.threadID, event.messageID);
  }

  // X·ª≠ l√Ω t·∫°o nh√¢n v·∫≠t
  if (handleReply.type === "create_character") {
    const weaponTypes = getWeaponTypes();
    const selectedType = parseInt(choice);
    
    if (selectedType >= 1 && selectedType <= weaponTypes.length) {
      const chosenType = weaponTypes[selectedType - 1];
      
      // Y√™u c·∫ßu nh·∫≠p t√™n nh√¢n v·∫≠t
      let nameText = `üé≠ ƒê·∫∂T T√äN NH√ÇN V·∫¨T:\n\n`;
      nameText += `B·∫°n ƒë√£ ch·ªçn: ${chosenType.name}\n`;
      nameText += `üó°Ô∏è ${chosenType.description}\n\n`;
      nameText += `üìù Vui l√≤ng nh·∫≠p t√™n cho nh√¢n v·∫≠t c·ªßa b·∫°n:\n`;
      nameText += `üí° T√™n kh√¥ng ƒë∆∞·ª£c ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát v√† t·ªëi ƒëa 20 k√Ω t·ª±`;
      
      return api.sendMessage(nameText, event.threadID, (error, info) => {
        if (!error) {
          global.client.handleReply.push({
            name: this.config.name,
            messageID: info.messageID,
            author: userID,
            type: "input_character_name",
            data: chosenType
          });
        }
      });
    } else {
      return api.sendMessage("‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng ch·ªçn t·ª´ 1-4.", event.threadID, event.messageID);
    }
  }

  // X·ª≠ l√Ω nh·∫≠p t√™n nh√¢n v·∫≠t
  if (handleReply.type === "input_character_name") {
    const chosenType = handleReply.data;
    let characterName = choice.trim();
    
    // Ki·ªÉm tra t√™n h·ª£p l·ªá
    if (!characterName || characterName.length > 20 || !/^[a-zA-Z√Ä-·ªπ0-9\s]+$/.test(characterName)) {
      return api.sendMessage("‚ùå T√™n kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p t√™n ch·ªâ g·ªìm ch·ªØ c√°i, s·ªë v√† kho·∫£ng tr·∫Øng, t·ªëi ƒëa 20 k√Ω t·ª±.", event.threadID, event.messageID);
    }
    
    // Ki·ªÉm tra t√™n ƒë√£ t·ªìn t·∫°i
    if (checkCharacterNameExists(characterName)) {
      return api.sendMessage(`‚ùå T√™n nh√¢n v·∫≠t "${characterName}" ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi ng∆∞·ªùi ch∆°i kh√°c!\nüí° Vui l√≤ng ch·ªçn t√™n kh√°c cho nh√¢n v·∫≠t c·ªßa b·∫°n.`, event.threadID, event.messageID);
    }
    
    // Hi·ªÉn th·ªã th√¥ng b√°o v·ªÅ vi·ªác ki·ªÉm tra linh cƒÉn
    let spiritCheckMsg = `üé≠ T·∫†O NH√ÇN V·∫¨T: ${characterName}\n\n`;
    spiritCheckMsg += `üéØ Lo·∫°i nh√¢n v·∫≠t: ${chosenType.name}\n`;
    spiritCheckMsg += `üó°Ô∏è ${chosenType.description}\n\n`;
    spiritCheckMsg += `üîÆ KI·ªÇM TRA LINH CƒÇN:\n`;
    spiritCheckMsg += `Linh cƒÉn quy·∫øt ƒë·ªãnh t·ªëc ƒë·ªô tu luy·ªán c·ªßa b·∫°n:\n`;
    spiritCheckMsg += `‚Ä¢ H·∫° ph·∫©m linh cƒÉn (60%): Tu luy·ªán b√¨nh th∆∞·ªùng\n`;
    spiritCheckMsg += `‚Ä¢ Trung ph·∫©m linh cƒÉn (30%): +30% t·ªëc ƒë·ªô tu luy·ªán\n`;
    spiritCheckMsg += `‚Ä¢ Th∆∞·ª£ng ph·∫©m linh cƒÉn (10%): +60% t·ªëc ƒë·ªô tu luy·ªán\n\n`;
    spiritCheckMsg += `1. üîÆ B·∫Øt ƒë·∫ßu ki·ªÉm tra linh cƒÉn\n`;
    spiritCheckMsg += `2. ‚è≠Ô∏è B·ªè qua (t·ª± ƒë·ªông nh·∫≠n H·∫° ph·∫©m linh cƒÉn)\n\n`;
    spiritCheckMsg += `üí° Reply s·ªë th·ª© t·ª± ƒë·ªÉ ch·ªçn`;
    
    return api.sendMessage(spiritCheckMsg, event.threadID, (error, info) => {
      if (!error) {
        global.client.handleReply.push({
          name: this.config.name,
          messageID: info.messageID,
          author: userID,
          type: "spirit_root_check",
          data: { characterName, chosenType }
        });
      }
    });
  }

  // X·ª≠ l√Ω ki·ªÉm tra linh cƒÉn
  if (handleReply.type === "spirit_root_check") {
    const { characterName, chosenType } = handleReply.data;
    const checkChoice = parseInt(choice);
    
    let spiritRoot;
    let checkMessage = "";
    
    if (checkChoice === 1) {
      // Ki·ªÉm tra linh cƒÉn
      spiritRoot = generateSpiritRoot();
      checkMessage = `üîÆ KI·ªÇM TRA LINH CƒÇN HO√ÄN T·∫§T!\n\n`;
      checkMessage += `‚ú® K·∫øt qu·∫£ ki·ªÉm tra...\n`;
      checkMessage += `üåü Linh cƒÉn c·ªßa ${characterName}: ${spiritRoot.grade}!\n`;
      checkMessage += `‚ö° H·ªá s·ªë tu luy·ªán: x${spiritRoot.multiplier}\n`;
      checkMessage += `üìã ${spiritRoot.description}\n\n`;
    } else if (checkChoice === 2) {
      // B·ªè qua - t·ª± ƒë·ªông nh·∫≠n H·∫° ph·∫©m linh cƒÉn
      spiritRoot = {
        grade: "H·∫° ph·∫©m linh cƒÉn",
        multiplier: 1.0,
        description: "Linh cƒÉn t·∫ßm th∆∞·ªùng, tu luy·ªán v·ªõi t·ªëc ƒë·ªô b√¨nh th∆∞·ªùng"
      };
      checkMessage = `‚è≠Ô∏è ƒê√É B·ªé QUA KI·ªÇM TRA!\n\n`;
      checkMessage += `üü´ T·ª± ƒë·ªông nh·∫≠n: ${spiritRoot.grade}\n`;
      checkMessage += `‚ö° H·ªá s·ªë tu luy·ªán: x${spiritRoot.multiplier}\n`;
      checkMessage += `üìã ${spiritRoot.description}\n\n`;
    } else {
      return api.sendMessage("‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng ch·ªçn 1 ho·∫∑c 2.", event.threadID, event.messageID);
    }
    
    // T·∫°o nh√¢n v·∫≠t m·ªõi v·ªõi linh cƒÉn ƒë√£ ch·ªçn
    const characterData = {
      name: characterName,
      weaponType: chosenType.weaponType
    };
    
    const newPlayer = createNewPlayerWithSpiritRoot(userID, characterData, spiritRoot);
    
    let welcomeMsg = checkMessage;
    welcomeMsg += `üéâ T·∫†O NH√ÇN V·∫¨T TH√ÄNH C√îNG!\n\n`;
    welcomeMsg += `üë§ T√™n nh√¢n v·∫≠t: ${characterName}\n`;
    welcomeMsg += `üé≠ Lo·∫°i nh√¢n v·∫≠t: ${chosenType.name}\n`;
    welcomeMsg += `üó°Ô∏è Chuy√™n m√¥n: ${chosenType.description}\n`;
    
    const spiritIcon = getSpiritRootIcon(spiritRoot.grade);
    welcomeMsg += `${spiritIcon} Linh cƒÉn: ${spiritRoot.grade}\n`;
    welcomeMsg += `‚ö° H·ªá s·ªë tu luy·ªán: x${spiritRoot.multiplier}\n`;
    
    // Th√¥ng b√°o v≈© kh√≠ ban ƒë·∫ßu
    let weaponName = "";
    switch(chosenType.weaponType) {
      case "ki·∫øm": weaponName = "Ph√†m Kh√≠ Ki·∫øm"; break;
      case "ƒëao": weaponName = "Ph√†m Kh√≠ ƒêao"; break;
      case "th·ªÉ": weaponName = "Th·ªÉ Tu Quy·ªÅn Th·ªß"; break;
      default: weaponName = "Ph√†m Kh√≠ Ki·∫øm";
    }
    
    welcomeMsg += `üéÅ V≈© kh√≠ ban ƒë·∫ßu: ${weaponName}\n`;
    welcomeMsg += `üí∞ Ph·∫ßn th∆∞·ªüng t√¢n th·ªß: 5000 linh th·∫°ch\n\n`;
    welcomeMsg += `üìã H∆Ø·ªöNG D·∫™N:\n`;
    welcomeMsg += `1. ƒê√°nh qu√°i ƒë·ªÉ nh·∫≠n kinh nghi·ªám v√† t√¨m v≈© kh√≠ m·ªõi\n`;
    welcomeMsg += `2. Tu luy·ªán b·∫±ng linh th·∫°ch ƒë·ªÉ tƒÉng kinh nghi·ªám\n`;
    welcomeMsg += `3. Luy·ªán kh√≠ ƒë·ªÉ n√¢ng c·∫•p v≈© kh√≠ (kh√¥ng b√°n v≈© kh√≠ n·ªØa)\n`;
    welcomeMsg += `4. S·ª≠ d·ª•ng l·ªánh .tu ƒë·ªÉ b·∫Øt ƒë·∫ßu cu·ªôc h√†nh tr√¨nh tu ti√™n\n\n`;
    welcomeMsg += `üåü Ch√∫c ${characterName} tu ti√™n th√†nh c√¥ng!`;
    
    return api.sendMessage(welcomeMsg, event.threadID, event.messageID);
  }

  let player = loadPlayer(userID);
  if (!player) {
    return api.sendMessage("‚ùå L·ªói: Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ng∆∞·ªùi ch∆°i!", event.threadID, event.messageID);
  }

  if (handleReply.type === "alchemy_main") {
    const alchemyChoice = parseInt(choice);
    if (alchemyChoice === 1) {
      // Linh th·∫£o - c·ª≠a h√†ng b√°n v·∫≠t li·ªáu luy·ªán ƒëan
      const materials = loadData(path.join(DATA_DIR, 'materials.json')) || [];
      
      let shopText = `üåø LINH TH·∫¢O - C·ª¨A H√ÄNG V·∫¨T LI·ªÜU:\n\n`;
      
      // Nh√≥m v·∫≠t li·ªáu theo c·∫•p ƒë·ªô y√™u th√∫
      const materialsByLevel = {
        "Ph√†m Th√∫": materials.filter(m => m.beastLevel === "Ph√†m Th√∫"),
        "Y√™u Th√∫": materials.filter(m => m.beastLevel === "Y√™u Th√∫"),
        "Linh Th√∫": materials.filter(m => m.beastLevel === "Linh Th√∫"),
        "Th√°nh Th√∫": materials.filter(m => m.beastLevel === "Th√°nh Th√∫"),
        "Y√™u V∆∞∆°ng": materials.filter(m => m.beastLevel === "Y√™u V∆∞∆°ng"),
        "Y√™u ƒê·∫ø": materials.filter(m => m.beastLevel === "Y√™u ƒê·∫ø"),
        "Th·∫ßn Th√∫": materials.filter(m => m.beastLevel === "Th·∫ßn Th√∫")
      };
      
      let itemIndex = 0;
      Object.entries(materialsByLevel).forEach(([level, mats]) => {
        if (mats.length > 0) {
          const levelIcon = getBeastLevelIcon(level);
          shopText += `\n${levelIcon} ${level}:\n`;
          mats.forEach(mat => {
            itemIndex++;
            const gradeIcon = getGradeFromRarity(mat.rarity) === "ph√†m kh√≠" ? "üü´" :
                             getGradeFromRarity(mat.rarity) === "ph√°p kh√≠" ? "üü¶" :
                             getGradeFromRarity(mat.rarity) === "linh kh√≠" ? "üü™" :
                             getGradeFromRarity(mat.rarity) === "linh b·∫£o" ? "üü®" : "üü•";
            const sellPrice = (mat.value || 10) * 3; // Gi√° b√°n = value * 3
            const price = sellPrice + 50; // Gi√° mua = gi√° b√°n + 50 linh th·∫°ch
            shopText += `${itemIndex}. ${gradeIcon} ${mat.name} - üíé${price}\n`;
            shopText += `   üìã ${mat.description}\n`;
          });
        }
      });
      
      shopText += `\nüíé Linh th·∫°ch hi·ªán c√≥: ${player.spiritStones.toLocaleString()}`;
      shopText += `\nüí° Reply s·ªë th·ª© t·ª± ƒë·ªÉ mua v·∫≠t li·ªáu`;
      shopText += `\nüß™ V·∫≠t li·ªáu d√πng ƒë·ªÉ luy·ªán ƒëan d∆∞·ª£c`;
      
      // T·∫°o danh s√°ch v·∫≠t li·ªáu ph·∫≥ng ƒë·ªÉ x·ª≠ l√Ω reply
      const flatMaterials = [];
      Object.values(materialsByLevel).forEach(mats => {
        flatMaterials.push(...mats);
      });
      
      return api.sendMessage(shopText, event.threadID, (error, info) => {
        if (!error) {
          global.client.handleReply.push({
            name: "tu",
            messageID: info.messageID,
            author: userID,
            type: "buy_material",
            data: flatMaterials
          });
        }
      });
    } else if (alchemyChoice === 2) {
      // Luy·ªán ƒëan
      const recipes = getAlchemyRecipes();
      let craftText = `üß™ LUY·ªÜN ƒêAN - DANH S√ÅCH C√îNG TH·ª®C:\n\n`;
      
      recipes.forEach((recipe, i) => {
        const gradeIcon = getGradeIcon(recipe.grade);
        craftText += `${i + 1}. ${gradeIcon} ${recipe.name}\n`;
      });
      
      craftText += `\nüí° C√ÅCH S·ª¨ D·ª§NG:\n`;
      craftText += `‚Ä¢ Reply s·ªë th·ª© t·ª± ƒë·ªÉ luy·ªán 1 l·∫ßn\n`;
      craftText += `‚Ä¢ Reply "s·ªë th·ª© t·ª± s·ªë l∆∞·ª£ng" ƒë·ªÉ luy·ªán nhi·ªÅu l·∫ßn\n`;
      craftText += `‚Ä¢ V√≠ d·ª•: "1 5" = luy·ªán c√¥ng th·ª©c 1 v·ªõi 5 l·∫ßn\n`;
      craftText += `‚Ä¢ Gi·ªõi h·∫°n: t·ªëi ƒëa 100 l·∫ßn/l∆∞·ª£t\n\n`;
      craftText += `üí∞ Linh th·∫°ch hi·ªán c√≥: ${player.spiritStones.toLocaleString()}\n`;
      craftText += `üìñ D√πng ".tu detail [s·ªë]" ƒë·ªÉ xem chi ti·∫øt c√¥ng th·ª©c`;
      
      return api.sendMessage(craftText, event.threadID, (error, info) => {
        if (!error) {
          global.client.handleReply.push({
            name: "tu",
            messageID: info.messageID,
            author: userID,
            type: "craft_potion",
            data: recipes
          });
        }
      });
    }
    return api.sendMessage("‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
  }

  if (handleReply.type === "main_menu") {
    // X·ª≠ l√Ω l·ª±a ch·ªçn t·ª´ menu ch√≠nh
    const menuChoice = parseInt(choice);

    switch (menuChoice) {
      case 1: // ƒê√°nh qu√°i
        // Ki·ªÉm tra c√≥ v≈© kh√≠ ph√π h·ª£p kh√¥ng
        if (!hasUsableWeapon(player)) {
          const weaponTypeName = {
            "ki·∫øm": "ki·∫øm",
            "ƒëao": "ƒëao", 
            "th∆∞∆°ng": "th∆∞∆°ng",
            "cung": "cung t√™n"
          };
          const requiredWeapon = weaponTypeName[player.weaponType] || "v≈© kh√≠";
          return api.sendMessage(`‚öîÔ∏è B·∫°n c·∫ßn c√≥ ${requiredWeapon} ƒë·ªÉ c√≥ th·ªÉ ƒë√°nh qu√°i!\nüí∞ H√£y mua ${requiredWeapon} ·ªü c·ª≠a h√†ng tr∆∞·ªõc khi sƒÉn qu√°i.\nüíé Linh th·∫°ch hi·ªán c√≥: ${player.spiritStones}`, event.threadID, event.messageID);
        }

        // Ki·ªÉm tra tr·∫°ng th√°i ƒë·∫°o c∆° b·ªã th∆∞∆°ng
        if (isDaoCoreInjured(player)) {
          const timeLeft = getDaoCoreInjuryTimeLeft(player);
          const recoveryTime = formatTime(new Date(player.daoCoreInjuredUntil));
          return api.sendMessage(`üíÄ ƒê·∫°o c∆° ƒëang b·ªã hao t·ªïn! Kh√¥ng th·ªÉ tu luy·ªán.\n‚è∞ Th·ªùi gian h·ªìi ph·ª•c: ${recoveryTime}\nüíä Ho·∫∑c d√πng ƒëan d∆∞·ª£c ch·ªØa ƒë·∫°o c∆° (Thi√™n T√¢m ƒêan, Ng≈© H√†nh Thi√™n ƒêan, C·ª≠u Chuy·ªÉn Ho√†n H·ªìn ƒêan)`, event.threadID, event.messageID);
        }

        // Ki·ªÉm tra tr·∫°ng th√°i b·ªã th∆∞∆°ng
        if (isPlayerInjured(player)) {
          const timeLeft = getInjuryTimeLeft(player);
          const recoveryTime = formatTime(new Date(player.injuredUntil));
          return api.sendMessage(`ü©∏ B·∫°n ƒëang b·ªã th∆∞∆°ng! C·∫ßn ch·ªù ${timeLeft} ph√∫t n·ªØa ƒë·ªÉ h·ªìi ph·ª•c ho·∫∑c d√πng ƒëan d∆∞·ª£c tr·ªã th∆∞∆°ng.\n‚è∞ Th·ªùi gian h·ªìi ph·ª•c: ${recoveryTime}`, event.threadID, event.messageID);
        }

        // Ki·ªÉm tra m√°u
        if (player.hp <= 0) {
          return api.sendMessage(`üíÄ B·∫°n ƒë√£ h·∫øt m√°u! C·∫ßn s·ª≠ d·ª•ng ƒëan d∆∞·ª£c ƒë·ªÉ h·ªìi ph·ª•c m√°u tr∆∞·ªõc khi ti·∫øp t·ª•c sƒÉn qu√°i.`, event.threadID, event.messageID);
        }

        // Ki·ªÉm tra m√°u d∆∞·ªõi 20% - kh√¥ng cho ph√©p ƒëi sƒÉn qu√°i
        const minHpPercent = 0.2; // 20%
        const minHpRequired = Math.floor(player.maxHp * minHpPercent);
        if (player.hp < minHpRequired) {
          const hpPercent = Math.floor((player.hp / player.maxHp) * 100);
          return api.sendMessage(`ü©∏ M√°u qu√° th·∫•p ƒë·ªÉ sƒÉn qu√°i! (${hpPercent}%)\n‚ù§Ô∏è M√°u hi·ªán t·∫°i: ${player.hp}/${player.maxHp}\nüíä C·∫ßn h·ªìi ph·ª•c m√°u l√™n √≠t nh·∫•t ${minHpRequired} (20%) ƒë·ªÉ c√≥ th·ªÉ ti·∫øp t·ª•c sƒÉn qu√°i.\nüí° S·ª≠ d·ª•ng ƒëan d∆∞·ª£c ƒë·ªÉ h·ªìi ph·ª•c m√°u tr∆∞·ªõc khi ƒëi sƒÉn qu√°i.`, event.threadID, event.messageID);
        }

        // Ki·ªÉm tra linh l·ª±c
        if (!canHunt(player)) {
          const recoveryTime = player.spiritPowerRecoveryTime ? formatTime(new Date(player.spiritPowerRecoveryTime)) : "ƒêang t√≠nh to√°n...";
          return api.sendMessage(`üåÄ Linh l·ª±c ƒë√£ ki·ªát! C·∫ßn ch·ªù ƒë·ªÉ h·ªìi ph·ª•c linh l·ª±c.\nüí´ Linh l·ª±c: ${player.spiritPower}/${player.maxSpiritPower}\n‚è∞ H·ªìi ph·ª•c v√†o: ${recoveryTime}\nüí° M·ªói 1 ph√∫t s·∫Ω h·ªìi ${GAME_CONFIG?.combat?.spiritPowerRecoveryAmount || 10} linh l·ª±c (10 ph√∫t h·ªìi ƒë·∫ßy)`, event.threadID, event.messageID);
        }

        // Ti√™u hao linh l·ª±c
        consumeSpiritPower(player);

        // Random qu√°i theo c·∫•p ƒë·ªô ng∆∞·ªùi ch∆°i
        const monster = getRandomMonster(player.level);
        const battleResult = calculateBattleResult(player, monster);

        if (battleResult.result === "win" || battleResult.result === "lucky_win" || battleResult.result === "easy_win") {
          // Th·∫Øng (b√¨nh th∆∞·ªùng, may m·∫Øn ho·∫∑c d·ªÖ d√†ng)
          player.hp = battleResult.playerHpLeft;
          const finalExp = gainExpWithBoost(player, monster.exp);
          logMonsterKill(player, monster.name);

          let msg = `‚öîÔ∏è CHI·∫æN TH·∫ÆNG${battleResult.isLucky ? ' MAY M·∫ÆN' : battleResult.isEasy ? ' √ÅP ƒê·∫¢O' : ''}!\n`;
          msg += `${getMonsterDisplayName(monster)} ƒë√£ b·ªã ti√™u di·ªát!\n`;
          msg += `üó°Ô∏è Chi·∫øn ƒë·∫•u ${battleResult.turns} l∆∞·ª£t\n`;
          msg += `üí• S√°t th∆∞∆°ng g√¢y ra: ${battleResult.damageDealt}\n`;
          
          if (battleResult.isLucky) {
            msg += `üçÄ Th·∫Øng m·ªôt c√°ch k·ª≥ di·ªáu tr∆∞·ªõc ƒë·ªëi th·ªß m·∫°nh h∆°n!\n`;
            msg += `‚ö†Ô∏è B·∫°n ƒë√£ b·ªã th∆∞∆°ng n·∫∑ng trong tr·∫≠n chi·∫øn!\n`;
          } else if (battleResult.isEasy) {
            msg += `üí™ √Åp ƒë·∫£o ho√†n to√†n! Y√™u th√∫ qu√° y·∫øu so v·ªõi s·ª©c m·∫°nh hi·ªán t·∫°i!\n`;
            msg += `üõ°Ô∏è Kh√¥ng h·ªÅ b·ªã th∆∞∆°ng trong tr·∫≠n chi·∫øn!\n`;
          }
          
          if (finalExp.gained > 0) {
            msg += `üìà Nh·∫≠n ƒë∆∞·ª£c ${finalExp.gained} kinh nghi·ªám`;
            if (hasExpBoost(player)) {
              msg += ` (x${player.expBoostMultiplier} buff)`;
            }
            if (finalExp.spiritRootBonus) {
              msg += ` (Bonus linh cƒÉn x${player.spiritRoot.multiplier})`;
            }
            msg += `\n`;
          } else {
            // Ki·ªÉm tra n·∫øu c√≥ th·ªÉ ƒë·ªô ki·∫øp
            if (isReadyForTribulation(player)) {
              msg += `‚ö° ƒê√£ ƒë·∫°t Vi√™n M√£n - Kh√¥ng th·ªÉ nh·∫≠n th√™m kinh nghi·ªám!\n`;
              msg += `üí° H√£y ƒë·ªô ki·∫øp ƒë·ªÉ l√™n c·∫£nh gi·ªõi m·ªõi!\n`;
            } else {
              msg += `‚ö° ƒê√£ ƒë·∫°t Vi√™n M√£n c·∫£nh gi·ªõi ${getCurrentStage(player.level)}!\n`;
              msg += `üí° Ti·∫øp t·ª•c tu luy·ªán ƒë·ªÉ n√¢ng cao s·ª©c m·∫°nh!\n`;
            }
          }
          
          // Ki·ªÉm tra n·∫øu c√≥ th·ªÉ ƒë·ªô ki·∫øp
          if (isReadyForTribulation(player)) {
            msg += `‚ö° ƒê√£ s·∫µn s√†ng ƒë·ªô ki·∫øp! D√πng l·ªánh .tu 9\n`;
          }
          msg += `\n`;

          const drop = dropEquipment(monster);
          if (drop) {
            addEquipment(player, drop);
            const gradeIcon = getGradeIcon(drop.grade);
            const rarityIcon = getRarityIcon(drop.rarity);

            msg += `üéÅ PH·∫¶N TH∆Ø·ªûNG: ${gradeIcon}${rarityIcon} ${drop.name}\n`;
            if (player.settings?.autoSell) {
              msg += `   üí∞ T·ª± ƒë·ªông b√°n: +${drop.sellPrice} linh th·∫°ch\n`;
            } else {
              msg += `   üíé Gi√° tr·ªã: ${drop.sellPrice} linh th·∫°ch\n`;
            }
            msg += `   üß∞ V·∫≠t li·ªáu luy·ªán ƒëan\n`;
          } else {
            msg += `üí® Kh√¥ng c√≥ chi·∫øn l·ª£i ph·∫©m...\n`;
          }

          msg += `\nüìä TR·∫†NG TH√ÅI:\n`;
          msg += `üèÜ C·∫£nh gi·ªõi: ${getDisplayLevelName(player)}\n`;
          msg += `‚ö° Kinh nghi·ªám: ${player.exp}/${getExpToLevel(player.level)}\n`;
          msg += `‚ù§Ô∏è M√°u: ${player.hp}/${player.maxHp}\n`;
          msg += `üí´ Linh l·ª±c: ${player.spiritPower}/${player.maxSpiritPower}\n`;
          msg += `üíé Linh th·∫°ch: ${player.spiritStones.toLocaleString()}\n`;

          // Hi·ªÉn th·ªã tr·∫°ng th√°i buff
          if (hasExpBoost(player)) {
            const boostTimeLeft = Math.ceil((new Date(player.expBoostUntil) - new Date()) / 60000);
            msg += `‚ö° Buff kinh nghi·ªám: x${player.expBoostMultiplier} (${boostTimeLeft}p)\n`;
          }
          if (hasInjuryImmunity(player)) {
            const immunityTimeLeft = Math.ceil((new Date(player.immunityUntil) - new Date()) / 60000);
            msg += `üõ°Ô∏è Mi·ªÖn nhi·ªÖm: ${immunityTimeLeft}p\n`;
          }

          msg += `\nüïê ${formatTime(new Date())}`;
          savePlayer(userID, player);
          return api.sendMessage(msg, event.threadID, event.messageID);
        } else if (battleResult.result === "escape") {
          // Ch·∫°y tr·ªën th√†nh c√¥ng nh∆∞ng b·ªã h·∫≠u qu·∫£
          
          // C·∫°n ki·ªát linh kh√≠ (ch·ªâ c√≤n 10% ho·∫∑c t·ªëi thi·ªÉu 1 ƒëi·ªÉm)
          player.spiritPower = Math.max(1, Math.floor(player.spiritPower * 0.1));
          
          // B·ªã th∆∞∆°ng nh·∫π (m·∫•t 30% m√°u)
          const healthLoss = Math.floor(player.maxHp * 0.3);
          player.hp = Math.max(1, player.hp - healthLoss);
          
          // B·ªã th∆∞∆°ng nh·∫π trong 5 ph√∫t (n·∫øu kh√¥ng c√≥ mi·ªÖn nhi·ªÖm)
          if (!hasInjuryImmunity(player)) {
            const injuredTime = new Date();
            injuredTime.setMinutes(injuredTime.getMinutes() + 5); // 5 ph√∫t b·ªã th∆∞∆°ng nh·∫π
            player.injuredUntil = injuredTime.toISOString();
          }
          
          let msg = `üí® CH·∫†Y TR·ªêN TH√ÄNH C√îNG!\n`;
          msg += `B·∫°n ƒë√£ k·ªãp th·ªùi tho√°t kh·ªèi ${getMonsterDisplayName(monster)}!\n`;
          msg += `üèÉ‚Äç‚ôÇÔ∏è May m·∫Øn tho√°t ƒë∆∞·ª£c m·ªôt tai h·ªça l·ªõn!\n\n`;
          msg += `‚ö†Ô∏è H·∫¨U QU·∫¢ C·ª¶A VI·ªÜC CH·∫†Y TR·ªêN:\n`;
          msg += `üíî M·∫•t ${healthLoss} m√°u do ho·∫£ng lo·∫°n\n`;
          msg += `üí´ Linh kh√≠ c·∫°n ki·ªát do s·ª≠ d·ª•ng th·∫ßn th·ª©c ch·∫°y tr·ªën\n`;
          
          if (!hasInjuryImmunity(player)) {
            const recoveryTime = formatTime(new Date(player.injuredUntil));
            msg += `ü©∏ B·ªã th∆∞∆°ng nh·∫π (5 ph√∫t): ${recoveryTime}\n`;
          } else {
            msg += `üõ°Ô∏è Mi·ªÖn nhi·ªÖm b·ªã th∆∞∆°ng v·∫´n c√≤n hi·ªáu l·ª±c\n`;
          }
          
          msg += `\nüìä TR·∫†NG TH√ÅI:\n`;
          msg += `‚ù§Ô∏è M√°u: ${player.hp}/${player.maxHp}\n`;
          msg += `üí´ Linh l·ª±c: ${player.spiritPower}/${player.maxSpiritPower}\n`;
          msg += `üí° M·∫πo: H√£y n√¢ng cao c·∫£nh gi·ªõi tr∆∞·ªõc khi th√°ch th·ª©c y√™u th√∫ m·∫°nh h∆°n!\n`;
          msg += `üïê ${formatTime(new Date())}`;
          savePlayer(userID, player);
          return api.sendMessage(msg, event.threadID, event.messageID);
        } else {
          // Thua - m·∫•t m√°u v√† b·ªã th∆∞∆°ng
          player.hp = battleResult.playerHpLeft; // Lu√¥n l√† 1 m√°u
          
          if (hasInjuryImmunity(player)) {
            let msg = `‚öîÔ∏è B·∫°n ƒë√£ b·ªã ${getMonsterDisplayName(monster)} ƒë√°nh b·∫°i!\n`;
            msg += `üó°Ô∏è Chi·∫øn ƒë·∫•u ${battleResult.turns} l∆∞·ª£t\n`;
            msg += `üíî M·∫•t ${battleResult.damageReceived} m√°u\n`;
            msg += `‚ù§Ô∏è M√°u c√≤n l·∫°i: ${player.hp}/${player.maxHp}\n`;
            msg += `üí´ Linh l·ª±c: ${player.spiritPower}/${player.maxSpiritPower}\n`;
            msg += `üõ°Ô∏è Hi·ªáu ·ª©ng mi·ªÖn nhi·ªÖm v·∫´n c√≤n hi·ªáu l·ª±c - kh√¥ng b·ªã th∆∞∆°ng.\n`;
            msg += `üïê Th·ªùi gian: ${formatTime(new Date())}`;
            savePlayer(userID, player);
            return api.sendMessage(msg, event.threadID, event.messageID);
          } else {
            // Lu√¥n b·ªã th∆∞∆°ng 10 ph√∫t khi thua
            injurePlayer(player);
            
            // X·ª≠ l√Ω th∆∞∆°ng t√≠ch n·∫∑ng cho y√™u th√∫ cao h∆°n c·∫•p
            if (battleResult.isSevereInjury) {
              // B·ªã th∆∞∆°ng n·∫∑ng - th·ªùi gian h·ªìi ph·ª•c g·∫•p ƒë√¥i (20 ph√∫t)
              const currentInjuryTime = new Date(player.injuredUntil);
              currentInjuryTime.setMinutes(currentInjuryTime.getMinutes() + 10); // Th√™m 10 ph√∫t n·ªØa = 20 ph√∫t t·ªïng
              player.injuredUntil = currentInjuryTime.toISOString();
            }
            
            const recoveryTime = formatTime(new Date(player.injuredUntil));
            let msg = `üíÄ TH·∫§T B·∫†I!\n`;
            msg += `${getMonsterDisplayName(monster)} ƒë√£ ƒë√°nh b·∫°i b·∫°n!\n`;
            msg += `üó°Ô∏è Chi·∫øn ƒë·∫•u ${battleResult.turns} l∆∞·ª£t\n`;
            msg += `üíî M·∫•t ${battleResult.damageReceived} m√°u\n\n`;
            
            if (battleResult.isSevereInjury) {
              msg += `üí• B·ªä TH∆Ø∆†NG C·ª∞C N·∫∂NG:\n`;
              msg += `‚ö†Ô∏è Th√°ch th·ª©c y√™u th√∫ v∆∞·ª£t qu√° s·ª©c m·∫°nh!\n`;
              msg += `ü©∏ Th·ªùi gian h·ªìi ph·ª•c k√©o d√†i (20 ph√∫t)\n`;
            } else {
              msg += `ü©∏ B·ªä TH∆Ø∆†NG N·∫∂NG:\n`;
              msg += `‚ö†Ô∏è C·∫ßn 10 ph√∫t ƒë·ªÉ h·ªìi ph·ª•c ho√†n to√†n\n`;
            }
            
            msg += `‚ù§Ô∏è M√°u: ${player.hp}/${player.maxHp}\n`;
            msg += `üí´ Linh l·ª±c: ${player.spiritPower}/${player.maxSpiritPower}\n`;
            msg += `‚è∞ Th·ªùi gian h·ªìi ph·ª•c: ${recoveryTime}\n`;
            msg += `üíä Ho·∫∑c s·ª≠ d·ª•ng ƒëan d∆∞·ª£c ƒë·ªÉ tr·ªã th∆∞∆°ng ngay\n\n`;
            msg += `üí° M·∫πo: N√¢ng cao c·∫£nh gi·ªõi tr∆∞·ªõc khi th√°ch th·ª©c y√™u th√∫ m·∫°nh h∆°n!\n`;
            msg += `üïê ${formatTime(new Date())}`;
            
            savePlayer(userID, player);
            return api.sendMessage(msg, event.threadID, event.messageID);
          }
        }

      case 2: // ƒêan c√°c
        let alchemyText = `üè™ ƒêAN C√ÅC:\n\n`;
        alchemyText += `1. üåø Linh th·∫£o\n`;
        alchemyText += `2. üß™ Luy·ªán ƒëan\n\n`;
        alchemyText += `üí° Reply s·ªë th·ª© t·ª± ƒë·ªÉ ch·ªçn`;
        return api.sendMessage(alchemyText, event.threadID, (error, info) => {
          if (!error) {
            global.client.handleReply.push({
              name: "tu",
              messageID: info.messageID,
              author: userID,
              type: "alchemy_main"
            });
          }
        });

      case 3: // Kho ƒë·ªì
        if (!player.inventory.length)
          return api.sendMessage("üì¶ Kho ƒë·ªì tr·ªëng! H√£y ƒë√°nh qu√°i ƒë·ªÉ thu th·∫≠p trang b·ªã!", event.threadID, event.messageID);

        let inventoryText = "üì¶ KHO ƒê·ªí:\n\n";
        
        // G·ªôp v·∫≠t ph·∫©m theo t√™n, lo·∫°i v√† c·∫•p ƒë·ªô
        const groupedItems = {};
        player.inventory.forEach((item, index) => {
          const key = `${item.name}_${item.type}_${item.grade}`;
          if (!groupedItems[key]) {
            groupedItems[key] = { 
              item: item, 
              count: 0, 
              indices: [],
              totalValue: 0 
            };
          }
          // X·ª≠ l√Ω s·ªë l∆∞·ª£ng ƒë·∫∑c bi·ªát cho v·∫≠t li·ªáu c√≥ thu·ªôc t√≠nh quantity
          const itemQuantity = item.quantity || 1;
          groupedItems[key].count += itemQuantity;
          groupedItems[key].indices.push(index);
          groupedItems[key].totalValue += (item.sellPrice || 0) * itemQuantity;
        });

        // S·∫Øp x·∫øp theo lo·∫°i v·∫≠t ph·∫©m
        const sortedItems = Object.entries(groupedItems).sort(([,a], [,b]) => {
          const typeOrder = ["ƒëan d∆∞·ª£c", "v≈© kh√≠", "y√™u ƒëan", "v·∫≠t li·ªáu", "ng·ªçc", "tinh t√∫y", "linh h·ªìn"];
          const aTypeIndex = typeOrder.indexOf(a.item.type || "kh√°c");
          const bTypeIndex = typeOrder.indexOf(b.item.type || "kh√°c");
          if (aTypeIndex !== bTypeIndex) {
            return aTypeIndex - bTypeIndex;
          }
          return (a.item.name || "").localeCompare(b.item.name || "");
        });

        let itemIndex = 0;
        let currentType = "";
        
        sortedItems.forEach(([key, data]) => {
          const { item, count, totalValue } = data;
          
          // ƒê·∫£m b·∫£o item c√≥ ƒë·∫ßy ƒë·ªß thu·ªôc t√≠nh
          const itemType = item.type || "kh√°c";
          const itemName = item.name || "V·∫≠t ph·∫©m kh√¥ng t√™n";
          const itemGrade = item.grade || "ph√†m kh√≠";
          const itemRarity = item.rarity || "th∆∞·ªùng";
          const itemSellPrice = item.sellPrice || 0;
          
          // Hi·ªÉn th·ªã header cho lo·∫°i v·∫≠t ph·∫©m m·ªõi
          if (itemType !== currentType) {
            currentType = itemType;
            const typeIcon = itemType === "ƒëan d∆∞·ª£c" ? "üíä" : 
                            itemType === "v≈© kh√≠" ? "‚öîÔ∏è" :
                            itemType === "y√™u ƒëan" ? "üîÆ" : 
                            itemType === "v·∫≠t li·ªáu" ? "üß∞" : 
                            itemType === "ng·ªçc" ? "üíé" :
                            itemType === "tinh t√∫y" ? "‚ú®" :
                            itemType === "linh h·ªìn" ? "üëª" : "üì¶";
            inventoryText += `\n${typeIcon} ${itemType.toUpperCase()}:\n`;
          }
          
          itemIndex++;
          const gradeIcon = getGradeIcon(itemGrade);
          const rarityIcon = getRarityIcon(itemRarity);

          // T·∫°o chu·ªói hi·ªÉn th·ªã s·ªë l∆∞·ª£ng - lu√¥n hi·ªÉn th·ªã s·ªë l∆∞·ª£ng n·∫øu > 1
          let quantityDisplay = count > 1 ? ` x${count}` : "";

          inventoryText += `${itemIndex}. ${gradeIcon}${rarityIcon} ${itemName}${quantityDisplay}`;
          
          // Hi·ªÉn th·ªã th√¥ng tin ƒë·∫∑c bi·ªát cho t·ª´ng lo·∫°i
          if (itemType === "v≈© kh√≠" && item.attack) {
            inventoryText += ` (üí•${item.attack})`;
          }
          
          // Hi·ªÉn th·ªã gi√° b√°n r√µ r√†ng
          if (count === 1) {
            inventoryText += ` - üíé${itemSellPrice.toLocaleString()}`;
          } else {
            inventoryText += ` - üíé${itemSellPrice.toLocaleString()}/c√°i (t·ªïng: ${totalValue.toLocaleString()})`;
          }
          inventoryText += `\n`;
        });

        const totalInventoryValue = player.inventory.reduce((sum, item) => {
          const quantity = item.quantity || 1;
          return sum + (item.sellPrice || 0) * quantity;
        }, 0);
        
        inventoryText += `\nüí° Reply s·ªë th·ª© t·ª± ƒë·ªÉ s·ª≠ d·ª•ng (ƒëan d∆∞·ª£c) ho·∫∑c b√°n v·∫≠t ph·∫©m`;
        inventoryText += `\nüíä D√πng nhi·ªÅu ƒëan d∆∞·ª£c: Reply "1 2 3" (s·ª≠ d·ª•ng ƒëan d∆∞·ª£c s·ªë 1, 2, 3)`;
        inventoryText += `\nüí∞ B√°n theo s·ªë l∆∞·ª£ng: Reply "1 3" (b√°n 3 v·∫≠t ph·∫©m lo·∫°i s·ªë 1)`;
        inventoryText += `\nüí∞ B√°n nhanh nhi·ªÅu v·∫≠t ph·∫©m: Reply "1-3" (b√°n t·ª´ v·∫≠t ph·∫©m 1 ƒë·∫øn 3)`;
        inventoryText += `\nüìä T·ªïng gi√° tr·ªã kho: ${totalInventoryValue.toLocaleString()} linh th·∫°ch`;
        inventoryText += `\nüí∞ Linh th·∫°ch hi·ªán c√≥: ${player.spiritStones.toLocaleString()}`;
        inventoryText += `\nüì¶ T·ªïng s·ªë v·∫≠t ph·∫©m: ${player.inventory.length} (${Object.keys(groupedItems).length} lo·∫°i)`;

        return api.sendMessage(inventoryText, event.threadID, (error, info) => {
          if (!error) {
            global.client.handleReply.push({
              name: "tu",
              messageID: info.messageID,
              author: userID,
              type: "inventory_action_grouped",
              data: sortedItems.map(([key, data]) => data)
            });
          }
        });
        break;

      case 4: // ƒê·ªô ki·∫øp
        if (isDaoCoreInjured(player)) {
          const timeLeft = getDaoCoreInjuryTimeLeft(player);
          return api.sendMessage(`üíÄ ƒê·∫°o c∆° ƒëang b·ªã th∆∞∆°ng! Kh√¥ng th·ªÉ ƒë·ªô ki·∫øp.\n‚è∞ C·∫ßn ch·ªù ${timeLeft} ph√∫t ho·∫∑c d√πng ƒëan d∆∞·ª£c ch·ªØa tr·ªã`, event.threadID, event.messageID);
        }

        if (!isReadyForTribulation(player)) {
          const currentStage = getCurrentStage(player.level);
          const currentPhase = getCurrentPhase(player.level);
          const currentDisplayLevel = getDisplayLevelName(player);
          const expToNext = getExpToLevel(player.level);
          const progressPercent = Math.floor((player.exp / expToNext) * 100);
          
          return api.sendMessage(
            `‚ö° TH√îNG TIN ƒê·ªò KI·∫æP:\n\n` +
            `üèÜ C·∫£nh gi·ªõi hi·ªán t·∫°i: ${currentDisplayLevel}\n` +
            `üìä Chi ti·∫øt: ${currentPhase} ${currentStage}\n` +
            `‚ö° Kinh nghi·ªám: ${player.exp.toLocaleString()}/${expToNext.toLocaleString()} (${progressPercent}%)\n\n` +
            `‚ùå Ch∆∞a ƒë·ªß ƒëi·ªÅu ki·ªán ƒë·ªô ki·∫øp!\n` +
            `üìã Y√™u c·∫ßu:\n` +
            `   ‚Ä¢ C·∫£nh gi·ªõi t·ª´ Tr√∫c C∆° tr·ªü l√™n\n` +
            `   ‚Ä¢ ƒê·∫°t Vi√™n M√£n (100% kinh nghi·ªám)\n\n` +
            `üí° H√£y tu luy·ªán th√™m ƒë·ªÉ ƒë·∫°t Vi√™n M√£n v√† chu·∫©n b·ªã cho l√¥i ki·∫øp!`,
            event.threadID, event.messageID
          );
        }

        const currentStage = getCurrentStage(player.level);
        const currentPhase = getCurrentPhase(player.level);
        const currentDisplayLevel = getDisplayLevelName(player);
        const nextStageIndex = Math.floor((player.level + 1) / 4);
        const nextStageName = STAGES[nextStageIndex] || STAGES[STAGES.length - 1];
        const nextDisplayLevel = `${nextStageName} S∆° K·ª≥`;
        
        let confirmText = `‚ö° ƒê·ªò KI·∫æP ${currentStage.toUpperCase()}:\n\n`;
        confirmText += `üèÜ C·∫£nh gi·ªõi hi·ªán t·∫°i: ${currentDisplayLevel}\n`;
        confirmText += `üìä Chi ti·∫øt: ${currentPhase} ${currentStage} (Vi√™n M√£n)\n`;
        confirmText += `üéØ C·∫£nh gi·ªõi sau ƒë·ªô ki·∫øp: ${nextDisplayLevel}\n`;
        confirmText += `‚ö° Kinh nghi·ªám: ${player.exp.toLocaleString()}/${getExpToLevel(player.level).toLocaleString()} (100%)\n\n`;
        confirmText += `‚ö†Ô∏è C·∫¢NH B√ÅO:\n`;
        confirmText += `   ‚Ä¢ T·ª∑ l·ªá th√†nh c√¥ng: 50%\n`;
        confirmText += `   ‚Ä¢ Th·∫•t b·∫°i s·∫Ω l√†m t·ªïn th∆∞∆°ng ƒë·∫°o c∆° (30 ph√∫t)\n`;
        confirmText += `   ‚Ä¢ C·∫ßn ƒëan d∆∞·ª£c t·ª´ linh kh√≠ tr·ªü l√™n ƒë·ªÉ ch·ªØa\n\n`;
        confirmText += `1. ‚ö° B·∫Øt ƒë·∫ßu ƒë·ªô ki·∫øp\n`;
        confirmText += `2. ‚ùå H·ªßy b·ªè\n\n`;
        confirmText += `üí° Reply s·ªë th·ª© t·ª± ƒë·ªÉ ch·ªçn`;

        return api.sendMessage(confirmText, event.threadID, (error, info) => {
          if (!error) {
            global.client.handleReply.push({
              name: "tu",
              messageID: info.messageID,
              author: userID,
              type: "tribulation_confirm"
            });
          }
        });

      case 5: // Tu luy·ªán
        const recommendedCost = getSpiritStoneCultivationCost(player.level);
        let cultivateText = `üßò TU LUY·ªÜN B·∫∞NG LINH TH·∫†CH:\n\n`;
        
        if (player.spiritRoot) {
          const spiritIcon = getSpiritRootIcon(player.spiritRoot.grade);
          cultivateText += `${spiritIcon} Linh cƒÉn: ${player.spiritRoot.grade}\n`;
          cultivateText += `‚ö° H·ªá s·ªë tu luy·ªán: x${player.spiritRoot.multiplier}\n\n`;
        }
        
        cultivateText += `üìä TR·∫†NG TH√ÅI HI·ªÜN T·∫†I:\n`;
        cultivateText += `üèÜ C·∫£nh gi·ªõi: ${getDisplayLevelName(player)}\n`;
        cultivateText += `‚ö° Kinh nghi·ªám: ${player.exp}/${getExpToLevel(player.level)}\n`;
        cultivateText += `üíé Linh th·∫°ch: ${player.spiritStones.toLocaleString()}\n\n`;
        
        cultivateText += `üí∞ CHI PH√ç TU LUY·ªÜN:\n`;
        cultivateText += `‚Ä¢ 1 linh th·∫°ch = 1 kinh nghi·ªám c∆° b·∫£n\n`;
        if (player.spiritRoot?.multiplier > 1.0) {
          cultivateText += `‚Ä¢ V·ªõi linh cƒÉn c·ªßa b·∫°n: 1 linh th·∫°ch = ${player.spiritRoot.multiplier} kinh nghi·ªám\n`;
        }
        cultivateText += `‚Ä¢ Khuy·∫øn ngh·ªã cho c·∫£nh gi·ªõi hi·ªán t·∫°i: ${recommendedCost.toLocaleString()} linh th·∫°ch\n\n`;
        
        cultivateText += `üìã C√ÅCH S·ª¨ D·ª§NG:\n`;
        cultivateText += `1. üíé Tu luy·ªán 100 linh th·∫°ch\n`;
        cultivateText += `2. üíé Tu luy·ªán 500 linh th·∫°ch\n`;
        cultivateText += `3. üíé Tu luy·ªán 1,000 linh th·∫°ch\n`;
        cultivateText += `4. üíé Tu luy·ªán ${recommendedCost.toLocaleString()} linh th·∫°ch (khuy·∫øn ngh·ªã)\n`;
        cultivateText += `5. üéØ T·ª± nh·∫≠p s·ªë l∆∞·ª£ng\n\n`;
        cultivateText += `üí° Reply s·ªë th·ª© t·ª± ƒë·ªÉ ch·ªçn`;
        
        if (isDaoCoreInjured(player)) {
          cultivateText += `\n‚ö†Ô∏è ƒê·∫°o c∆° b·ªã th∆∞∆°ng - kh√¥ng th·ªÉ tu luy·ªán!`;
        } else if (isPlayerInjured(player)) {
          cultivateText += `\n‚ö†Ô∏è ƒêang b·ªã th∆∞∆°ng - kh√¥ng th·ªÉ tu luy·ªán!`;
        }
        
        return api.sendMessage(cultivateText, event.threadID, (error, info) => {
          if (!error) {
            global.client.handleReply.push({
              name: "tu",
              messageID: info.messageID,
              author: userID,
              type: "cultivation_menu",
              data: { recommendedCost }
            });
          }
        });

      case 6: // Luy·ªán kh√≠
        const weaponsToUpgrade = player.inventory.filter(item => item.type === "v≈© kh√≠" && canUseWeapon(player, item));
        
        if (weaponsToUpgrade.length === 0) {
          return api.sendMessage("‚öîÔ∏è B·∫°n kh√¥ng c√≥ v≈© kh√≠ n√†o ƒë·ªÉ luy·ªán kh√≠!\nüí° H√£y ƒë√°nh qu√°i ƒë·ªÉ t√¨m v≈© kh√≠ ho·∫∑c s·ª≠ d·ª•ng v≈© kh√≠ ban ƒë·∫ßu.", event.threadID, event.messageID);
        }
        
        let weaponUpgradeText = `üî• LUY·ªÜN KH√ç - N√ÇNG C·∫§P V≈® KH√ç:\n\n`;
        weaponUpgradeText += `üìä CHI PH√ç N√ÇNG C·∫§P:\n`;
        weaponUpgradeText += `Level 0‚Üí1: 100 linh th·∫°ch (80% th√†nh c√¥ng)\n`;
        weaponUpgradeText += `Level 1‚Üí2: 200 linh th·∫°ch (75% th√†nh c√¥ng)\n`;
        weaponUpgradeText += `Level 2‚Üí3: 400 linh th·∫°ch (70% th√†nh c√¥ng)\n`;
        weaponUpgradeText += `...\n`;
        weaponUpgradeText += `Level 9‚Üí10: 51,200 linh th·∫°ch (10% th√†nh c√¥ng)\n\n`;
        weaponUpgradeText += `‚ö° HI·ªÜU QU·∫¢: +15% s√°t th∆∞∆°ng m·ªói level\n\n`;
        
        weaponUpgradeText += `üó°Ô∏è V≈® KH√ç C√ì TH·ªÇ N√ÇNG C·∫§P:\n`;
        weaponsToUpgrade.forEach((weapon, index) => {
          const gradeIcon = getGradeIcon(weapon.grade);
          const level = weapon.level || 0;
          const upgradeCosts = [100, 200, 400, 800, 1600, 3200, 6400, 12800, 25600, 51200];
          const nextCost = level < 10 ? upgradeCosts[level] : "MAX";
          
          weaponUpgradeText += `${index + 1}. ${gradeIcon} ${weapon.name}\n`;
          weaponUpgradeText += `   üí• S√°t th∆∞∆°ng: ${weapon.attack} | Level: ${level}/10\n`;
          if (level < 10) {
            weaponUpgradeText += `   üíé Chi ph√≠ n√¢ng c·∫•p: ${nextCost} linh th·∫°ch\n`;
          } else {
            weaponUpgradeText += `   ‚úÖ ƒê√£ ƒë·∫°t c·∫•p t·ªëi ƒëa\n`;
          }
          weaponUpgradeText += `\n`;
        });
        
        weaponUpgradeText += `üíé Linh th·∫°ch hi·ªán c√≥: ${player.spiritStones.toLocaleString()}\n`;
        weaponUpgradeText += `üí° Reply s·ªë th·ª© t·ª± v≈© kh√≠ ƒë·ªÉ luy·ªán kh√≠\n`;
        weaponUpgradeText += `üí° Ho·∫∑c d√πng: .tu luyenkhi [s·ªë v≈© kh√≠] [s·ªë linh th·∫°ch]`;
        
        return api.sendMessage(weaponUpgradeText, event.threadID, (error, info) => {
          if (!error) {
            global.client.handleReply.push({
              name: "tu",
              messageID: info.messageID,
              author: userID,
              type: "weapon_upgrade_menu",
              data: weaponsToUpgrade
            });
          }
        });

      case 7: // Th√¥ng tin nh√¢n v·∫≠t  
        console.log("[DEBUG] Getting player stats for case 7");
        try {
          const playerStats = getPlayerStats(player);
          console.log("[DEBUG] Player stats generated, length:", playerStats?.length || 0);
          console.log("[DEBUG] Sending player stats message");
          
          // X√≥a handleReply sau khi x·ª≠ l√Ω
          const replyIndex7 = global.client.handleReply.findIndex(reply => reply.messageID === handleReply.messageID);
          if (replyIndex7 !== -1) {
            global.client.handleReply.splice(replyIndex7, 1);
          }
          
          if (!playerStats || playerStats.length === 0) {
            console.log("[ERROR] playerStats is empty or undefined");
            return api.sendMessage("‚ùå L·ªói: Kh√¥ng th·ªÉ l·∫•y th√¥ng tin nh√¢n v·∫≠t!", event.threadID, event.messageID);
          }
          
          return api.sendMessage(playerStats, event.threadID, event.messageID);
        } catch (error) {
          console.error("[ERROR] Case 7 failed:", error);
          // X√≥a handleReply trong tr∆∞·ªùng h·ª£p l·ªói
          const replyIndex7 = global.client.handleReply.findIndex(reply => reply.messageID === handleReply.messageID);
          if (replyIndex7 !== -1) {
            global.client.handleReply.splice(replyIndex7, 1);
          }
          return api.sendMessage(`‚ùå L·ªói khi hi·ªÉn th·ªã th√¥ng tin nh√¢n v·∫≠t: ${error.message}`, event.threadID, event.messageID);
        }

      default:
        return api.sendMessage("‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng ch·ªçn t·ª´ 1-7.", event.threadID, event.messageID);
    }
  }

  // X·ª≠ l√Ω reply cho hunt menu
  if (handleReply.type === "hunt_menu") {
    const huntChoice = parseInt(choice);

    if (huntChoice === 1) {
      // ƒê√°nh qu√°i ng·∫´u nhi√™n
      if (isPlayerInjured(player)) {
        const timeLeft = getInjuryTimeLeft(player);
        const recoveryTime = formatTime(new Date(player.injuredUntil));
        return api.sendMessage(`ü©∏ B·∫°n ƒëang b·ªã th∆∞∆°ng! C·∫ßn ch·ªù ${timeLeft} ph√∫t n·ªØa ƒë·ªÉ h·ªìi ph·ª•c.\n‚è∞ Th·ªùi gian h·ªìi ph·ª•c: ${recoveryTime}`, event.threadID, event.messageID);
      }

      // Ki·ªÉm tra m√°u d∆∞·ªõi 20%
      const minHpPercent = 0.2;
      const minHpRequired = Math.floor(player.maxHp * minHpPercent);
      if (player.hp < minHpRequired) {
        const hpPercent = Math.floor((player.hp / player.maxHp) * 100);
        return api.sendMessage(`ü©∏ M√°u qu√° th·∫•p ƒë·ªÉ sƒÉn qu√°i! (${hpPercent}%)\n‚ù§Ô∏è M√°u hi·ªán t·∫°i: ${player.hp}/${player.maxHp}\nüíä C·∫ßn h·ªìi ph·ª•c m√°u l√™n √≠t nh·∫•t ${minHpRequired} (20%) ƒë·ªÉ c√≥ th·ªÉ ti·∫øp t·ª•c sƒÉn qu√°i.`, event.threadID, event.messageID);
      }

      const monster = getRandomMonster(player.level);
      const battleResult = calculateBattleResult(player, monster);

      if (battleResult.result === "win" || battleResult.result === "lucky_win" || battleResult.result === "easy_win") {
        // Th·∫Øng
        player.hp = battleResult.playerHpLeft;
        const finalExp = gainExpWithBoost(player, monster.exp);
        logMonsterKill(player, monster.name);

        let msg = `‚öîÔ∏è CHI·∫æN TH·∫ÆNG${battleResult.isLucky ? ' MAY M·∫ÆN' : battleResult.isEasy ? ' √ÅP ƒê·∫¢O' : ''}!\n`;
        msg += `${getMonsterDisplayName(monster)} ƒë√£ b·ªã ti√™u di·ªát!\n`;
        msg += `üó°Ô∏è Chi·∫øn ƒë·∫•u ${battleResult.turns} l∆∞·ª£t\n`;
        msg += `üí• S√°t th∆∞∆°ng g√¢y ra: ${battleResult.damageDealt}\n`;
        
        if (battleResult.isLucky) {
          msg += `üçÄ Th·∫Øng m·ªôt c√°ch k·ª≥ di·ªáu tr∆∞·ªõc ƒë·ªëi th·ªß m·∫°nh h∆°n!\n`;
          msg += `‚ö†Ô∏è B·∫°n ƒë√£ b·ªã th∆∞∆°ng n·∫∑ng trong tr·∫≠n chi·∫øn!\n`;
        } else if (battleResult.isEasy) {
          msg += `üí™ √Åp ƒë·∫£o ho√†n to√†n! Y√™u th√∫ qu√° y·∫øu so v·ªõi s·ª©c m·∫°nh hi·ªán t·∫°i!\n`;
          msg += `üõ°Ô∏è Kh√¥ng h·ªÅ b·ªã th∆∞∆°ng trong tr·∫≠n chi·∫øn!\n`;
        }
        
        if (finalExp > 0) {
          msg += `üìà Nh·∫≠n ƒë∆∞·ª£c ${finalExp} kinh nghi·ªám`;
          if (hasExpBoost(player)) {
            msg += ` (x${player.expBoostMultiplier} buff)`;
          }
          msg += `\n`;
        } else {
          // Ki·ªÉm tra n·∫øu c√≥ th·ªÉ ƒë·ªô ki·∫øp
          if (isReadyForTribulation(player)) {
            msg += `‚ö° ƒê√£ ƒë·∫°t Vi√™n M√£n - Kh√¥ng th·ªÉ nh·∫≠n th√™m kinh nghi·ªám!\n`;
            msg += `üí° H√£y ƒë·ªô ki·∫øp ƒë·ªÉ l√™n c·∫£nh gi·ªõi m·ªõi!\n`;
          } else {
            msg += `‚ö° ƒê√£ ƒë·∫°t Vi√™n M√£n c·∫£nh gi·ªõi ${getCurrentStage(player.level)}!\n`;
            msg += `üí° Ti·∫øp t·ª•c tu luy·ªán ƒë·ªÉ n√¢ng cao s·ª©c m·∫°nh!\n`;
          }
        }
        
        // Ki·ªÉm tra n·∫øu c√≥ th·ªÉ ƒë·ªô ki·∫øp
        if (isReadyForTribulation(player)) {
          msg += `‚ö° ƒê√£ s·∫µn s√†ng ƒë·ªô ki·∫øp! D√πng l·ªánh .tu 9\n`;
        }
        msg += `\n`;

        const drop = dropEquipment(monster);
        if (drop) {
          addEquipment(player, drop);
          const gradeIcon = getGradeIcon(drop.grade);
          const rarityIcon = getRarityIcon(drop.rarity);

          if (drop.type === "ƒëan d∆∞·ª£c") {
            msg += `üéÅ PH·∫¶N TH∆Ø·ªûNG: ${gradeIcon}${rarityIcon} ${drop.name}\n`;
            msg += `   üìã ${drop.description}\n`;
          } else {
            msg += `üéÅ PH·∫¶N TH∆Ø·ªûNG: ${gradeIcon}${rarityIcon} ${drop.name}\n`;
            if (player.settings?.autoSell) {
              msg += `   üí∞ T·ª± ƒë·ªông b√°n: +${drop.sellPrice} linh th·∫°ch\n`;
            } else {
              msg += `   üíé Gi√° tr·ªã: ${drop.sellPrice} linh th·∫°ch\n`;
            }
          }
        } else {
          msg += `üí® Kh√¥ng c√≥ chi·∫øn l·ª£i ph·∫©m...\n`;
        }

        msg += `\nüìä TR·∫†NG TH√ÅI:\n`;
        msg += `üèÜ C·∫£nh gi·ªõi: ${getDisplayLevelName(player)}\n`;
        msg += `‚ö° Kinh nghi·ªám: ${player.exp}/${getExpToLevel(player.level)}\n`;
        msg += `‚ù§Ô∏è M√°u: ${player.hp}/${player.maxHp}\n`;
        msg += `üí´ Linh l·ª±c: ${player.spiritPower}/${player.maxSpiritPower}\n`;
        msg += `üíé Linh th·∫°ch: ${player.spiritStones.toLocaleString()}\n`;

        // Hi·ªÉn th·ªã tr·∫°ng th√°i buff
        if (hasExpBoost(player)) {
          const boostTimeLeft = Math.ceil((new Date(player.expBoostUntil) - new Date()) / 60000);
          msg += `‚ö° Buff kinh nghi·ªám: x${player.expBoostMultiplier} (${boostTimeLeft}p)\n`;
        }
        if (hasInjuryImmunity(player)) {
          const immunityTimeLeft = Math.ceil((new Date(player.immunityUntil) - new Date()) / 60000);
          msg += `üõ°Ô∏è Mi·ªÖn nhi·ªÖm: ${immunityTimeLeft}p\n`;
        }

        msg += `\nüïê ${formatTime(new Date())}`;
        savePlayer(userID, player);
        return api.sendMessage(msg, event.threadID, event.messageID);
      } else if (battleResult.result === "escape") {
        // Ch·∫°y tr·ªën th√†nh c√¥ng nh∆∞ng b·ªã h·∫≠u qu·∫£
        
        // C·∫°n ki·ªát linh kh√≠ (ch·ªâ c√≤n 10% ho·∫∑c t·ªëi thi·ªÉu 1 ƒëi·ªÉm)
        player.spiritPower = Math.max(1, Math.floor(player.spiritPower * 0.1));
        
        // B·ªã th∆∞∆°ng nh·∫π (m·∫•t 30% m√°u)
        const healthLoss = Math.floor(player.maxHp * 0.3);
        player.hp = Math.max(1, player.hp - healthLoss);
        
        // B·ªã th∆∞∆°ng nh·∫π trong 5 ph√∫t (n·∫øu kh√¥ng c√≥ mi·ªÖn nhi·ªÖm)
        if (!hasInjuryImmunity(player)) {
          const injuredTime = new Date();
          injuredTime.setMinutes(injuredTime.getMinutes() + 5); // 5 ph√∫t b·ªã th∆∞∆°ng nh·∫π
          player.injuredUntil = injuredTime.toISOString();
        }
        
        let msg = `üí® CH·∫†Y TR·ªêN TH√ÄNH C√îNG!\n`;
        msg += `B·∫°n ƒë√£ k·ªãp th·ªùi tho√°t kh·ªèi ${getMonsterDisplayName(monster)}!\n`;
        msg += `üèÉ‚Äç‚ôÇÔ∏è May m·∫Øn tho√°t ƒë∆∞·ª£c m·ªôt tai h·ªça l·ªõn!\n\n`;
        msg += `‚ö†Ô∏è H·∫¨U QU·∫¢ C·ª¶A VI·ªÜC CH·∫†Y TR·ªêN:\n`;
        msg += `üíî M·∫•t ${healthLoss} m√°u do ho·∫£ng lo·∫°n\n`;
        msg += `üí´ Linh kh√≠ c·∫°n ki·ªát do s·ª≠ d·ª•ng th·∫ßn th·ª©c ch·∫°y tr·ªën\n`;
        
        if (!hasInjuryImmunity(player)) {
          const recoveryTime = formatTime(new Date(player.injuredUntil));
          msg += `ü©∏ B·ªã th∆∞∆°ng nh·∫π (5 ph√∫t): ${recoveryTime}\n`;
        } else {
          msg += `üõ°Ô∏è Mi·ªÖn nhi·ªÖm b·ªã th∆∞∆°ng v·∫´n c√≤n hi·ªáu l·ª±c\n`;
        }
        
        msg += `\nüìä TR·∫†NG TH√ÅI:\n`;
        msg += `‚ù§Ô∏è M√°u: ${player.hp}/${player.maxHp}\n`;
        msg += `üí´ Linh l·ª±c: ${player.spiritPower}/${player.maxSpiritPower}\n`;
        msg += `üïê Th·ªùi gian: ${formatTime(new Date())}`;
        savePlayer(userID, player);
        return api.sendMessage(msg, event.threadID, event.messageID);
      } else {
        // Thua - m·∫•t m√°u v√† b·ªã th∆∞∆°ng
        player.hp = battleResult.playerHpLeft; // Lu√¥n l√† 1 m√°u
        
        if (hasInjuryImmunity(player)) {
          let msg = `‚öîÔ∏è B·∫°n ƒë√£ b·ªã ${getMonsterDisplayName(monster)} ƒë√°nh b·∫°i!\n`;
          msg += `üó°Ô∏è Chi·∫øn ƒë·∫•u ${battleResult.turns} l∆∞·ª£t\n`;
          msg += `üíî M·∫•t ${battleResult.damageReceived} m√°u\n`;
          msg += `‚ù§Ô∏è M√°u c√≤n l·∫°i: ${player.hp}/${player.maxHp}\n`;
          msg += `üí´ Linh l·ª±c: ${player.spiritPower}/${player.maxSpiritPower}\n`;
          msg += `üõ°Ô∏è Hi·ªáu ·ª©ng mi·ªÖn nhi·ªÖm v·∫´n c√≤n hi·ªáu l·ª±c - kh√¥ng b·ªã th∆∞∆°ng.\n`;
          msg += `üïê Th·ªùi gian: ${formatTime(new Date())}`;
          savePlayer(userID, player);
          return api.sendMessage(msg, event.threadID, event.messageID);
        } else {
          // Lu√¥n b·ªã th∆∞∆°ng 10 ph√∫t khi thua
          injurePlayer(player);
          
          // X·ª≠ l√Ω th∆∞∆°ng t√≠ch n·∫∑ng cho y√™u th√∫ cao h∆°n c·∫•p
          if (battleResult.isSevereInjury) {
            // B·ªã th∆∞∆°ng n·∫∑ng - th·ªùi gian h·ªìi ph·ª•c g·∫•p ƒë√¥i (20 ph√∫t)
            const currentInjuryTime = new Date(player.injuredUntil);
            currentInjuryTime.setMinutes(currentInjuryTime.getMinutes() + 10); // Th√™m 10 ph√∫t n·ªØa = 20 ph√∫t t·ªïng
            player.injuredUntil = currentInjuryTime.toISOString();
          }
          
          const recoveryTime = formatTime(new Date(player.injuredUntil));
          let msg = `üíÄ TH·∫§T B·∫†I!\n`;
          msg += `${getMonsterDisplayName(monster)} ƒë√£ ƒë√°nh b·∫°i b·∫°n!\n`;
          msg += `üó°Ô∏è Chi·∫øn ƒë·∫•u ${battleResult.turns} l∆∞·ª£t\n`;
          msg += `üíî M·∫•t ${battleResult.damageReceived} m√°u\n\n`;
          
          if (battleResult.isSevereInjury) {
            msg += `üí• B·ªä TH∆Ø∆†NG C·ª∞C N·∫∂NG:\n`;
            msg += `‚ö†Ô∏è Th√°ch th·ª©c y√™u th√∫ v∆∞·ª£t qu√° s·ª©c m·∫°nh!\n`;
            msg += `ü©∏ Th·ªùi gian h·ªìi ph·ª•c k√©o d√†i (20 ph√∫t)\n`;
          } else {
            msg += `ü©∏ B·ªä TH∆Ø∆†NG N·∫∂NG:\n`;
            msg += `‚ö†Ô∏è C·∫ßn 10 ph√∫t ƒë·ªÉ h·ªìi ph·ª•c ho√†n to√†n\n`;
          }
          
          msg += `‚ù§Ô∏è M√°u: ${player.hp}/${player.maxHp}\n`;
          msg += `üí´ Linh l·ª±c: ${player.spiritPower}/${player.maxSpiritPower}\n`;
          msg += `‚è∞ Th·ªùi gian h·ªìi ph·ª•c: ${recoveryTime}\n`;
          msg += `üíä Ho·∫∑c s·ª≠ d·ª•ng ƒëan d∆∞·ª£c ƒë·ªÉ tr·ªã th∆∞∆°ng ngay\n\n`;
          msg += `üí° M·∫πo: N√¢ng cao c·∫£nh gi·ªõi tr∆∞·ªõc khi th√°ch th·ª©c y√™u th√∫ m·∫°nh h∆°n!\n`;
          msg += `üïê Th·ªùi gian hi·ªán t·∫°i: ${formatTime(new Date())}`;
          
          savePlayer(userID, player);
          return api.sendMessage(msg, event.threadID, event.messageID);
        }
      }
    } else if (huntChoice === 2) {
      // D√πng ƒëan d∆∞·ª£c tr·ªã th∆∞∆°ng
      const healingPotions = player.inventory.filter(item => item.type === "ƒëan d∆∞·ª£c");
      if (healingPotions.length === 0) {
        return api.sendMessage("‚ùå B·∫°n kh√¥ng c√≥ ƒëan d∆∞·ª£c tr·ªã th∆∞∆°ng! H√£y mua ·ªü c·ª≠a h√†ng.", event.threadID, event.messageID);
      }

      let potionText = `üíä ƒêan d∆∞·ª£c tr·ªã th∆∞∆°ng:\n\n`;
      healingPotions.forEach((potion, i) => {
        potionText += `${i + 1}. ${potion.name} - H·ªìi ph·ª•c ngay l·∫≠p t·ª©c\n`;
      });
      potionText += `\nüí° Reply s·ªë th·ª© t·ª± ƒë·ªÉ s·ª≠ d·ª•ng ƒëan d∆∞·ª£c`;

      return api.sendMessage(potionText, event.threadID, (error, info) => {
        if (!error) {
          global.client.handleReply.push({
            name: "tu",
            messageID: info.messageID,
            author: userID,
            type: "heal_potion",
            data: healingPotions
          });
        }
      });
    }
    return api.sendMessage("‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
  }

  // X·ª≠ l√Ω reply cho d√πng ƒëan d∆∞·ª£c
  if (handleReply.type === "heal_potion") {
    const potionIndex = parseInt(choice) - 1;
    if (potionIndex >= 0 && potionIndex < handleReply.data.length) {
      const potion = handleReply.data[potionIndex];

      // T√¨m v√† x√≥a ƒëan d∆∞·ª£c kh·ªèi inventory
      const inventoryIndex = player.inventory.findIndex(item => 
        item.name === potion.name && item.type === "ƒëan d∆∞·ª£c"
      );
      if (inventoryIndex !== -1) {
        player.inventory.splice(inventoryIndex, 1);
        applyPotionEffects(player, potion);
        savePlayer(userID, player);

        let msg = `‚úÖ ƒê√£ s·ª≠ d·ª•ng ${potion.name}!\n`;
        msg += `üíä ${potion.description}\n`;

        // Hi·ªÉn th·ªã tr·∫°ng th√°i hi·ªán t·∫°i
        if (hasExpBoost(player)) {
          const boostTimeLeft = Math.ceil((new Date(player.expBoostUntil) - new Date()) / 60000);
          msg += `‚ö° Buff exp: ${player.expBoostMultiplier}x (${boostTimeLeft} ph√∫t)\n`;
        }
        if (hasInjuryImmunity(player)) {
          const immunityTimeLeft = Math.ceil((new Date(player.immunityUntil) - new Date()) / 60000);
          msg += `üõ°Ô∏è Mi·ªÖn nhi·ªÖm b·ªã th∆∞∆°ng (${immunityTimeLeft} ph√∫t)\n`;
        }
        if (!isPlayerInjured(player)) {
          msg += `ü©π Tr·∫°ng th√°i: Kh·ªèe m·∫°nh`;
        }

        return api.sendMessage(msg, event.threadID, event.messageID);
      }
    }
    return api.sendMessage("‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
  }

  // X·ª≠ l√Ω reply cho c·ª≠a h√†ng
  if (handleReply.type === "shop_category") {
    const categoryIndex = parseInt(choice);
    if (categoryIndex >= 1 && categoryIndex <= 5) {
      const gradeName = getGradeName(categoryIndex);
      const gradeIcon = getGradeIcon(gradeName);
      const gradeItems = EQUIPMENT_LIST.filter(eq => eq.grade === gradeName);

      let shopText = `üè™ C·ª≠a h√†ng - ${gradeIcon} ${gradeName.toUpperCase()}:\n\n`;
      if (gradeItems.length > 0) {
        gradeItems.forEach((eq, i) => {
          if (eq.type === "ƒëan d∆∞·ª£c") {
            shopText += `${i + 1}. üíä ${eq.name} - üíé${eq.buyPrice}\n`;
            shopText += `   üìù ${eq.description}\n`;
          } else {
            shopText += `‚Ä¢ ${eq.name} - üíé${eq.sellPrice} (Nh·∫∑t t·ª´ qu√°i)\n`;
          }
        });

        // T·∫°o danh s√°ch ƒëan d∆∞·ª£c c√≥ th·ªÉ mua
        const buyableItems = gradeItems.filter(eq => eq.type === "ƒëan d∆∞·ª£c");
        if (buyableItems.length > 0) {
          shopText += `\nüí° Reply s·ªë th·ª© t·ª± ƒë·ªÉ mua ƒëan d∆∞·ª£c`;
          return api.sendMessage(shopText, event.threadID, (error, info) => {
            if (!error) {
              global.client.handleReply.push({
                name: "tu",
                messageID: info.messageID,
                author: userID,
                type: "buy_potion",
                data: buyableItems,
                grade: gradeName
              });
            }
          });
        }
      } else {
        shopText += `Ch∆∞a c√≥ trang b·ªã n√†o trong danh m·ª•c n√†y!`;
      }
      shopText += `\nüí° V·∫≠t ph·∫©m nh·∫∑t t·ª´ qu√°i, ƒëan d∆∞·ª£c mua b·∫±ng linh th·∫°ch`;
      return api.sendMessage(shopText, event.threadID, event.messageID);
    }
    return api.sendMessage("‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
  }

  // X·ª≠ l√Ω reply cho mua ƒëan d∆∞·ª£c
  if (handleReply.type === "buy_potion") {
    const potionIndex = parseInt(choice) - 1;
    if (potionIndex >= 0 && potionIndex < handleReply.data.length) {
      const potion = handleReply.data[potionIndex];

      // Hi·ªÉn th·ªã t√πy ch·ªçn mua s·ªë l∆∞·ª£ng
      let buyText = `üõí Mua ${potion.name}:\n\n`;
      buyText += `üíé Gi√°: ${potion.buyPrice} linh th·∫°ch/vi√™n\n`;
      buyText += `üí∞ Linh th·∫°ch hi·ªán c√≥: ${player.spiritStones}\n\n`;
      buyText += `1. Mua 1 vi√™n - üíé${potion.buyPrice}\n`;
      if (player.spiritStones >= potion.buyPrice * 5) {
        buyText += `2. Mua 5 vi√™n - üíé${potion.buyPrice * 5}\n`;
      }
      if (player.spiritStones >= potion.buyPrice * 10) {
        buyText += `3. Mua 10 vi√™n - üíé${potion.buyPrice * 10}\n`;
      }
      buyText += `\nüí° Reply s·ªë th·ª© t·ª± ƒë·ªÉ ch·ªçn s·ªë l∆∞·ª£ng`;

      return api.sendMessage(buyText, event.threadID, (error, info) => {
        if (!error) {
          global.client.handleReply.push({
            name: "tu",
            messageID: info.messageID,
            author: userID,
            type: "buy_quantity",
            data: potion
          });
        }
      });
    }
    return api.sendMessage("‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
  }

  // X·ª≠ l√Ω reply cho mua v·∫≠t li·ªáu
  if (handleReply.type === "buy_material") {
    const materialIndex = parseInt(choice) - 1;
    if (materialIndex >= 0 && materialIndex < handleReply.data.length) {
      const material = handleReply.data[materialIndex];
      const sellPrice = (material.value || 10) * 3; // Gi√° b√°n = value * 3
      const price = sellPrice + 50; // Gi√° mua = gi√° b√°n + 50 linh th·∫°ch
      
      if (player.spiritStones >= price) {
        // T·∫°o v·∫≠t li·ªáu ƒë·ªÉ th√™m v√†o kho
        const materialItem = {
          name: material.name || "V·∫≠t li·ªáu kh√¥ng t√™n",
          type: "v·∫≠t li·ªáu",
          grade: getGradeFromRarity(material.rarity || "Th∆∞·ªùng"),
          rarity: material.rarity || "Th∆∞·ªùng",
          description: material.description || "V·∫≠t li·ªáu luy·ªán ƒëan",
          sellPrice: sellPrice, // Gi√° b√°n = value * 3
          buyPrice: price, // Gi√° mua = gi√° b√°n + 50
          beastLevel: material.beastLevel || "Ph√†m Th√∫",
          uses: material.uses || ["Luy·ªán ƒëan"],
          obtainedAt: new Date().toISOString()
        };
        
        player.spiritStones -= price;
        addEquipment(player, materialItem);
        savePlayer(userID, player);
        
        const gradeIcon = getGradeIcon(materialItem.grade);
        let buyMsg = `‚úÖ ƒê√É MUA TH√ÄNH C√îNG!\n\n`;
        buyMsg += `${gradeIcon} ${material.name}\n`;
        buyMsg += `üìã ${material.description}\n`;
        buyMsg += `üíé ƒê√£ tr·∫£: ${price.toLocaleString()} linh th·∫°ch\n`;
        buyMsg += `üí∞ Linh th·∫°ch c√≤n l·∫°i: ${player.spiritStones.toLocaleString()}\n`;
        buyMsg += `üì¶ ƒê√£ th√™m v√†o kho ƒë·ªì ƒë·ªÉ luy·ªán ƒëan`;
        
        return api.sendMessage(buyMsg, event.threadID, event.messageID);
      } else {
        const shortage = price - player.spiritStones;
        return api.sendMessage(`‚ùå Kh√¥ng ƒë·ªß linh th·∫°ch!\nüíé C·∫ßn: ${price.toLocaleString()}\nüí∞ C√≥: ${player.spiritStones.toLocaleString()}\nüíé Thi·∫øu: ${shortage.toLocaleString()}`, event.threadID, event.messageID);
      }
    }
    return api.sendMessage("‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
  }

  // X·ª≠ l√Ω reply cho mua s·ªë l∆∞·ª£ng ƒëan d∆∞·ª£c
  if (handleReply.type === "buy_quantity") {
    const quantityChoice = parseInt(choice);
    const potion = handleReply.data;
    let quantity = 0;

    switch (quantityChoice) {
      case 1: quantity = 1; break;
      case 2: quantity = 5; break;
      case 3: quantity = 10; break;
      default: return api.sendMessage("‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
    }

    const totalCost = potion.buyPrice * quantity;
    if (player.spiritStones >= totalCost) {
      player.spiritStones -= totalCost;
      addEquipment(player, potion, quantity);
      savePlayer(userID, player);
      return api.sendMessage(`‚úÖ ƒê√£ mua ${quantity} vi√™n ${potion.name} v·ªõi ${totalCost} linh th·∫°ch!\nüíä ${potion.description}\nüíé Linh th·∫°ch c√≤n l·∫°i: ${player.spiritStones}`, event.threadID, event.messageID);
    } else {
      return api.sendMessage(`‚ùå Kh√¥ng ƒë·ªß linh th·∫°ch! C·∫ßn ${totalCost} linh th·∫°ch, b·∫°n ch·ªâ c√≥ ${player.spiritStones}.`, event.threadID, event.messageID);
    }
  }

  // X·ª≠ l√Ω reply cho b√°n trang b·ªã
  if (handleReply.type === "sell_equipment") {
    const sellChoice = parseInt(choice);
    const equipGroup = handleReply.data;
    let sellQuantity = 0;

    switch (sellChoice) {
      case 1: sellQuantity = 1; break;
      case 2: sellQuantity = equipGroup.count; break;
      default: return api.sendMessage("‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
    }

    // X√≥a s·ªë l∆∞·ª£ng trang b·ªã kh·ªèi inventory
    let removed = 0;
    for (let i = player.inventory.length - 1; i >= 0 && removed < sellQuantity; i--) {
      if (player.inventory[i].name === equipGroup.name && player.inventory[i].type === equipGroup.item.type) {
        player.inventory.splice(i, 1);
        removed++;
      }
    }

    const totalEarned = equipGroup.item.sellPrice * sellQuantity;
    player.spiritStones += totalEarned;
    savePlayer(userID, player);

    const gradeIcon = getGradeIcon(equipGroup.item.grade);
    return api.sendMessage(`üí∞ ƒê√£ b√°n ${sellQuantity} ${gradeIcon} ${equipGroup.name} ƒë∆∞·ª£c ${totalEarned} linh th·∫°ch!\nüíé Linh th·∫°ch hi·ªán t·∫°i: ${player.spiritStones}`, event.threadID, event.messageID);
  }

  // X·ª≠ l√Ω reply cho inventory action (s·ª≠ d·ª•ng ƒëan d∆∞·ª£c ho·∫∑c b√°n trang b·ªã)
  if (handleReply.type === "inventory_action") {
    const itemIndex = parseInt(choice) - 1;
    const totalPotionGroups = handleReply.data.potionGroups.length;

    if (itemIndex >= 0 && itemIndex < totalPotionGroups) {
      // S·ª≠ d·ª•ng ƒëan d∆∞·ª£c
      const potionGroup = handleReply.data.potionGroups[itemIndex];
      const inventoryIndex = player.inventory.findIndex(item => 
        item.name === potionGroup.name && item.type === "ƒëan d∆∞·ª£c"
      );

      if (inventoryIndex !== -1) {
        const potion = player.inventory[inventoryIndex];
        player.inventory.splice(inventoryIndex, 1);
        applyPotionEffects(player, potion);
        savePlayer(userID, player);

        let msg = `‚úÖ ƒê√£ s·ª≠ d·ª•ng ${potion.name}!\n`;
        msg += `üíä ${potion.description}\n`;
        if (potionGroup.count > 1) {
          msg += `üì¶ C√≤n l·∫°i: ${potionGroup.count - 1} vi√™n\n`;
        }

        // Hi·ªÉn th·ªã tr·∫°ng th√°i hi·ªán t·∫°i
        if (hasExpBoost(player)) {
          const boostTimeLeft = Math.ceil((new Date(player.expBoostUntil) - new Date()) / 60000);
          msg += `‚ö° Buff exp: ${player.expBoostMultiplier}x (${boostTimeLeft} ph√∫t)\n`;
        }
        if (hasInjuryImmunity(player)) {
          const immunityTimeLeft = Math.ceil((new Date(player.immunityUntil) - new Date()) / 60000);
          msg += `üõ°Ô∏è Mi·ªÖn nhi·ªÖm b·ªã th∆∞∆°ng (${immunityTimeLeft} ph√∫t)\n`;
        }
        if (!isPlayerInjured(player)) {
          msg += `ü©π Tr·∫°ng th√°i: Kh·ªèe m·∫°nh`;
        }

        return api.sendMessage(msg, event.threadID, event.messageID);
      }
    } else if (itemIndex >= totalPotionGroups && itemIndex < totalPotionGroups + handleReply.data.equipmentGroups.length) {
      // B√°n trang b·ªã
      const equipIndex = itemIndex - totalPotionGroups;
      const equipGroup = handleReply.data.equipmentGroups[equipIndex];

      // Hi·ªÉn th·ªã t√πy ch·ªçn b√°n
      let sellText = `üí∞ B√°n ${equipGroup.name}:\n\n`;
      sellText += `1. B√°n 1 c√°i - üíé${equipGroup.item.sellPrice}\n`;
      if (equipGroup.count > 1) {
        sellText += `2. B√°n t·∫•t c·∫£ (${equipGroup.count} c√°i) - üíé${equipGroup.item.sellPrice * equipGroup.count}\n`;
      }
      sellText += `\nüí° Reply s·ªë th·ª© t·ª± ƒë·ªÉ ch·ªçn`;

      return api.sendMessage(sellText, event.threadID, (error, info) => {
        if (!error) {
          global.client.handleReply.push({
            name: "tu",
            messageID: info.messageID,
            author: userID,
            type: "sell_equipment",
            data: equipGroup
          });
        }
      });
    }
    return api.sendMessage("‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
  }

  // X·ª≠ l√Ω reply cho luy·ªán ƒëan
  if (handleReply.type === "craft_potion") {
    const input = choice.trim();
    
    // Ki·ªÉm tra n·∫øu c√≥ format "s·ªë c√¥ng th·ª©c s·ªë l∆∞·ª£ng" (v√≠ d·ª•: "1 5")
    const parts = input.split(' ').filter(p => p.trim());
    let recipeIndex = -1;
    let quantity = 1;
    
    if (parts.length === 2) {
      // Format: "1 5" - luy·ªán c√¥ng th·ª©c 1 v·ªõi s·ªë l∆∞·ª£ng 5
      recipeIndex = parseInt(parts[0]) - 1;
      quantity = parseInt(parts[1]);
      
      if (isNaN(quantity) || quantity <= 0 || quantity > 100) {
        return api.sendMessage("‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p t·ª´ 1-100.", event.threadID, event.messageID);
      }
    } else if (parts.length === 1) {
      // Format c≈©: ch·ªâ s·ªë c√¥ng th·ª©c
      recipeIndex = parseInt(parts[0]) - 1;
      quantity = 1;
    } else {
      return api.sendMessage("‚ùå C√∫ ph√°p kh√¥ng ƒë√∫ng!\nV√≠ d·ª•: 1 (luy·ªán 1 l·∫ßn) ho·∫∑c 1 5 (luy·ªán 5 l·∫ßn)", event.threadID, event.messageID);
    }
    
    if (recipeIndex >= 0 && recipeIndex < handleReply.data.length) {
      const recipe = handleReply.data[recipeIndex];
      
      // Ki·ªÉm tra kh·∫£ nƒÉng luy·ªán v·ªõi s·ªë l∆∞·ª£ng y√™u c·∫ßu
      const totalSpiritStones = recipe.spiritStones * quantity;
      const requiredMaterials = {};
      recipe.materials.forEach(mat => {
        requiredMaterials[mat.name] = mat.quantity * quantity;
      });
      
      // Ki·ªÉm tra ƒëi·ªÅu ki·ªán
      if (player.level < recipe.minLevel) {
        return api.sendMessage(`‚ùå C·∫ßn ƒë·∫°t level ${recipe.minLevel} ƒë·ªÉ luy·ªán ƒëan n√†y!`, event.threadID, event.messageID);
      }
      
      if (player.spiritStones < totalSpiritStones) {
        return api.sendMessage(`‚ùå Kh√¥ng ƒë·ªß linh th·∫°ch!\nüíé C·∫ßn: ${totalSpiritStones.toLocaleString()}\nüí∞ C√≥: ${player.spiritStones.toLocaleString()}`, event.threadID, event.messageID);
      }
      
      // Ki·ªÉm tra nguy√™n li·ªáu
      const playerMaterials = getPlayerMaterials(player);
      for (const [matName, requiredCount] of Object.entries(requiredMaterials)) {
        let playerCount = 0;
        playerMaterials.forEach(item => {
          if (item.name === matName) {
            playerCount += (item.quantity || 1);
          }
        });

        if (playerCount < requiredCount) {
          return api.sendMessage(`‚ùå Thi·∫øu nguy√™n li·ªáu!\nüß∞ C·∫ßn: ${matName} x${requiredCount}\nüì¶ C√≥: ${playerCount}`, event.threadID, event.messageID);
        }
      }
      
      // Hi·ªÉn th·ªã x√°c nh·∫≠n luy·ªán ƒëan
      let confirmText = `üß™ X√ÅC NH·∫¨N LUY·ªÜN ƒêAN:\n\n`;
      const gradeIcon = getGradeIcon(recipe.grade);
      confirmText += `${gradeIcon} ${recipe.name}`;
      if (quantity > 1) confirmText += ` x${quantity}`;
      confirmText += `\nüìã ${recipe.description}\n\n`;
      confirmText += `üíé Chi ph√≠ t·ªïng: ${totalSpiritStones.toLocaleString()} linh th·∫°ch\n`;
      confirmText += `üß∞ Nguy√™n li·ªáu s·∫Ω ti√™u hao:\n`;
      Object.entries(requiredMaterials).forEach(([matName, count]) => {
        confirmText += `   ‚Ä¢ ${matName} x${count}\n`;
      });
      confirmText += `\n‚öóÔ∏è T·ª∑ l·ªá th√†nh c√¥ng m·ªói l·∫ßn: 85%\n`;
      if (quantity > 1) {
        confirmText += `üìä D·ª± ki·∫øn: ~${Math.round(quantity * 0.85)} th√†nh c√¥ng, ~${quantity - Math.round(quantity * 0.85)} th·∫•t b·∫°i\n`;
      }
      confirmText += `\n1. üß™ B·∫Øt ƒë·∫ßu luy·ªán ƒëan\n`;
      confirmText += `2. ‚ùå H·ªßy b·ªè\n\n`;
      confirmText += `üí° Reply s·ªë th·ª© t·ª± ƒë·ªÉ ch·ªçn`;
      
      return api.sendMessage(confirmText, event.threadID, (error, info) => {
        if (!error) {
          global.client.handleReply.push({
            name: "tu",
            messageID: info.messageID,
            author: userID,
            type: "craft_confirm",
            data: { recipe, quantity }
          });
        }
      });
    }
    return api.sendMessage("‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
  }

  // X·ª≠ l√Ω reply cho x√°c nh·∫≠n luy·ªán ƒëan
  if (handleReply.type === "craft_confirm") {
    const confirmChoice = parseInt(choice);
    const { recipe, quantity } = handleReply.data;
    
    if (confirmChoice === 1) {
      // Luy·ªán ƒëan v·ªõi s·ªë l∆∞·ª£ng
      let successCount = 0;
      let failCount = 0;
      const results = [];
      
      for (let i = 0; i < quantity; i++) {
        // Ki·ªÉm tra l·∫°i ƒëi·ªÅu ki·ªán tr∆∞·ªõc m·ªói l·∫ßn luy·ªán
        const canCraft = canCraftPotion(player, recipe);
        if (!canCraft.canCraft) {
          break; // D·ª´ng n·∫øu kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán
        }
        
        const result = craftPotion(player, recipe);
        if (result.success) {
          successCount++;
          results.push(`‚úÖ L·∫ßn ${i + 1}: Th√†nh c√¥ng`);
        } else {
          failCount++;
          results.push(`‚ùå L·∫ßn ${i + 1}: Th·∫•t b·∫°i`);
        }
      }
      
      savePlayer(userID, player);
      
      if (successCount > 0 || failCount > 0) {
        const gradeIcon = getGradeIcon(recipe.grade);
        let resultMsg = `üß™ K·∫æT QU·∫¢ LUY·ªÜN ƒêAN:\n\n`;
        resultMsg += `${gradeIcon} ${recipe.name}\n`;
        resultMsg += `üìä T·ªïng quan:\n`;
        resultMsg += `   ‚úÖ Th√†nh c√¥ng: ${successCount}/${quantity} (${Math.round(successCount/quantity*100)}%)\n`;
        resultMsg += `   ‚ùå Th·∫•t b·∫°i: ${failCount}/${quantity} (${Math.round(failCount/quantity*100)}%)\n\n`;
        
        if (successCount > 0) {
          resultMsg += `üéâ Nh·∫≠n ƒë∆∞·ª£c ${successCount} vi√™n ${recipe.name}!\n`;
        }
        if (failCount > 0) {
          resultMsg += `üíî ${failCount} l·∫ßn luy·ªán ƒëan th·∫•t b·∫°i\n`;
        }
        
        resultMsg += `\nüíé Linh th·∫°ch c√≤n l·∫°i: ${player.spiritStones.toLocaleString()}\n`;
        resultMsg += `üì¶ ƒêan d∆∞·ª£c ƒë√£ ƒë∆∞·ª£c th√™m v√†o kho ƒë·ªì!\n\n`;
        resultMsg += `üí° D√πng l·ªánh .tu 3 ƒë·ªÉ xem kho ƒë·ªì v√† s·ª≠ d·ª•ng ƒëan d∆∞·ª£c`;
        
        return api.sendMessage(resultMsg, event.threadID, event.messageID);
      } else {
        return api.sendMessage(`‚ùå Kh√¥ng th·ªÉ luy·ªán ƒëan! Vui l√≤ng ki·ªÉm tra l·∫°i ƒëi·ªÅu ki·ªán.`, event.threadID, event.messageID);
      }
    } else if (confirmChoice === 2) {
      return api.sendMessage(`‚ùå ƒê√£ h·ªßy b·ªè luy·ªán ƒëan.`, event.threadID, event.messageID);
    }
    
    return api.sendMessage("‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
  }

  

  // X·ª≠ l√Ω reply cho kho ƒë·ªì m·ªõi
  if (handleReply.type === "inventory_new") {
    const itemIndex = parseInt(choice) - 1;
    if (itemIndex >= 0 && itemIndex < handleReply.data.length) {
      const selectedGroup = handleReply.data[itemIndex];
      const { item, count } = selectedGroup;

      if (item.type === "ƒëan d∆∞·ª£c") {
        // S·ª≠ d·ª•ng ƒëan d∆∞·ª£c
        const inventoryIndex = player.inventory.findIndex(invItem => 
          invItem.name === item.name && invItem.type === "ƒëan d∆∞·ª£c"
        );
        if (inventoryIndex !== -1) {
          player.inventory.splice(inventoryIndex, 1);
          applyPotionEffects(player, item);
          savePlayer(userID, player);

          let msg = `‚úÖ ƒê√£ s·ª≠ d·ª•ng ${item.name}!\nüíä ${item.description}\n`;
          if (count > 1) msg += `üì¶ C√≤n l·∫°i: ${count - 1} vi√™n\n`;
          return api.sendMessage(msg, event.threadID, event.messageID);
        }
      } else {
        // B√°n v·∫≠t ph·∫©m kh√°c
        let sellText = `üí∞ B√°n ${item.name}:\n\n`;
        sellText += `1. B√°n 1 c√°i - üíé${item.sellPrice}\n`;
        if (count > 1) {
          sellText += `2. B√°n t·∫•t c·∫£ (${count} c√°i) - üíé${item.sellPrice * count}\n`;
        }
        sellText += `\nüí° Reply s·ªë th·ª© t·ª± ƒë·ªÉ b√°n`;

        return api.sendMessage(sellText, event.threadID, (error, info) => {
          if (!error) {
            global.client.handleReply.push({
              name: "tu",
              messageID: info.messageID,
              author: userID,
              type: "sell_item_new",
              data: selectedGroup
            });
          }
        });
      }
    }
    return api.sendMessage("‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
  }

  // X·ª≠ l√Ω reply cho b√°n v·∫≠t ph·∫©m m·ªõi
  if (handleReply.type === "sell_item_new") {
    const sellChoice = parseInt(choice);
    const { item, count } = handleReply.data;
    let sellQuantity = 0;

    switch (sellChoice) {
      case 1: sellQuantity = 1; break;
      case 2: sellQuantity = count; break;
      default: return api.sendMessage("‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
    }

    // X√≥a v·∫≠t ph·∫©m kh·ªèi inventory
    let removed = 0;
    for (let i = player.inventory.length - 1; i >= 0 && removed < sellQuantity; i--) {
      if (player.inventory[i].name === item.name && player.inventory[i].type === item.type) {
        player.inventory.splice(i, 1);
        removed++;
      }
    }

    const totalEarned = item.sellPrice * sellQuantity;
    player.spiritStones += totalEarned;
    savePlayer(userID, player);

    const gradeIcon = getGradeIcon(item.grade);
    return api.sendMessage(`üí∞ ƒê√£ b√°n ${sellQuantity} ${gradeIcon} ${item.name} ƒë∆∞·ª£c ${totalEarned} linh th·∫°ch!\nüíé Linh th·∫°ch hi·ªán t·∫°i: ${player.spiritStones}`, event.threadID, event.messageID);
  }

  // X·ª≠ l√Ω reply cho trang b·ªã v≈© kh√≠
  if (handleReply.type === "equip_weapon") {
    const weaponIndex = parseInt(choice) - 1;
    if (weaponIndex >= 0 && weaponIndex < handleReply.data.length) {
      const selectedWeaponGroup = handleReply.data[weaponIndex];
      const selectedWeapon = selectedWeaponGroup.weapon;
      
      // Ki·ªÉm tra xem c√≥ ph·∫£i v≈© kh√≠ ƒëang s·ª≠ d·ª•ng kh√¥ng
      const currentWeapons = player.inventory.filter(item => item.type === "v≈© kh√≠");
      const currentBestWeapon = currentWeapons.reduce((best, weapon) => 
        (weapon.attack || 0) > (best.attack || 0) ? weapon : best
      );
      
      if (selectedWeapon.name === currentBestWeapon.name && selectedWeapon.grade === currentBestWeapon.grade) {
        return api.sendMessage("‚öîÔ∏è B·∫°n ƒë√£ ƒëang trang b·ªã v≈© kh√≠ n√†y r·ªìi!", event.threadID, event.messageID);
      }
      
      // Th√¥ng b√°o trang b·ªã th√†nh c√¥ng (v≈© kh√≠ s·∫Ω t·ª± ƒë·ªông ƒë∆∞·ª£c s·ª≠ d·ª•ng d·ª±a tr√™n s√°t th∆∞∆°ng cao nh·∫•t)
      const gradeIcon = getGradeIcon(selectedWeapon.grade);
      const rarityIcon = getRarityIcon(selectedWeapon.rarity);
      let equipMsg = `‚úÖ ƒê√£ ch·ªçn trang b·ªã ${gradeIcon}${rarityIcon} ${selectedWeapon.name}!\n`;
      equipMsg += `üí• S√°t th∆∞∆°ng: ${selectedWeapon.attack}\n`;
      
      if (selectedWeapon.attack > currentBestWeapon.attack) {
        equipMsg += `üìà S√°t th∆∞∆°ng tƒÉng t·ª´ ${currentBestWeapon.attack} l√™n ${selectedWeapon.attack}!\n`;
      } else if (selectedWeapon.attack < currentBestWeapon.attack) {
        equipMsg += `‚ö†Ô∏è L∆∞u √Ω: V≈© kh√≠ c√≥ s√°t th∆∞∆°ng cao nh·∫•t (${currentBestWeapon.name} - ${currentBestWeapon.attack}) v·∫´n s·∫Ω ƒë∆∞·ª£c ∆∞u ti√™n s·ª≠ d·ª•ng\n`;
      }
      
      equipMsg += `üìä T·ªïng s√°t th∆∞∆°ng hi·ªán t·∫°i: ${getPlayerAttack(player)}`;
      savePlayer(userID, player);
      return api.sendMessage(equipMsg, event.threadID, event.messageID);
    }
    return api.sendMessage("‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
  }

  // X·ª≠ l√Ω reply cho kho ƒë·ªì ƒë√£ g·ªôp
  if (handleReply.type === "inventory_action_grouped") {
    // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng nh·∫≠p nhi·ªÅu s·ªë (v√≠ d·ª•: "1 2 3", "1-3", ho·∫∑c "1 3" cho s·ªë l∆∞·ª£ng)
    const choiceStr = choice.trim();
    const isMultipleChoice = choiceStr.includes(' ') || choiceStr.includes('-');
    
    if (isMultipleChoice) {
      // X·ª≠ l√Ω s·ª≠ d·ª•ng nhi·ªÅu ƒë·ªì c√πng l√∫c
      let indices = [];
      
      if (choiceStr.includes('-')) {
        // X·ª≠ l√Ω c√∫ ph√°p "1-3" (t·ª´ 1 ƒë·∫øn 3)
        const rangeParts = choiceStr.split('-');
        if (rangeParts.length === 2) {
          const start = parseInt(rangeParts[0].trim());
          const end = parseInt(rangeParts[1].trim());
          
          if (!isNaN(start) && !isNaN(end) && start <= end && start > 0 && end <= handleReply.data.length) {
            for (let i = start; i <= end; i++) {
              indices.push(i - 1);
            }
          } else {
            return api.sendMessage("‚ùå C√∫ ph√°p kh√¥ng h·ª£p l·ªá! V√≠ d·ª•: 1-3 (b√°n t·ª´ v·∫≠t ph·∫©m 1 ƒë·∫øn 3)", event.threadID, event.messageID);
          }
        } else {
          return api.sendMessage("‚ùå C√∫ ph√°p kh√¥ng h·ª£p l·ªá! V√≠ d·ª•: 1-3 (b√°n t·ª´ v·∫≠t ph·∫©m 1 ƒë·∫øn 3)", event.threadID, event.messageID);
        }
      } else {
        // Ki·ªÉm tra n·∫øu l√† format "s·ªë_v·∫≠t_ph·∫©m s·ªë_l∆∞·ª£ng" (v√≠ d·ª•: "1 3")
        const parts = choiceStr.split(' ').filter(p => p.trim());
        if (parts.length === 2) {
          const itemIndex = parseInt(parts[0]) - 1;
          const quantity = parseInt(parts[1]);
          
          if (!isNaN(itemIndex) && !isNaN(quantity) && 
              itemIndex >= 0 && itemIndex < handleReply.data.length && 
              quantity > 0) {
            
            const selectedGroup = handleReply.data[itemIndex];
            const { item, count } = selectedGroup;
            
            // Ch·ªâ cho ph√©p b√°n (kh√¥ng ph·∫£i ƒëan d∆∞·ª£c)
            if (item.type === "ƒëan d∆∞·ª£c") {
              return api.sendMessage("‚ùå Kh√¥ng th·ªÉ b√°n ƒëan d∆∞·ª£c v·ªõi c√∫ ph√°p n√†y!\nüí° S·ª≠ d·ª•ng s·ªë th·ª© t·ª± ƒë·ªÉ d√πng ƒëan d∆∞·ª£c", event.threadID, event.messageID);
            }
            
            if (quantity > count) {
              return api.sendMessage(`‚ùå S·ªë l∆∞·ª£ng v∆∞·ª£t qu√° gi·ªõi h·∫°n!\nüì¶ B·∫°n ch·ªâ c√≥ ${count} ${item.name}\nüí° Vui l√≤ng nh·∫≠p s·ªë t·ª´ 1 ƒë·∫øn ${count}`, event.threadID, event.messageID);
            }
            
            // X√≥a s·ªë l∆∞·ª£ng v·∫≠t ph·∫©m kh·ªèi inventory
            let removed = 0;
            for (let i = player.inventory.length - 1; i >= 0 && removed < quantity; i--) {
              if (player.inventory[i].name === item.name && 
                  player.inventory[i].type === item.type && 
                  player.inventory[i].grade === item.grade) {
                player.inventory.splice(i, 1);
                removed++;
              }
            }
            
            const totalEarned = item.sellPrice * quantity;
            player.spiritStones += totalEarned;
            savePlayer(userID, player);
            
            const gradeIcon = getGradeIcon(item.grade);
            const rarityIcon = getRarityIcon(item.rarity);
            let sellMsg = `üí∞ ƒê√É B√ÅN TH√ÄNH C√îNG!\n\n`;
            sellMsg += `${gradeIcon}${rarityIcon} ${item.name} x${quantity}\n`;
            sellMsg += `üíé Nh·∫≠n ƒë∆∞·ª£c: ${totalEarned.toLocaleString()} linh th·∫°ch\n`;
            sellMsg += `üí∞ Linh th·∫°ch hi·ªán t·∫°i: ${player.spiritStones.toLocaleString()}\n`;
            if (count > quantity) {
              sellMsg += `üì¶ C√≤n l·∫°i trong kho: ${count - quantity} c√°i`;
            }
            
            return api.sendMessage(sellMsg, event.threadID, event.messageID);
          } else {
            return api.sendMessage("‚ùå C√∫ ph√°p kh√¥ng h·ª£p l·ªá!\nüí° V√≠ d·ª•: 1 3 (b√°n 3 v·∫≠t ph·∫©m lo·∫°i s·ªë 1)", event.threadID, event.messageID);
          }
        } else {
          // X·ª≠ l√Ω c√∫ ph√°p "1 2 3" (c√°c s·ªë c√°ch nhau b·∫±ng d·∫•u c√°ch)
          indices = parts.map(num => parseInt(num.trim()) - 1).filter(index => !isNaN(index));
        }
      }
      
      if (indices.length === 0) {
        return api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá! V√≠ d·ª•: 1 2 3", event.threadID, event.messageID);
      }
      
      // L·ªçc ch·ªâ ƒëan d∆∞·ª£c
      const potionIndices = indices.filter(index => {
        if (index >= 0 && index < handleReply.data.length) {
          const selectedGroup = handleReply.data[index];
          return selectedGroup.item.type === "ƒëan d∆∞·ª£c";
        }
        return false;
      });
      
      // Ki·ªÉm tra xem c√≥ ph·∫£i ch·ªâ ƒëan d∆∞·ª£c kh√¥ng
      const nonPotionIndices = indices.filter(index => {
        if (index >= 0 && index < handleReply.data.length) {
          const selectedGroup = handleReply.data[index];
          return selectedGroup.item.type !== "ƒëan d∆∞·ª£c";
        }
        return false;
      });
      
      // N·∫øu c√≥ c·∫£ ƒëan d∆∞·ª£c v√† v·∫≠t ph·∫©m kh√°c, ch·ªâ x·ª≠ l√Ω ƒëan d∆∞·ª£c
      if (potionIndices.length > 0 && nonPotionIndices.length > 0) {
        return api.sendMessage("‚ùå Kh√¥ng th·ªÉ tr·ªôn l·∫´n ƒëan d∆∞·ª£c v√† v·∫≠t ph·∫©m kh√°c!\nüí° S·ª≠ d·ª•ng ri√™ng: ƒëan d∆∞·ª£c ƒë·ªÉ d√πng, v·∫≠t ph·∫©m kh√°c ƒë·ªÉ b√°n", event.threadID, event.messageID);
      }
      
      // N·∫øu ch·ªâ c√≥ v·∫≠t ph·∫©m kh√¥ng ph·∫£i ƒëan d∆∞·ª£c, x·ª≠ l√Ω b√°n h√†ng lo·∫°t
      if (potionIndices.length === 0 && nonPotionIndices.length > 0) {
        let totalEarned = 0;
        let soldItems = [];
        
        // B√°n t·ª´ng v·∫≠t ph·∫©m
        for (const index of nonPotionIndices) {
          const selectedGroup = handleReply.data[index];
          const { item, count } = selectedGroup;
          
          // X√≥a to√†n b·ªô v·∫≠t ph·∫©m c√πng lo·∫°i kh·ªèi inventory
          let removed = 0;
          for (let i = player.inventory.length - 1; i >= 0 && removed < count; i--) {
            if (player.inventory[i].name === item.name && 
                player.inventory[i].type === item.type && 
                player.inventory[i].grade === item.grade) {
              player.inventory.splice(i, 1);
              removed++;
            }
          }
          
          const itemEarned = item.sellPrice * removed;
          totalEarned += itemEarned;
          soldItems.push(`${item.name} x${removed}`);
        }
        
        player.spiritStones += totalEarned;
        savePlayer(userID, player);
        
        let sellMsg = `üí∞ ƒê√É B√ÅN H√ÄNG LO·∫†T TH√ÄNH C√îNG!\n\n`;
        sellMsg += `üì¶ ƒê√£ b√°n:\n`;
        soldItems.forEach((item, i) => {
          sellMsg += `   ${i + 1}. ${item}\n`;
        });
        sellMsg += `\nüíé T·ªïng thu ƒë∆∞·ª£c: ${totalEarned.toLocaleString()} linh th·∫°ch\n`;
        sellMsg += `üí∞ Linh th·∫°ch hi·ªán t·∫°i: ${player.spiritStones.toLocaleString()}\n`;
        sellMsg += `üéâ ƒê√£ d·ªçn s·∫°ch ${soldItems.length} lo·∫°i v·∫≠t ph·∫©m!`;
        
        return api.sendMessage(sellMsg, event.threadID, event.messageID);
      }
      
      if (potionIndices.length === 0) {
        return api.sendMessage("‚ùå Kh√¥ng c√≥ v·∫≠t ph·∫©m h·ª£p l·ªá ƒë·ªÉ x·ª≠ l√Ω!", event.threadID, event.messageID);
      }
      
      let usedPotions = [];
      let totalEffects = {
        healAmount: 0,
        spiritPowerAmount: 0,
        hasExpBoost: false,
        hasImmunity: false,
        hasDaoCoreHeal: false,
        hasInjuryHeal: false
      };

      // S·ª≠ d·ª•ng t·ª´ng ƒëan d∆∞·ª£c
      for (const index of potionIndices) {
        const selectedGroup = handleReply.data[index];
        const { item } = selectedGroup;
        
        const inventoryIndex = player.inventory.findIndex(invItem => 
          invItem.name === item.name && invItem.type === "ƒëan d∆∞·ª£c" && invItem.grade === item.grade
        );
        
        if (inventoryIndex !== -1) {
          const potion = player.inventory[inventoryIndex];
          player.inventory.splice(inventoryIndex, 1);
          
          // T√≠nh t·ªïng hi·ªáu ·ª©ng
          if (potion.healAmount) {
            if (potion.healAmount === 9999) {
              totalEffects.healAmount = 9999;
            } else {
              totalEffects.healAmount += potion.healAmount;
            }
          }
          
          if (potion.spiritPowerAmount) {
            if (potion.spiritPowerAmount === 9999) {
              totalEffects.spiritPowerAmount = 9999;
            } else {
              totalEffects.spiritPowerAmount += potion.spiritPowerAmount;
            }
          }
          
          if (potion.subType === "ch·ªØa ƒë·∫°o c∆°" || potion.healDaoCore) {
            totalEffects.hasDaoCoreHeal = true;
          }
          
          if (potion.subType === "ch·ªØa th∆∞∆°ng") {
            totalEffects.hasInjuryHeal = true;
          }
          
          if (potion.grade === "linh kh√≠" || potion.grade === "linh b·∫£o" || potion.grade === "ti√™n kh√≠") {
            totalEffects.hasExpBoost = true;
          }
          
          if (potion.grade === "linh b·∫£o" || potion.grade === "ti√™n kh√≠") {
            totalEffects.hasImmunity = true;
          }
          
          usedPotions.push(potion.name);
        }
      }

      // √Åp d·ª•ng hi·ªáu ·ª©ng t·ªïng h·ª£p
      if (totalEffects.healAmount > 0) {
        if (totalEffects.healAmount === 9999) {
          player.hp = player.maxHp;
        } else {
          player.hp = Math.min(player.maxHp, player.hp + totalEffects.healAmount);
        }
      }

      if (totalEffects.spiritPowerAmount > 0) {
        if (totalEffects.spiritPowerAmount === 9999) {
          player.spiritPower = player.maxSpiritPower;
        } else {
          player.spiritPower = Math.min(player.maxSpiritPower, player.spiritPower + totalEffects.spiritPowerAmount);
        }
      }

      if (totalEffects.hasDaoCoreHeal) {
        healDaoCore(player);
      }

      if (totalEffects.hasInjuryHeal) {
        healPlayer(player);
      }

      if (totalEffects.hasExpBoost) {
        const now = new Date();
        const expBoostTime = new Date(now);
        expBoostTime.setMinutes(expBoostTime.getMinutes() + 30);
        player.expBoostUntil = expBoostTime.toISOString();
        player.expBoostMultiplier = 1.5;
      }

      if (totalEffects.hasImmunity) {
        const now = new Date();
        const immunityTime = new Date(now);
        immunityTime.setHours(immunityTime.getHours() + 1);
        player.immunityUntil = immunityTime.toISOString();
      }

      savePlayer(userID, player);

      let msg = `‚úÖ ƒê√£ s·ª≠ d·ª•ng ${usedPotions.length} ƒëan d∆∞·ª£c:\n`;
      msg += `üíä ${usedPotions.join(', ')}\n\n`;
      msg += `üìä HI·ªÜU QU·∫¢ T·ªîNG H·ª¢P:\n`;
      msg += `‚ù§Ô∏è M√°u: ${player.hp}/${player.maxHp}\n`;
      msg += `üí´ Linh l·ª±c: ${player.spiritPower}/${player.maxSpiritPower}\n`;
      
      if (totalEffects.hasExpBoost) {
        msg += `‚ö° Buff kinh nghi·ªám: x1.5 (30 ph√∫t)\n`;
      }
      if (totalEffects.hasImmunity) {
        msg += `üõ°Ô∏è Mi·ªÖn nhi·ªÖm b·ªã th∆∞∆°ng (1 gi·ªù)\n`;
      }
      if (totalEffects.hasDaoCoreHeal) {
        msg += `ü©π ƒê√£ ch·ªØa l√†nh ƒë·∫°o c∆°\n`;
      }
      if (totalEffects.hasInjuryHeal) {
        msg += `ü©π ƒê√£ ch·ªØa l√†nh th∆∞∆°ng t√≠ch\n`;
      }
      
      return api.sendMessage(msg, event.threadID, event.messageID);
    }
    
    // X·ª≠ l√Ω ƒë∆°n l·∫ª nh∆∞ c≈©
    const itemIndex = parseInt(choice) - 1;
    if (itemIndex >= 0 && itemIndex < handleReply.data.length) {
      const selectedGroup = handleReply.data[itemIndex];
      const { item, count, indices } = selectedGroup;

      if (item.type === "ƒëan d∆∞·ª£c") {
        // S·ª≠ d·ª•ng ƒëan d∆∞·ª£c
        const inventoryIndex = player.inventory.findIndex(invItem => 
          invItem.name === item.name && invItem.type === "ƒëan d∆∞·ª£c" && invItem.grade === item.grade
        );
        if (inventoryIndex !== -1) {
          player.inventory.splice(inventoryIndex, 1);
          applyPotionEffects(player, item);
          savePlayer(userID, player);

          let msg = `‚úÖ ƒê√£ s·ª≠ d·ª•ng ${item.name}!\nüíä ${item.description}\n`;
          if (count > 1) msg += `üì¶ C√≤n l·∫°i: ${count - 1} vi√™n\n`;
          
          // Hi·ªÉn th·ªã tr·∫°ng th√°i hi·ªán t·∫°i
          msg += `‚ù§Ô∏è M√°u: ${player.hp}/${player.maxHp}\n`;
          msg += `üí´ Linh l·ª±c: ${player.spiritPower}/${player.maxSpiritPower}\n`;
          if (hasExpBoost(player)) {
            const boostTimeLeft = Math.ceil((new Date(player.expBoostUntil) - new Date()) / 60000);
            msg += `‚ö° Buff exp: ${player.expBoostMultiplier}x (${boostTimeLeft} ph√∫t)\n`;
          }
          if (hasInjuryImmunity(player)) {
            const immunityTimeLeft = Math.ceil((new Date(player.immunityUntil) - new Date()) / 60000);
            msg += `üõ°Ô∏è Mi·ªÖn nhi·ªÖm b·ªã th∆∞∆°ng (${immunityTimeLeft} ph√∫t)\n`;
          }
          if (!isPlayerInjured(player)) {
            msg += `ü©π Tr·∫°ng th√°i: Kh·ªèe m·∫°nh`;
          }

          return api.sendMessage(msg, event.threadID, event.messageID);
        }
      } else {
        // B√°n v·∫≠t ph·∫©m kh√°c
        let sellText = `üí∞ B√ÅN V·∫¨T PH·∫®M:\n\n`;
        const gradeIcon = getGradeIcon(item.grade);
        const rarityIcon = getRarityIcon(item.rarity);
        const typeIcon = item.type === "v≈© kh√≠" ? "‚öîÔ∏è" :
                        item.type === "y√™u ƒëan" ? "üîÆ" : 
                        item.type === "v·∫≠t li·ªáu" ? "üß∞" : 
                        item.type === "ng·ªçc" ? "üíé" :
                        item.type === "tinh t√∫y" ? "‚ú®" :
                        item.type === "linh h·ªìn" ? "üëª" : "üì¶";
        
        sellText += `${gradeIcon}${rarityIcon}${typeIcon} ${item.name}`;
        if (count > 1) sellText += ` x${count}`;
        sellText += `\n`;
        
        if (item.type === "v≈© kh√≠") {
          sellText += `üó°Ô∏è S√°t th∆∞∆°ng: ${item.attack}\n`;
        }
        sellText += `üìã ${item.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}\n`;
        sellText += `üíé Gi√° b√°n: ${item.sellPrice} linh th·∫°ch/c√°i\n`;
        sellText += `üì¶ S·ªë l∆∞·ª£ng c√≥ trong kho: ${count}\n\n`;
        
        sellText += `1. B√°n 1 c√°i - üíé${item.sellPrice}\n`;
        if (count > 1) {
          sellText += `2. B√°n t·∫•t c·∫£ (${count} c√°i) - üíé${item.sellPrice * count}\n`;
          sellText += `3. Nh·∫≠p s·ªë l∆∞·ª£ng c·ª• th·ªÉ\n`;
        }
        sellText += `\nüí° Reply s·ªë th·ª© t·ª± ƒë·ªÉ b√°n`;

        return api.sendMessage(sellText, event.threadID, (error, info) => {
          if (!error) {
            global.client.handleReply.push({
              name: "tu",
              messageID: info.messageID,
              author: userID,
              type: "sell_item_grouped",
              data: selectedGroup
            });
          }
        });
      }
    }
    return api.sendMessage("‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
  }

  // X·ª≠ l√Ω reply cho b√°n v·∫≠t ph·∫©m ƒë√£ g·ªôp
  if (handleReply.type === "sell_item_grouped") {
    const sellChoice = parseInt(choice);
    const { item, count, indices } = handleReply.data;
    let sellQuantity = 0;

    switch (sellChoice) {
      case 1: sellQuantity = 1; break;
      case 2: sellQuantity = count; break;
      case 3: 
        if (count > 1) {
          // Y√™u c·∫ßu nh·∫≠p s·ªë l∆∞·ª£ng c·ª• th·ªÉ
          let inputText = `üìù NH·∫¨P S·ªê L∆Ø·ª¢NG MU·ªêN B√ÅN:\n\n`;
          inputText += `${getGradeIcon(item.grade)}${getRarityIcon(item.rarity)} ${item.name}\n`;
          inputText += `üì¶ S·ªë l∆∞·ª£ng hi·ªán c√≥: ${count}\n`;
          inputText += `üíé Gi√° b√°n: ${item.sellPrice.toLocaleString()} linh th·∫°ch/c√°i\n\n`;
          inputText += `üí° Nh·∫≠p s·ªë l∆∞·ª£ng mu·ªën b√°n (1-${count}):\n`;
          inputText += `V√≠ d·ª•: 13, 345, hay b·∫•t k·ª≥ s·ªë n√†o b·∫°n mu·ªën`;
          
          return api.sendMessage(inputText, event.threadID, (error, info) => {
            if (!error) {
              global.client.handleReply.push({
                name: "tu",
                messageID: info.messageID,
                author: userID,
                type: "sell_custom_quantity",
                data: { item, count, indices }
              });
            }
          });
        } else {
          return api.sendMessage("‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
        }
        break;
      default: return api.sendMessage("‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
    }

    // X√≥a v·∫≠t ph·∫©m kh·ªèi inventory (t·ª´ cu·ªëi l√™n ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng index)
    let removed = 0;
    for (let i = player.inventory.length - 1; i >= 0 && removed < sellQuantity; i--) {
      if (player.inventory[i].name === item.name && 
          player.inventory[i].type === item.type && 
          player.inventory[i].grade === item.grade) {
        player.inventory.splice(i, 1);
        removed++;
      }
    }

    const totalEarned = item.sellPrice * sellQuantity;
    player.spiritStones += totalEarned;
    savePlayer(userID, player);

    const gradeIcon = getGradeIcon(item.grade);
    const rarityIcon = getRarityIcon(item.rarity);
    let sellMsg = `üí∞ ƒê√É B√ÅN TH√ÄNH C√îNG!\n\n`;
    sellMsg += `${gradeIcon}${rarityIcon} ${item.name} x${sellQuantity}\n`;
    sellMsg += `üíé Nh·∫≠n ƒë∆∞·ª£c: ${totalEarned.toLocaleString()} linh th·∫°ch\n`;
    sellMsg += `üí∞ Linh th·∫°ch hi·ªán t·∫°i: ${player.spiritStones.toLocaleString()}\n`;
    if (count > sellQuantity) {
      sellMsg += `üì¶ C√≤n l·∫°i trong kho: ${count - sellQuantity} c√°i`;
    }
    
    return api.sendMessage(sellMsg, event.threadID, event.messageID);
  }

  // X·ª≠ l√Ω reply cho nh·∫≠p s·ªë l∆∞·ª£ng t√πy ch·ªânh khi b√°n
  if (handleReply.type === "sell_custom_quantity") {
    const inputQuantity = parseInt(choice.trim());
    const { item, count, indices } = handleReply.data;
    
    if (isNaN(inputQuantity) || inputQuantity <= 0) {
      return api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng h·ª£p l·ªá!\nV√≠ d·ª•: 13, 345", event.threadID, event.messageID);
    }
    
    if (inputQuantity > count) {
      return api.sendMessage(`‚ùå S·ªë l∆∞·ª£ng v∆∞·ª£t qu√° gi·ªõi h·∫°n!\nüì¶ B·∫°n ch·ªâ c√≥ ${count} c√°i trong kho\nüí° Vui l√≤ng nh·∫≠p s·ªë t·ª´ 1 ƒë·∫øn ${count}`, event.threadID, event.messageID);
    }
    
    // X√≥a v·∫≠t ph·∫©m kh·ªèi inventory (t·ª´ cu·ªëi l√™n ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng index)
    let removed = 0;
    for (let i = player.inventory.length - 1; i >= 0 && removed < inputQuantity; i--) {
      if (player.inventory[i].name === item.name && 
          player.inventory[i].type === item.type && 
          player.inventory[i].grade === item.grade) {
        player.inventory.splice(i, 1);
        removed++;
      }
    }

    const totalEarned = item.sellPrice * inputQuantity;
    player.spiritStones += totalEarned;
    savePlayer(userID, player);

    const gradeIcon = getGradeIcon(item.grade);
    const rarityIcon = getRarityIcon(item.rarity);
    let sellMsg = `üí∞ ƒê√É B√ÅN TH√ÄNH C√îNG!\n\n`;
    sellMsg += `${gradeIcon}${rarityIcon} ${item.name} x${inputQuantity}\n`;
    sellMsg += `üíé Nh·∫≠n ƒë∆∞·ª£c: ${totalEarned.toLocaleString()} linh th·∫°ch\n`;
    sellMsg += `üí∞ Linh th·∫°ch hi·ªán t·∫°i: ${player.spiritStones.toLocaleString()}\n`;
    if (count > inputQuantity) {
      sellMsg += `üì¶ C√≤n l·∫°i trong kho: ${count - inputQuantity} c√°i`;
    }
    
    return api.sendMessage(sellMsg, event.threadID, event.messageID);
  }

  // X·ª≠ l√Ω reply cho menu tu luy·ªán
  if (handleReply.type === "cultivation_menu") {
    const cultivationChoice = parseInt(choice);
    const { recommendedCost } = handleReply.data;
    let amount = 0;
    
    switch (cultivationChoice) {
      case 1: amount = 100; break;
      case 2: amount = 500; break;
      case 3: amount = 1000; break;
      case 4: amount = recommendedCost; break;
      case 5:
        return api.sendMessage(`üßò Nh·∫≠p s·ªë linh th·∫°ch mu·ªën tu luy·ªán:\nüí° V√≠ d·ª•: 2000\nüíé Linh th·∫°ch hi·ªán c√≥: ${player.spiritStones.toLocaleString()}`, event.threadID, (error, info) => {
          if (!error) {
            global.client.handleReply.push({
              name: "tu",
              messageID: info.messageID,
              author: userID,
              type: "cultivation_input"
            });
          }
        });
      default:
        return api.sendMessage("‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
    }
    
    const result = cultivateWithSpiritStones(player, amount);
    
    if (!result.success) {
      let errorMsg = `‚ùå TU LUY·ªÜN TH·∫§T B·∫†I!\n\n`;
      errorMsg += `üìù L√Ω do: ${result.reason}\n`;
      
      if (result.reason.includes("Kh√¥ng ƒë·ªß linh th·∫°ch")) {
        errorMsg += `üíé Linh th·∫°ch hi·ªán c√≥: ${player.spiritStones.toLocaleString()}\n`;
        errorMsg += `üíé C·∫ßn: ${amount.toLocaleString()}\n`;
        errorMsg += `üíé Thi·∫øu: ${(amount - player.spiritStones).toLocaleString()}`;
      }
      
      return api.sendMessage(errorMsg, event.threadID, event.messageID);
    }
    
    savePlayer(userID, player);
    
    let successMsg = `‚úÖ TU LUY·ªÜN TH√ÄNH C√îNG!\n\n`;
    successMsg += `üíé ƒê√£ s·ª≠ d·ª•ng: ${amount.toLocaleString()} linh th·∫°ch\n`;
    successMsg += `‚ö° Kinh nghi·ªám nh·∫≠n ƒë∆∞·ª£c: ${result.finalExp.toLocaleString()}`;
    
    if (result.spiritRootBonus) {
      successMsg += ` (Bonus linh cƒÉn x${player.spiritRoot.multiplier})`;
    }
    successMsg += `\n`;
    
    if (result.levelUp) {
      successMsg += `üéâ LEVEL UP! L√™n c·∫£nh gi·ªõi ${getLevelName(result.newLevel)}!\n`;
    }
    
    successMsg += `\nüìä TR·∫†NG TH√ÅI SAU TU LUY·ªÜN:\n`;
    successMsg += `üèÜ C·∫£nh gi·ªõi: ${getDisplayLevelName(player)}\n`;
    successMsg += `‚ö° Kinh nghi·ªám: ${player.exp}/${getExpToLevel(player.level)}\n`;
    successMsg += `üíé Linh th·∫°ch c√≤n l·∫°i: ${player.spiritStones.toLocaleString()}\n`;
    
    if (isReadyForTribulation(player)) {
      successMsg += `‚ö° ƒê√£ s·∫µn s√†ng ƒë·ªô ki·∫øp!`;
    }
    
    return api.sendMessage(successMsg, event.threadID, event.messageID);
  }
  
  // X·ª≠ l√Ω reply cho nh·∫≠p s·ªë linh th·∫°ch tu luy·ªán
  if (handleReply.type === "cultivation_input") {
    const amount = parseInt(choice.trim());
    
    if (isNaN(amount) || amount <= 0) {
      return api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p s·ªë linh th·∫°ch h·ª£p l·ªá!\nV√≠ d·ª•: 1000", event.threadID, event.messageID);
    }
    
    const result = cultivateWithSpiritStones(player, amount);
    
    if (!result.success) {
      let errorMsg = `‚ùå TU LUY·ªÜN TH·∫§T B·∫†I!\n\n`;
      errorMsg += `üìù L√Ω do: ${result.reason}\n`;
      
      if (result.reason.includes("Kh√¥ng ƒë·ªß linh th·∫°ch")) {
        errorMsg += `üíé Linh th·∫°ch hi·ªán c√≥: ${player.spiritStones.toLocaleString()}\n`;
        errorMsg += `üíé C·∫ßn: ${amount.toLocaleString()}\n`;
        errorMsg += `üíé Thi·∫øu: ${(amount - player.spiritStones).toLocaleString()}`;
      }
      
      return api.sendMessage(errorMsg, event.threadID, event.messageID);
    }
    
    savePlayer(userID, player);
    
    let successMsg = `‚úÖ TU LUY·ªÜN TH√ÄNH C√îNG!\n\n`;
    successMsg += `üíé ƒê√£ s·ª≠ d·ª•ng: ${amount.toLocaleString()} linh th·∫°ch\n`;
    successMsg += `‚ö° Kinh nghi·ªám nh·∫≠n ƒë∆∞·ª£c: ${result.finalExp.toLocaleString()}`;
    
    if (result.spiritRootBonus) {
      successMsg += ` (Bonus linh cƒÉn x${player.spiritRoot.multiplier})`;
    }
    successMsg += `\n`;
    
    if (result.levelUp) {
      successMsg += `üéâ LEVEL UP! L√™n c·∫£nh gi·ªõi ${getLevelName(result.newLevel)}!\n`;
    }
    
    successMsg += `\nüìä TR·∫†NG TH√ÅI SAU TU LUY·ªÜN:\n`;
    successMsg += `üèÜ C·∫£nh gi·ªõi: ${getDisplayLevelName(player)}\n`;
    successMsg += `‚ö° Kinh nghi·ªám: ${player.exp}/${getExpToLevel(player.level)}\n`;
    successMsg += `üíé Linh th·∫°ch c√≤n l·∫°i: ${player.spiritStones.toLocaleString()}\n`;
    
    if (isReadyForTribulation(player)) {
      successMsg += `‚ö° ƒê√£ s·∫µn s√†ng ƒë·ªô ki·∫øp!`;
    }
    
    return api.sendMessage(successMsg, event.threadID, event.messageID);
  }

  // X·ª≠ l√Ω reply cho x√°c nh·∫≠n ƒë·ªô ki·∫øp
  if (handleReply.type === "tribulation_confirm") {
    const confirmChoice = parseInt(choice);
    
    if (confirmChoice === 1) {
      // B·∫Øt ƒë·∫ßu ƒë·ªô ki·∫øp
      if (isDaoCoreInjured(player)) {
        return api.sendMessage(`üíÄ ƒê·∫°o c∆° ƒëang b·ªã th∆∞∆°ng! Kh√¥ng th·ªÉ ƒë·ªô ki·∫øp.`, event.threadID, event.messageID);
      }
      
      if (!isReadyForTribulation(player)) {
        return api.sendMessage(`‚ùå Kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán ƒë·ªô ki·∫øp!`, event.threadID, event.messageID);
      }
      
      const result = attemptTribulation(player);
      savePlayer(userID, player);
      
      let resultMessage = result.message + `\n\nüìä TR·∫†NG TH√ÅI SAU ƒê·ªò KI·∫æP:\n`;
      resultMessage += `üèÜ C·∫£nh gi·ªõi: ${getDisplayLevelName(player)}\n`;
      resultMessage += `‚ö° Kinh nghi·ªám: ${player.exp.toLocaleString()}/${getExpToLevel(player.level).toLocaleString()}\n`;
      resultMessage += `‚ù§Ô∏è M√°u: ${player.hp}/${player.maxHp}\n`;
      resultMessage += `üí´ Linh l·ª±c: ${player.spiritPower}/${player.maxSpiritPower}\n`;
      if (isDaoCoreInjured(player)) {
        const timeLeft = getDaoCoreInjuryTimeLeft(player);
        resultMessage += `üíÄ ƒê·∫°o c∆°: B·ªã th∆∞∆°ng (${timeLeft} ph√∫t)\n`;
      }
      resultMessage += `\nüïê ${formatTime(new Date())}`;
      
      return api.sendMessage(resultMessage, event.threadID, event.messageID);
    } else if (confirmChoice === 2) {
      return api.sendMessage(`‚ùå ƒê√£ h·ªßy b·ªè ƒë·ªô ki·∫øp. Tu luy·ªán c·∫©n th·∫≠n!`, event.threadID, event.messageID);
    }
    
    return api.sendMessage("‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
  }

  // X·ª≠ l√Ω reply cho menu n√¢ng c·∫•p v≈© kh√≠
  if (handleReply.type === "weapon_upgrade_menu") {
    const weaponIndex = parseInt(choice) - 1;
    if (weaponIndex >= 0 && weaponIndex < handleReply.data.length) {
      const weapon = handleReply.data[weaponIndex];
      const level = weapon.level || 0;
      
      if (level >= 10) {
        return api.sendMessage(`‚öîÔ∏è ${weapon.name} ƒë√£ ƒë·∫°t c·∫•p t·ªëi ƒëa (10)!`, event.threadID, event.messageID);
      }
      
      const upgradeCosts = [100, 200, 400, 800, 1600, 3200, 6400, 12800, 25600, 51200];
      const successRates = [80, 75, 70, 65, 60, 50, 40, 30, 20, 10];
      const requiredCost = upgradeCosts[level];
      const successRate = successRates[level];
      
      let upgradeText = `üî• LUY·ªÜN KH√ç V≈® KH√ç:\n\n`;
      const gradeIcon = getGradeIcon(weapon.grade);
      upgradeText += `‚öîÔ∏è V≈© kh√≠: ${gradeIcon} ${weapon.name}\n`;
      upgradeText += `üìä Level hi·ªán t·∫°i: ${level}/10\n`;
      upgradeText += `üí• S√°t th∆∞∆°ng hi·ªán t·∫°i: ${weapon.attack}\n`;
      upgradeText += `üí• S√°t th∆∞∆°ng sau n√¢ng c·∫•p: ${Math.floor(weapon.attack * 1.15)}\n\n`;
      upgradeText += `üíé Chi ph√≠: ${requiredCost.toLocaleString()} linh th·∫°ch\n`;
      upgradeText += `üéØ T·ª∑ l·ªá th√†nh c√¥ng: ${successRate}%\n`;
      upgradeText += `üí∞ Linh th·∫°ch hi·ªán c√≥: ${player.spiritStones.toLocaleString()}\n\n`;
      
      if (player.spiritStones < requiredCost) {
        upgradeText += `‚ùå Kh√¥ng ƒë·ªß linh th·∫°ch ƒë·ªÉ n√¢ng c·∫•p!\n`;
        upgradeText += `üíé C√≤n thi·∫øu: ${(requiredCost - player.spiritStones).toLocaleString()} linh th·∫°ch`;
      } else {
        upgradeText += `1. üî• B·∫Øt ƒë·∫ßu luy·ªán kh√≠\n`;
        upgradeText += `2. ‚ùå H·ªßy b·ªè\n\n`;
        upgradeText += `‚ö†Ô∏è L∆∞u √Ω: Th·∫•t b·∫°i s·∫Ω m·∫•t linh th·∫°ch nh∆∞ng kh√¥ng m·∫•t v≈© kh√≠`;
      }
      
      return api.sendMessage(upgradeText, event.threadID, (error, info) => {
        if (!error && player.spiritStones >= requiredCost) {
          global.client.handleReply.push({
            name: "tu",
            messageID: info.messageID,
            author: userID,
            type: "weapon_upgrade_confirm",
            data: { weaponIndex, requiredCost }
          });
        }
      });
    }
    return api.sendMessage("‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
  }

  // X·ª≠ l√Ω reply cho x√°c nh·∫≠n n√¢ng c·∫•p v≈© kh√≠
  if (handleReply.type === "weapon_upgrade_confirm") {
    const confirmChoice = parseInt(choice);
    const { weaponIndex, requiredCost } = handleReply.data;
    
    if (confirmChoice === 1) {
      const result = upgradeWeapon(player, weaponIndex, requiredCost);
      
      if (!result.success) {
        let errorMsg = `‚ùå LUY·ªÜN KH√ç TH·∫§T B·∫†I!\n\n`;
        errorMsg += `üìù L√Ω do: ${result.reason}\n`;
        
        if (result.failed) {
          errorMsg += `üíî ƒê√£ m·∫•t ${result.lostSpiritStones} linh th·∫°ch do th·∫•t b·∫°i\n`;
          errorMsg += `üíé Linh th·∫°ch c√≤n l·∫°i: ${player.spiritStones.toLocaleString()}\n`;
          errorMsg += `üí° H√£y th·ª≠ l·∫°i v·ªõi may m·∫Øn h∆°n!`;
        }
        
        savePlayer(userID, player);
        return api.sendMessage(errorMsg, event.threadID, event.messageID);
      }
      
      savePlayer(userID, player);
      
      let successMsg = `üî• LUY·ªÜN KH√ç TH√ÄNH C√îNG!\n\n`;
      successMsg += `‚öîÔ∏è V≈© kh√≠: ${result.weaponName}\n`;
      successMsg += `üìà Level: ${result.newLevel - 1} ‚Üí ${result.newLevel}\n`;
      successMsg += `üí• S√°t th∆∞∆°ng: ${result.oldAttack} ‚Üí ${result.newAttack}\n`;
      successMsg += `üíé ƒê√£ s·ª≠ d·ª•ng: ${requiredCost.toLocaleString()} linh th·∫°ch\n`;
      successMsg += `üí∞ Linh th·∫°ch c√≤n l·∫°i: ${player.spiritStones.toLocaleString()}\n\n`;
      successMsg += `üéâ V≈© kh√≠ c·ªßa b·∫°n ƒë√£ m·∫°nh h∆°n!`;
      
      return api.sendMessage(successMsg, event.threadID, event.messageID);
    } else if (confirmChoice === 2) {
      return api.sendMessage(`‚ùå ƒê√£ h·ªßy b·ªè luy·ªán kh√≠.`, event.threadID, event.messageID);
    }
    
    return api.sendMessage("‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
  }

  // X·ª≠ l√Ω reply cho kho ƒë·ªì m·ªõi v·ªõi t√πy ch·ªçn s·ª≠ d·ª•ng/b√°n
  if (handleReply.type === "inventory_action_new") {
    const itemIndex = parseInt(choice) - 1;
    if (itemIndex >= 0 && itemIndex < handleReply.data.length) {
      const selectedGroup = handleReply.data[itemIndex];
      const { item, count } = selectedGroup;

      if (item.type === "ƒëan d∆∞·ª£c") {
        // S·ª≠ d·ª•ng ƒëan d∆∞·ª£c
        const inventoryIndex = player.inventory.findIndex(invItem => 
          invItem.name === item.name && invItem.type === "ƒëan d∆∞·ª£c"
        );
        if (inventoryIndex !== -1) {
          player.inventory.splice(inventoryIndex, 1);
          applyPotionEffects(player, item);
          savePlayer(userID, player);

          let msg = `‚úÖ ƒê√£ s·ª≠ d·ª•ng ${item.name}!\nüíä ${item.description}\n`;
          if (count > 1) msg += `üì¶ C√≤n l·∫°i: ${count - 1} vi√™n\n`;
          
          // Hi·ªÉn th·ªã tr·∫°ng th√°i hi·ªán t·∫°i
          msg += `‚ù§Ô∏è M√°u: ${player.hp}/${player.maxHp}\n`;
          if (hasExpBoost(player)) {
            const boostTimeLeft = Math.ceil((new Date(player.expBoostUntil) - new Date()) / 60000);
            msg += `‚ö° Buff exp: ${player.expBoostMultiplier}x (${boostTimeLeft} ph√∫t)\n`;
          }
          if (hasInjuryImmunity(player)) {
            const immunityTimeLeft = Math.ceil((new Date(player.immunityUntil) - new Date()) / 60000);
            msg += `üõ°Ô∏è Mi·ªÖn nhi·ªÖm b·ªã th∆∞∆°ng (${immunityTimeLeft} ph√∫t)\n`;
          }
          if (!isPlayerInjured(player)) {
            msg += `ü©π Tr·∫°ng th√°i: Kh·ªèe m·∫°nh`;
          }

          return api.sendMessage(msg, event.threadID, event.messageID);
        }
      } else {
        // B√°n v·∫≠t ph·∫©m kh√°c
        let sellText = `üí∞ B√°n ${item.name}:\n\n`;
        const gradeIcon = getGradeIcon(item.grade);
        const typeIcon = item.type === "v≈© kh√≠" ? "‚öîÔ∏è" :
                        item.type === "y√™u ƒëan" ? "üîÆ" : 
                        item.type === "v·∫≠t li·ªáu" ? "üß∞" : 
                        item.type === "ng·ªçc" ? "üíé" :
                        item.type === "tinh t√∫y" ? "‚ú®" :
                        item.type === "linh h·ªìn" ? "üëª" : "üì¶";
        
        sellText += `${gradeIcon}${typeIcon} ${item.name}\n`;
        if (item.type === "v≈© kh√≠") {
          sellText += `üó°Ô∏è S√°t th∆∞∆°ng: ${item.attack}\n`;
        }
        sellText += `üíé Gi√° b√°n: ${item.sellPrice} linh th·∫°ch/c√°i\n\n`;
        sellText += `1. B√°n 1 c√°i - üíé${item.sellPrice}\n`;
        if (count > 1) {
          sellText += `2. B√°n t·∫•t c·∫£ (${count} c√°i) - üíé${item.sellPrice * count}\n`;
        }
        sellText += `\nüí° Reply s·ªë th·ª© t·ª± ƒë·ªÉ b√°n`;

        return api.sendMessage(sellText, event.threadID, (error, info) => {
          if (!error) {
            global.client.handleReply.push({
              name: "tu",
              messageID: info.messageID,
              author: userID,
              type: "sell_item_new",
              data: selectedGroup
            });
          }
        });
      }
    }
    return api.sendMessage("‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
  }

  // X·ª≠ l√Ω reply cho kho ƒë·ªì
  if (handleReply.type === "inventory_category") {
    const categoryIndex = parseInt(choice);
    let inventoryText = "";

    if (categoryIndex >= 1 && categoryIndex <= 5) {
      const gradeName = getGradeName(categoryIndex);
      const gradeIcon = getGradeIcon(gradeName);
      const gradeItems = player.inventory.filter(eq => eq.grade === gradeName);

      inventoryText = `üì¶ Kho ƒë·ªì - ${gradeIcon} ${gradeName.toUpperCase()}:\n\n`;
      if (gradeItems.length > 0) {
        const groupedItems = {};
        gradeItems.forEach(item => {
          groupedItems[item.name] = (groupedItems[item.name] || 0) + 1;
        });
        Object.entries(groupedItems).forEach(([name, count]) => {
          const item = gradeItems.find(i => i.name === name);
          inventoryText += `‚Ä¢ ${name} x${count} - üíé${item.sellPrice} m·ªói c√°i\n`;
        });
      } else {
        inventoryText += `Ch∆∞a c√≥ trang b·ªã n√†o trong danh m·ª•c n√†y!`;
      }
    } else if (categoryIndex === 6) {
      inventoryText = "üì¶ Kho ƒë·ªì - T·∫§T C·∫¢:\n\n";
      const groupedItems = {};
      player.inventory.forEach(item => {
        groupedItems[item.name] = (groupedItems[item.name] || 0) + 1;
      });
      Object.entries(groupedItems).forEach(([name, count]) => {
        const item = player.inventory.find(i => i.name === name);
        const gradeIcon = getGradeIcon(item.grade);
        inventoryText += `‚Ä¢ ${gradeIcon} ${name} x${count} - üíé${item.sellPrice} m·ªói c√°i\n`;
      });
    } else {
      return api.sendMessage("‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
    }

    return api.sendMessage(inventoryText, event.threadID, event.messageID);
  }
};